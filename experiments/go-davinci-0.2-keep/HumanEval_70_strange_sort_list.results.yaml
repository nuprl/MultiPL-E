language: go_test.go
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    var min_index, max_index int\n    for i, v := range lst {\n\
    \        if i == 0 {\n            min = v\n            max = v\n            min_index\
    \ = 0\n            max_index = 0\n        } else {\n            if v < min {\n\
    \                min = v\n                min_index = i\n            }\n     \
    \       if v > max {\n                max = v\n                max_index = i\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    if len(lst)\
    \ == 1 {\n        return result\n    }\n    if min_index < max_index {\n     \
    \   result = append(result, max)\n        if len(lst) == 2 {\n            return\
    \ result\n        }\n        result = append(result, strange_sort_list(lst[1:max_index])...)\n\
    \        result = append(result, strange_sort_list(lst[max_index+1:])...)\n  \
    \  } else {\n        result = append(result, strange_sort_list(lst[1:min_index])...)\n\
    \        result = append(result, strange_sort_list(lst[min_index+1:])...)\n  \
    \      result = append(result, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a380?, 0x4, 0x4})\n\
    \t/tmp/tmp6xz20i8p_test.go:51 +0x5c5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp6xz20i8p_test.go:69 +0x1f7\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n\
    \    result[0] = lst[0]\n    lst = lst[1:]\n    for i := 1; i < len(result); i++\
    \ {\n        if i % 2 == 1 {\n            result[i] = max(lst)\n        } else\
    \ {\n            result[i] = min(lst)\n        }\n    }\n    return result\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptal5pdk4_test.go:24:25: undefined: max

    /tmp/tmptal5pdk4_test.go:26:25: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n     \
    \   if lst[i] != min && lst[i] != max {\n            result = append(result, lst[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpt24qupg1_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpt24qupg1_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpt24qupg1_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpt24qupg1_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    var result []int\n    result = append(result, min)\n    for\
    \ len(lst) > 1 {\n        if lst[0] == min {\n            lst = lst[1:]\n    \
    \    }\n        if lst[len(lst)-1] == max {\n            lst = lst[:len(lst)-1]\n\
    \        }\n        if len(lst) > 0 {\n            result = append(result, max)\n\
    \            result = append(result, min)\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074340
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, i := range lst {\n        if i < min {\n            min =\
    \ i\n        }\n        if i > max {\n            max = i\n        }\n    }\n\
    \    res := []int{min}\n    for {\n        if len(lst) == 1 {\n            break\n\
    \        }\n        max = lst[0]\n        for _, i := range lst {\n          \
    \  if i > max {\n                max = i\n            }\n        }\n        res\
    \ = append(res, max)\n        lst = remove(lst, max)\n        if len(lst) == 1\
    \ {\n            break\n        }\n        min = lst[0]\n        for _, i := range\
    \ lst {\n            if i < min {\n                min = i\n            }\n  \
    \      }\n        res = append(res, min)\n        lst = remove(lst, min)\n   \
    \ }\n    res = append(res, lst[0])\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpechl28p7_test.go:41:15: undefined: remove

    /tmp/tmpechl28p7_test.go:52:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = find_min_max(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove_from_list(lst, min)\n\
    \        lst = remove_from_list(lst, max)\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn0uqc44y_test.go:22:20: undefined: find_min_max

    /tmp/tmpn0uqc44y_test.go:27:15: undefined: remove_from_list

    /tmp/tmpn0uqc44y_test.go:28:15: undefined: remove_from_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    var result []int\n    var\
    \ odd bool\n    for len(lst) > 0 {\n        if odd {\n            result = append(result,\
    \ max)\n            lst = remove(lst, max)\n            odd = false\n        }\
    \ else {\n            result = append(result, min)\n            lst = remove(lst,\
    \ min)\n            odd = true\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj4iiof5_test.go:37:19: undefined: remove

    /tmp/tmprj4iiof5_test.go:41:19: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  var result []int\n    for len(lst) > 0 {\n        min, max := min_max(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa9a676f2_test.go:18:21: undefined: min_max

    /tmp/tmpa9a676f2_test.go:23:15: undefined: remove

    /tmp/tmpa9a676f2_test.go:24:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    res := []int{min}\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            continue\n\
    \        }\n        res = append(res, lst[i])\n    }\n    res = append(res, max)\n\
    \    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == max {\n      \
    \      continue\n        }\n        res = append(res, lst[i])\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpxbmay9pl_test.go:70: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpxbmay9pl_test.go:70: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpxbmay9pl_test.go:70: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpxbmay9pl_test.go:70: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=1) %!s(int=8) %!s(int=7) %!s(int=6)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpxbmay9pl_test.go:70: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=7)\
    \ %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbmay9pl_test.go:70:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    min_index\
    \ := 0\n    max := lst[0]\n    max_index := 0\n    for i, v := range lst {\n \
    \       if v < min {\n            min = v\n            min_index = i\n       \
    \ }\n        if v > max {\n            max = v\n            max_index = i\n  \
    \      }\n    }\n    if min_index < max_index {\n        lst = append(lst[:min_index],\
    \ lst[min_index+1:]...)\n        lst = append(lst[:max_index-1], lst[max_index:]...)\n\
    \    } else {\n        lst = append(lst[:max_index], lst[max_index+1:]...)\n \
    \       lst = append(lst[:min_index-1], lst[min_index:]...)\n    }\n    return\
    \ append([]int{min, max}, strange_sort_list(lst)...)\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000024390?, 0x1, 0x20?})\n\
    \t/tmp/tmp5xpn172f_test.go:38 +0x3fd\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x3, 0x2b5eef17b108?})\n\t/tmp/tmp5xpn172f_test.go:40 +0x357\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x5, 0x5e3ea0?})\n\t/tmp/tmp5xpn172f_test.go:40 +0x357\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp5xpn172f_test.go:51 +0xd7\ntesting.tRunner(0xc0001924e0, 0x529168)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for {\n        min, max = minMax(lst)\n        result = append(result,\
    \ min)\n        if min == max {\n            break\n        }\n        result\
    \ = append(result, max)\n        if len(lst) == 2 {\n            break\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdhbnj9v5_test.go:22:20: undefined: minMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            return []int{lst[1], lst[0]}\n        }\n        return lst\n   \
    \ }\n    var result []int\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, max)\n    for _, v := range\
    \ lst {\n        if v != min && v != max {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpw_igs013_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpw_igs013_test.go:71:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpw_igs013_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpw_igs013_test.go:71: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpw_igs013_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpw_igs013_test.go:71:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n\
    \    result[0] = lst[0]\n    lst = lst[1:]\n    for i := 1; i < len(result); i\
    \ += 2 {\n        result[i] = lst[len(lst) - 1]\n        lst = lst[:len(lst) -\
    \ 1]\n        if len(lst) == 0 {\n            break\n        }\n        result[i\
    \ + 1] = lst[0]\n        lst = lst[1:]\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpej_jpbkc_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpej_jpbkc_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = removeMinMax(lst, min, max)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31p5ik5b_test.go:22:20: undefined: findMinMax

    /tmp/tmp31p5ik5b_test.go:27:15: undefined: removeMinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    var result []int\n    var min, max int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \        } else {\n            if lst[i] < min {\n                min = lst[i]\n\
    \            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            continue\n\
    \        }\n        if lst[i] == max {\n            result = append(result, max)\n\
    \            continue\n        }\n        result = append(result, lst[i])\n  \
    \  }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmphu9942d0_test.go:78: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmphu9942d0_test.go:78: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmphu9942d0_test.go:78: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmphu9942d0_test.go:78:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmphu9942d0_test.go:78:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmphu9942d0_test.go:78:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmphu9942d0_test.go:78: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min\
    \ = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpey5qyf0q_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpey5qyf0q_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpey5qyf0q_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpey5qyf0q_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n  \
    \      if v < min {\n            min = v\n        }\n        if v > max {\n  \
    \          max = v\n        }\n    }\n    res := []int{min}\n    for i := 0; i\
    \ < len(lst); i++ {\n        if lst[i] != min {\n            res = append(res,\
    \ lst[i])\n        }\n    }\n    res = append(res, max)\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] != max {\n            res = append(res, lst[i])\n \
    \       }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp81bxvbdv_test.go:74: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmp81bxvbdv_test.go:74: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp81bxvbdv_test.go:74: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp81bxvbdv_test.go:74: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp81bxvbdv_test.go:74: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp81bxvbdv_test.go:74: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp81bxvbdv_test.go:74:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=-5) %!s(int=-5)]'\nF"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    for\
    \ i, v := range lst {\n        if i == 0 {\n            min = v\n            max\
    \ = v\n        } else {\n            if v < min {\n                min = v\n \
    \           }\n            if v > max {\n                max = v\n           \
    \ }\n        }\n    }\n    var res []int\n    res = append(res, min)\n    var\
    \ min_lst, max_lst []int\n    for _, v := range lst {\n        if v != min {\n\
    \            if v < max {\n                min_lst = append(min_lst, v)\n    \
    \        } else {\n                max_lst = append(max_lst, v)\n            }\n\
    \        }\n    }\n    for len(min_lst) > 0 && len(max_lst) > 0 {\n        res\
    \ = append(res, max_lst[0])\n        res = append(res, min_lst[0])\n        min_lst\
    \ = min_lst[1:]\n        max_lst = max_lst[1:]\n    }\n    if len(min_lst) > 0\
    \ {\n        res = append(res, min_lst...)\n    }\n    if len(max_lst) > 0 {\n\
    \        res = append(res, max_lst...)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmppzzs3_ho_test.go:81: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmppzzs3_ho_test.go:81:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmppzzs3_ho_test.go:81: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmppzzs3_ho_test.go:81: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmppzzs3_ho_test.go:81: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmppzzs3_ho_test.go:81: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = getMinMax(lst)\n  \
    \      result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqqn08uox_test.go:22:20: undefined: getMinMax

    /tmp/tmpqqn08uox_test.go:27:15: undefined: remove

    /tmp/tmpqqn08uox_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n  \
    \      for _, v := range lst {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        result = append(result, min)\n        result =\
    \ append(result, max)\n        lst = remove(lst, min)\n        lst = remove(lst,\
    \ max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8xm7ky2b_test.go:33:15: undefined: remove

    /tmp/tmp8xm7ky2b_test.go:34:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    if len(lst) == 4 {\n        return []int{lst[0], lst[3],\
    \ lst[1], lst[2]}\n    }\n    if len(lst) == 5 {\n        return []int{lst[0],\
    \ lst[4], lst[1], lst[3], lst[2]}\n    }\n    if len(lst) == 6 {\n        return\
    \ []int{lst[0], lst[5], lst[1], lst[4], lst[2], lst[3]}\n    }\n    if len(lst)\
    \ == 7 {\n        return []int{lst[0], lst[6], lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]}\n    }\n    if len(lst) == 8 {\n        return []int{lst[0], lst[7],\
    \ lst[1], lst[6], lst[2], lst[5], lst[3], lst[4]}\n    }\n    if len(lst) == 9\
    \ {\n        return []int{lst[0], lst[8], lst[1], lst[7], lst[2], lst[6], lst[3],\
    \ lst[5], lst[4]}\n    }\n    if len(lst) == 10 {\n        return []int{lst[0],\
    \ lst[9], lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]}\n  \
    \  }\n    if len(lst) == 11 {\n        return []int{lst[0], lst\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpma88v1w3_test.go:50:33: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            return []int{lst[1], lst[0]}\n        }\n        return lst\n   \
    \ }\n    var result []int\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, max)\n    var new_lst []int\n\
    \    for _, v := range lst {\n        if v != min && v != max {\n            new_lst\
    \ = append(new_lst, v)\n        }\n    }\n    result = append(result, strange_sort_list(new_lst)...)\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpf26n1w0r_test.go:73: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpf26n1w0r_test.go:73: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    var result []int\n    result\
    \ = append(result, min)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min {\n            continue\n        }\n        result = append(result, lst[i])\n\
    \    }\n    result = append(result, max)\n    for i := len(lst) - 1; i >= 0; i--\
    \ {\n        if lst[i] == max {\n            continue\n        }\n        result\
    \ = append(result, lst[i])\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpb6lqy9el_test.go:71: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpb6lqy9el_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpb6lqy9el_test.go:71: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpb6lqy9el_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=1) %!s(int=8) %!s(int=7) %!s(int=6)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpb6lqy9el_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=7)\
    \ %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpb6lqy9el_test.go:71:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    var res []int\n    res =\
    \ append(res, min)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ min {\n            continue\n        }\n        res = append(res, lst[i])\n\
    \    }\n    res = append(res, max)\n    for i := len(lst) - 1; i >= 0; i-- {\n\
    \        if lst[i] == max {\n            continue\n        }\n        res = append(res,\
    \ lst[i])\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpxqcq4rzo_test.go:71: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpxqcq4rzo_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpxqcq4rzo_test.go:71: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpxqcq4rzo_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=1) %!s(int=8) %!s(int=7) %!s(int=6)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpxqcq4rzo_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=7)\
    \ %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxqcq4rzo_test.go:71:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min int\n    var max\
    \ int\n    var min_index int\n    var max_index int\n    var new_list []int\n\
    \    for i := 0; i < len(lst); i++ {\n        if i == 0 {\n            min = lst[i]\n\
    \            max = lst[i]\n            min_index = i\n            max_index =\
    \ i\n        } else {\n            if lst[i] < min {\n                min = lst[i]\n\
    \                min_index = i\n            }\n            if lst[i] > max {\n\
    \                max = lst[i]\n                max_index = i\n            }\n\
    \        }\n    }\n    new_list = append(new_list, min)\n    new_list = append(new_list,\
    \ max)\n    lst = append(lst[:min_index], lst[min_index+1:]...)\n    lst = append(lst[:max_index-1],\
    \ lst[max_index:]...)\n    new_list = append(new_list, strange_sort_list(lst)...)\n\
    \    return new_list\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000024390?, 0x1, 0x5})\n\
    \t/tmp/tmpbfzckqan_test.go:44 +0x394\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x3, 0x5})\n\t/tmp/tmpbfzckqan_test.go:45 +0x2e5\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x5, 0x5})\n\t/tmp/tmpbfzckqan_test.go:45 +0x2e5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpbfzckqan_test.go:57 +0xd7\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // your code here\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpcx8foqhi_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcx8foqhi_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpcx8foqhi_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcx8foqhi_test.go:41:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcx8foqhi_test.go:41:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpcx8foqhi_test.go:41: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            return []int{lst[1], lst[0]}\n        }\n        return lst\n   \
    \ }\n    var min int\n    var max int\n    var min_index int\n    var max_index\
    \ int\n    for i, v := range lst {\n        if i == 0 {\n            min = v\n\
    \            max = v\n            min_index = 0\n            max_index = 0\n \
    \       } else {\n            if v < min {\n                min = v\n        \
    \        min_index = i\n            }\n            if v > max {\n            \
    \    max = v\n                max_index = i\n            }\n        }\n    }\n\
    \    var new_lst []int\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst,\
    \ max)\n    var new_lst_2 []int\n    for i, v := range lst {\n        if i !=\
    \ min_index && i != max_index {\n            new_lst_2 = append(new_lst_2, v)\n\
    \        }\n    }\n    new_lst_2 = strange_sort_list(new_lst_2)\n    for _, v\
    \ := range new_lst_2 {\n        new_lst = append(new_lst, v)\n    }\n    return\
    \ new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpab5hoxjz_test.go:86: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    sorted := make([]int, len(lst))\n\
    \    min, max := min_max(lst)\n    sorted[0] = min\n    sorted[len(lst) - 1] =\
    \ max\n    for i := 1; i < len(lst) - 1; i++ {\n        if i % 2 == 0 {\n    \
    \        sorted[i] = min_except(lst, sorted)\n        } else {\n            sorted[i]\
    \ = max_except(lst, sorted)\n        }\n    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbad49a0__test.go:20:17: undefined: min_max

    /tmp/tmpbad49a0__test.go:25:25: undefined: min_except

    /tmp/tmpbad49a0__test.go:27:25: undefined: max_except

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            return []int{lst[1], lst[0]}\n        }\n        return lst\n   \
    \ }\n    var result []int\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, max)\n    for _, v := range\
    \ lst {\n        if v != min && v != max {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpw_igs013_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpw_igs013_test.go:71:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpw_igs013_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpw_igs013_test.go:71: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpw_igs013_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpw_igs013_test.go:71:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    result = append(result, min)\n    if\
    \ min == max {\n        return result\n    }\n    result = append(result, max)\n\
    \    if len(lst) == 2 {\n        return result\n    }\n    var lst2 []int\n  \
    \  for _, v := range lst {\n        if v != min && v != max {\n            lst2\
    \ = append(lst2, v)\n        }\n    }\n    return append(result, strange_sort_list(lst2)...)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpctul8znr_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpctul8znr_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074332
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n\
    \    for i, _ := range lst {\n        result[i] = -1\n    }\n    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    result[0] = min\n    result[len(lst) - 1] = max\n    lst = remove(lst,\
    \ min)\n    lst = remove(lst, max)\n    return strange_sort_list_rec(lst, result,\
    \ 1, len(lst) - 2)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7hn197d1_test.go:35:11: undefined: remove

    /tmp/tmp7hn197d1_test.go:36:11: undefined: remove

    /tmp/tmp7hn197d1_test.go:37:12: undefined: strange_sort_list_rec

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n    for _, v\
    \ := range lst {\n        if v < min {\n            min = v\n        }\n     \
    \   if v > max {\n            max = v\n        }\n    }\n    var new_lst []int\n\
    \    new_lst = append(new_lst, min)\n    new_lst = append(new_lst, max)\n    for\
    \ _, v := range lst {\n        if v != min && v != max {\n            new_lst\
    \ = append(new_lst, v)\n        }\n    }\n    return strange_sort_list(new_lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x40cf1d\nruntime.growslice(0x0?,\
    \ {0x0?, 0x44a174?, 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0201e0410 sp=0xc0201e03a8 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc0043c0b80?,\
    \ 0x4, 0x44a174?})\n\t/tmp/tmpz_y4ah1h_test.go:40 +0xb5 fp=0xc0201e0490 sp=0xc0201e0410\
    \ pc=0x4ef715\ncommand-line-arguments_test.strange_sort_list({0xc0043c0b60?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpz_y4ah1h_test.go:47 +0x197 fp=0xc0201e0510 sp=0xc0201e0490\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0043c0b40?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpz_y4ah1h_test.go:47 +0x197 fp=0xc0201e0590 sp=0xc0201e0510\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0043c0b20?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpz_y4ah1h_test.go:47 +0x197 fp=0xc0201e0610 sp=0xc0201e0590\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0043c0b00?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpz_y4ah1h_test.go:47 +0x197 fp=0xc0201e0690 sp=0xc0201e0610\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0043c0ae0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpz_y4ah1h_test.go:47 +0x197 fp=0xc0201e0710 sp=0xc0201e0690\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0043c0ac0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpz_y4ah1h_test.go:47 +0x197 fp=0xc0201e0790 sp=0xc0201e0710\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0043c0aa0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpz_y4ah1h_test.go:47 +0x197 fp=0xc0201e0810 sp=0xc0201e07"
  timestamp: 1660074334
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp6be3532t_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp6be3532t_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp6be3532t_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp6be3532t_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp6be3532t_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp6be3532t_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp6be3532t_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min\
    \ = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    var result []int\n    result = append(result, min)\n  \
    \  result = append(result, max)\n    for i := 1; i < len(lst); i++ {\n       \
    \ if lst[i] != min && lst[i] != max {\n            result = append(result, lst[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmphr894fxh_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmphr894fxh_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmphr894fxh_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmphr894fxh_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmphr894fxh_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmphr894fxh_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmphr894fxh_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    for\
    \ i, v := range lst {\n        if i == 0 {\n            min = v\n            max\
    \ = v\n        } else {\n            if v < min {\n                min = v\n \
    \           }\n            if v > max {\n                max = v\n           \
    \ }\n        }\n    }\n    var result []int\n    result = append(result, min)\n\
    \    for i := 0; i < len(lst) - 1; i++ {\n        if i % 2 == 0 {\n          \
    \  result = append(result, max)\n        } else {\n            result = append(result,\
    \ min)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpxgdsm2gc_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxgdsm2gc_test.go:66: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpxgdsm2gc_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxgdsm2gc_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxgdsm2gc_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpxgdsm2gc_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for _, v := range lst {\n        if v != min && v != max {\n     \
    \       res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpdov4hie8_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpdov4hie8_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpdov4hie8_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpdov4hie8_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpdov4hie8_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpdov4hie8_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpdov4hie8_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    lst =\
    \ append(lst, min)\n    lst = append(lst, max)\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpy_483t6y_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpy_483t6y_test.go:54:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpy_483t6y_test.go:54:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpy_483t6y_test.go:54:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=1)\
    \ %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpy_483t6y_test.go:54: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpy_483t6y_test.go:54:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpy_483t6y_test.go:54: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpy_483t6y_test.go:54: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var result []int\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpwpx_w3k4_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpwpx_w3k4_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpwpx_w3k4_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpwpx_w3k4_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    var result []int\n    result\
    \ = append(result, min)\n    result = append(result, max)\n    for i := 0; i <\
    \ len(lst); i++ {\n        if lst[i] != min && lst[i] != max {\n            result\
    \ = append(result, lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmph3a6da8p_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmph3a6da8p_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmph3a6da8p_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmph3a6da8p_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmph3a6da8p_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append(lst, min)\n    lst = append(lst, max)\n    lst = lst[2:]\n \
    \   return strange_sort_list(lst)\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170338\
    \ stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.growslice(0x4fd700?, {0xc0061261e0?,\
    \ 0x4?, 0x4?}, 0x5?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:166\
    \ +0x6b7 fp=0xc020170348 sp=0xc020170340 pc=0x44a2f7\ncommand-line-arguments_test.strange_sort_list({0xc0061261e0?,\
    \ 0x4, 0x0?})\n\t/tmp/tmpwt_om7yl_test.go:29 +0x85 fp=0xc0201703b0 sp=0xc020170348\
    \ pc=0x4ef6e5\ncommand-line-arguments_test.strange_sort_list({0xc0061261d0?, 0xc0061261a0?,\
    \ 0x1000000000000?})\n\t/tmp/tmpwt_om7yl_test.go:32 +0xfd fp=0xc020170418 sp=0xc0201703b0\
    \ pc=0x4ef75d\ncommand-line-arguments_test.strange_sort_list({0xc0061261a0?, 0x4?,\
    \ 0x0?})\n\t/tmp/tmpwt_om7yl_test.go:32 +0xfd fp=0xc020170480 sp=0xc020170418\
    \ pc=0x4ef75d\ncommand-line-arguments_test.strange_sort_list({0xc006126190?, 0xc006126160?,\
    \ 0x1000000000000?})\n\t/tmp/tmpwt_om7yl_test.go:32 +0xfd fp=0xc0201704e8 sp=0xc020170480\
    \ pc=0x4ef75d\ncommand-line-arguments_test.strange_sort_list({0xc006126160?, 0x4?,\
    \ 0x0?})\n\t/tmp/tmpwt_om7yl_test.go:32 +0xfd fp=0xc020170550 sp=0xc0201704e8\
    \ pc=0x4ef75d\ncommand-line-arguments_test.strange_sort_list({0xc006126150?, 0xc006126120?,\
    \ 0x1000000000000?})\n\t/tmp/tmpwt_om7yl_test.go:32 +0xfd fp=0xc0201705b8 sp=0xc020170550\
    \ pc=0x4ef75d\ncommand-line-arguments_test.strange_sort_list({0xc006126120?, 0x4?,\
    \ 0x0?})\n\t/tmp/tmpwt_om7yl_test.go:32 +0xfd fp=0xc020170620 sp=0xc0201705b8\
    \ pc=0x4ef75d\ncommand-line-arguments_test.strange_sort_list({0xc006126110?, 0xc0061260e0?,\
    \ 0x1000000000000?})\n\t/tmp/tmpwt_om7yl_test.go:32 +0xfd fp=0xc020170688 sp=0xc020170620\
    \ pc=0x4ef75d\ncommand-line-arguments_test.strange_sort_list({0xc0061260e0?, 0x4?,\
    \ 0x0?})\n\t/tmp/t"
  timestamp: 1660074334
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n     \
    \   if lst[i] != min && lst[i] != max {\n            result = append(result, lst[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpt24qupg1_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpt24qupg1_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpt24qupg1_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpt24qupg1_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            return []int{lst[1], lst[0]}\n        }\n        return lst\n   \
    \ }\n    if len(lst) == 3 {\n        if lst[0] > lst[1] {\n            lst[0],\
    \ lst[1] = lst[1], lst[0]\n        }\n        if lst[1] > lst[2] {\n         \
    \   lst[1], lst[2] = lst[2], lst[1]\n        }\n        if lst[0] > lst[1] {\n\
    \            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    if len(lst) == 4 {\n        if lst[0] > lst[1] {\n            lst[0],\
    \ lst[1] = lst[1], lst[0]\n        }\n        if lst[2] > lst[3] {\n         \
    \   lst[2], lst[3] = lst[3], lst[2]\n        }\n        if lst[0] > lst[2] {\n\
    \            lst[0], lst[2] = lst[2], lst[0]\n        }\n        if lst[1] > lst[3]\
    \ {\n            lst[1], lst[3] = lst[3], lst[1]\n        }\n        if lst[1]\
    \ > lst[2] {\n            lst[1], lst[2] = lst[2], lst[1]\n        }\n       \
    \ return lst\n    }\n    if len(lst) == 5 {\n        if lst[0] > lst[1] {\n  \
    \          lst[0], lst[1] = lst[1], lst[0]\n        }\n        if\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplwewe2b__test.go:63:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for i := 0; i < len(lst); i++ {\n        min, max = findMinMax(lst)\n\
    \        if i % 2 == 0 {\n            result = append(result, min)\n        }\
    \ else {\n            result = append(result, max)\n        }\n        lst = remove(lst,\
    \ min)\n        lst = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp24syzvdr_test.go:22:20: undefined: findMinMax

    /tmp/tmp24syzvdr_test.go:28:15: undefined: remove

    /tmp/tmp24syzvdr_test.go:29:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    res :=\
    \ []int{min}\n    for len(lst) > 1 {\n        if lst[0] == min {\n           \
    \ lst = lst[1:]\n        }\n        if lst[len(lst)-1] == max {\n            lst\
    \ = lst[:len(lst)-1]\n        }\n        res = append(res, max)\n        if len(lst)\
    \ == 0 {\n            break\n        }\n        res = append(res, min)\n    }\n\
    \    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074345
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n     \
    \   if lst[i] != min && lst[i] != max {\n            result = append(result, lst[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpt24qupg1_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpt24qupg1_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpt24qupg1_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpt24qupg1_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n  \
    \      if v < min {\n            min = v\n        }\n        if v > max {\n  \
    \          max = v\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    new_lst = append(new_lst, max)\n    for _, v := range lst {\n    \
    \    if v != min && v != max {\n            new_lst = append(new_lst, v)\n   \
    \     }\n    }\n    return strange_sort_list(new_lst)\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0358\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.(*mspan).nextFreeIndex(0x2b3208c37270?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mbitmap.go:167 +0x152 fp=0xc0201e0368\
    \ sp=0xc0201e0360 pc=0x412d32\nruntime.(*mcache).nextFree(0x2b31e17d05b8, 0x9)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:879 +0x4d fp=0xc0201e03b0\
    \ sp=0xc0201e0368 pc=0x40c42d\nruntime.mallocgc(0x20, 0x0, 0x0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1085\
    \ +0x4e5 fp=0xc0201e0428 sp=0xc0201e03b0 pc=0x40cae5\nruntime.growslice(0x0?,\
    \ {0xc004393df0?, 0x44a174?, 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0201e0490 sp=0xc0201e0428 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc0043967c0?,\
    \ 0x4, 0x44a174?})\n\t/tmp/tmp5ahparn1_test.go:43 +0x15a fp=0xc0201e0510 sp=0xc0201e0490\
    \ pc=0x4ef7ba\ncommand-line-arguments_test.strange_sort_list({0xc0043967a0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp5ahparn1_test.go:46 +0x197 fp=0xc0201e0590 sp=0xc0201e0510\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc004396780?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp5ahparn1_test.go:46 +0x197 fp=0xc0201e0610 sp=0xc0201e0590\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc004396760?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp5ahparn1_test.go:46 +0x197 fp=0xc0201e0690 sp=0xc0201e0610\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc004396740?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp5ahparn1_test.go:46 +0x197 fp=0xc0201e0710 sp=0xc0201e0690\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc004396720?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp5ahparn1_test.go:46 +0x197 fp=0xc0201e0"
  timestamp: 1660074334
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    sorted := make([]int, len(lst))\n\
    \    sorted[0] = min(lst)\n    lst = remove(lst, sorted[0])\n    for i := 1; i\
    \ < len(sorted); i += 2 {\n        sorted[i] = max(lst)\n        lst = remove(lst,\
    \ sorted[i])\n        if len(lst) == 0 {\n            break\n        }\n     \
    \   sorted[i+1] = min(lst)\n        lst = remove(lst, sorted[i+1])\n    }\n  \
    \  return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_yrsqsle_test.go:20:17: undefined: min

    /tmp/tmp_yrsqsle_test.go:21:11: undefined: remove

    /tmp/tmp_yrsqsle_test.go:23:21: undefined: max

    /tmp/tmp_yrsqsle_test.go:24:15: undefined: remove

    /tmp/tmp_yrsqsle_test.go:28:23: undefined: min

    /tmp/tmp_yrsqsle_test.go:29:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for i := 0; i < len(lst); i++ {\n        if i == 0 {\n   \
    \         min = lst[i]\n            max = lst[i]\n        } else {\n         \
    \   if lst[i] < min {\n                min = lst[i]\n            }\n         \
    \   if lst[i] > max {\n                max = lst[i]\n            }\n        }\n\
    \    }\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n       \
    \     result = append(result, min)\n        } else {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpy8oq9tth_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpy8oq9tth_test.go:65: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpy8oq9tth_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpy8oq9tth_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpy8oq9tth_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpy8oq9tth_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074332
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    res := []int{min}\n    for len(lst) > 1 {\n        if lst[0] == min {\n \
    \           lst = lst[1:]\n        }\n        if lst[len(lst)-1] == max {\n  \
    \          lst = lst[:len(lst)-1]\n        }\n        res = append(res, max)\n\
    \        res = append(res, min)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074346
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    var result []int\n    result = append(result, min)\n    result\
    \ = append(result, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            result = append(result, lst[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp0uet7f51_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp0uet7f51_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp0uet7f51_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp0uet7f51_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp0uet7f51_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp0uet7f51_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp0uet7f51_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    var min_index, max_index int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \            min_index = i\n            max_index = i\n        } else {\n    \
    \        if lst[i] < min {\n                min = lst[i]\n                min_index\
    \ = i\n            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \                max_index = i\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, max)\n    var lst_min, lst_max\
    \ []int\n    for i := 0; i < len(lst); i++ {\n        if i != min_index && i !=\
    \ max_index {\n            if lst[i] < max {\n                lst_min = append(lst_min,\
    \ lst[i])\n            } else {\n                lst_max = append(lst_max, lst[i])\n\
    \            }\n        }\n    }\n    result = append(result, strange_sort_list(lst_min)...)\n\
    \    result = append(result, strange_sort_list(lst_max)...)\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp3f3f_y4e_test.go:77: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)\
    \ %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n    \
    \    tmp3f3f_y4e_test.go:77: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp3f3f_y4e_test.go:77:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp3f3f_y4e_test.go:77:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmp3f3f_y4e_test.go:77: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074333
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var res []int\n    var min,\
    \ max int\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n       \
    \ for _, v := range lst {\n            if v < min {\n                min = v\n\
    \            }\n            if v > max {\n                max = v\n          \
    \  }\n        }\n        res = append(res, min)\n        if min != max {\n   \
    \         res = append(res, max)\n        }\n        lst = remove(lst, min)\n\
    \        lst = remove(lst, max)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp555yde3v_test.go:35:15: undefined: remove

    /tmp/tmp555yde3v_test.go:36:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for i := 0; i < len(lst); i++ {\n        min, max = min_max(lst)\n\
    \        if i % 2 == 0 {\n            result = append(result, min)\n        }\
    \ else {\n            result = append(result, max)\n        }\n        lst = remove(lst,\
    \ min)\n        lst = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpav4cnxgp_test.go:22:20: undefined: min_max

    /tmp/tmpav4cnxgp_test.go:28:15: undefined: remove

    /tmp/tmpav4cnxgp_test.go:29:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n  \
    \      for _, v := range lst {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        result = append(result, min)\n        if min !=\
    \ max {\n            result = append(result, max)\n        }\n        lst = remove(lst,\
    \ min)\n        lst = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1pzsj000_test.go:35:15: undefined: remove

    /tmp/tmp1pzsj000_test.go:36:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var result []int\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpwpx_w3k4_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpwpx_w3k4_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpwpx_w3k4_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpwpx_w3k4_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    new_lst := []int{min}\n \
    \   for i := 0; i < len(lst); i++ {\n        if lst[i] != min {\n            new_lst\
    \ = append(new_lst, lst[i])\n        }\n    }\n    for i := len(new_lst) - 1;\
    \ i >= 0; i-- {\n        if new_lst[i] != max {\n            new_lst = append(new_lst,\
    \ new_lst[i])\n        }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpm4ab1dod_test.go:67: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n    \
    \    tmpm4ab1dod_test.go:67: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpm4ab1dod_test.go:67: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpm4ab1dod_test.go:67: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpm4ab1dod_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpm4ab1dod_test.go:67: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    var min_idx, max_idx int\n    for i, v := range lst {\n  \
    \      if i == 0 {\n            min = v\n            max = v\n            min_idx\
    \ = 0\n            max_idx = 0\n        } else {\n            if v < min {\n \
    \               min = v\n                min_idx = i\n            }\n        \
    \    if v > max {\n                max = v\n                max_idx = i\n    \
    \        }\n        }\n    }\n    result = append(result, min)\n    if min_idx\
    \ != max_idx {\n        result = append(result, max)\n    }\n    var new_lst []int\n\
    \    for i, v := range lst {\n        if i != min_idx && i != max_idx {\n    \
    \        new_lst = append(new_lst, v)\n        }\n    }\n    result = append(result,\
    \ strange_sort_list(new_lst)...)\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = removeMinMax(lst, min, max)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31p5ik5b_test.go:22:20: undefined: findMinMax

    /tmp/tmp31p5ik5b_test.go:27:15: undefined: removeMinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    res := []int{min}\n    lst\
    \ = append(lst[:0], lst[1:]...)\n    for len(lst) > 0 {\n        max = lst[0]\n\
    \        maxi := 0\n        for i, v := range lst {\n            if v > max {\n\
    \                max = v\n                maxi = i\n            }\n        }\n\
    \        res = append(res, max)\n        lst = append(lst[:maxi], lst[maxi+1:]...)\n\
    \        if len(lst) == 0 {\n            break\n        }\n        min = lst[0]\n\
    \        mini := 0\n        for i, v := range lst {\n            if v < min {\n\
    \                min = v\n                mini = i\n            }\n        }\n\
    \        res = append(res, min)\n        lst = append(lst[:mini], lst[mini+1:]...)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpke0fk035_test.go:83: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpke0fk035_test.go:83: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=2) %!s(int=2) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    result := []int{min}\n  \
    \  lst = append(lst[:0], lst[1:]...)\n    for len(lst) > 0 {\n        min = lst[0]\n\
    \        max = lst[0]\n        for _, v := range lst {\n            if v < min\
    \ {\n                min = v\n            }\n            if v > max {\n      \
    \          max = v\n            }\n        }\n        result = append(result,\
    \ max)\n        lst = append(lst[:0], lst[1:]...)\n        for i, v := range lst\
    \ {\n            if v == max {\n                lst = append(lst[:i], lst[i+1:]...)\n\
    \                break\n            }\n        }\n        if len(lst) > 0 {\n\
    \            result = append(result, min)\n            lst = append(lst[:0], lst[1:]...)\n\
    \            for i, v := range lst {\n                if v == min {\n        \
    \            lst = append(lst[:i], lst[i+1:]...)\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpzzqek2vx_test.go:88: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpzzqek2vx_test.go:88: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpzzqek2vx_test.go:88:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpzzqek2vx_test.go:88: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpzzqek2vx_test.go:88:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=4)\
    \ %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n    \
    \    tmpzzqek2vx_test.go:88: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min\
    \ = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpey5qyf0q_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpey5qyf0q_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpey5qyf0q_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpey5qyf0q_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    var result []int\n    var min, max int\n    min,\
    \ max = findMinMax(lst)\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    lst = removeMinMax(lst, min, max)\n    for len(lst) > 0 {\n      \
    \  min, max = findMinMax(lst)\n        result = append(result, min)\n        result\
    \ = append(result, max)\n        lst = removeMinMax(lst, min, max)\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlgb2fh__test.go:24:16: undefined: findMinMax

    /tmp/tmpvlgb2fh__test.go:27:11: undefined: removeMinMax

    /tmp/tmpvlgb2fh__test.go:29:20: undefined: findMinMax

    /tmp/tmpvlgb2fh__test.go:32:15: undefined: removeMinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    result := []int{min}\n  \
    \  for len(lst) > 0 {\n        if len(lst) == 1 {\n            result = append(result,\
    \ lst[0])\n            lst = []int{}\n        } else {\n            if lst[0]\
    \ == min {\n                result = append(result, lst[len(lst)-1])\n       \
    \         lst = lst[:len(lst)-1]\n            } else if lst[len(lst)-1] == max\
    \ {\n                result = append(result, lst[0])\n                lst = lst[1:]\n\
    \            } else {\n                result = append(result, lst[len(lst)-1])\n\
    \                lst = lst[:len(lst)-1]\n            }\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpgtyd_8uo_test.go:74: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpgtyd_8uo_test.go:74:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpgtyd_8uo_test.go:74: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n    \
    \    tmpgtyd_8uo_test.go:74: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpgtyd_8uo_test.go:74: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=7)\
    \ %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpgtyd_8uo_test.go:74:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n  \
    \      for _, v := range lst {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        result = append(result, min)\n        result =\
    \ append(result, max)\n        lst = remove(lst, min)\n        lst = remove(lst,\
    \ max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8xm7ky2b_test.go:33:15: undefined: remove

    /tmp/tmp8xm7ky2b_test.go:34:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n\
    \    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    result[0] = min\n    result[len(lst) - 1] =\
    \ max\n    for i := 1; i < len(lst) - 1; i++ {\n        if i % 2 == 0 {\n    \
    \        result[i] = max\n        } else {\n            result[i] = min\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpyxlsdnlb_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpyxlsdnlb_test.go:63: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=9) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpyxlsdnlb_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpyxlsdnlb_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpyxlsdnlb_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8)\
    \ %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpyxlsdnlb_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  // your code here\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpcx8foqhi_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcx8foqhi_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpcx8foqhi_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcx8foqhi_test.go:41:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcx8foqhi_test.go:41:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpcx8foqhi_test.go:41: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = removeMinMax(lst, min, max)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31p5ik5b_test.go:22:20: undefined: findMinMax

    /tmp/tmp31p5ik5b_test.go:27:15: undefined: removeMinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    if len(lst) == 4 {\n        return []int{lst[0], lst[3],\
    \ lst[1], lst[2]}\n    }\n    if len(lst) == 5 {\n        return []int{lst[0],\
    \ lst[4], lst[1], lst[3], lst[2]}\n    }\n    if len(lst) == 6 {\n        return\
    \ []int{lst[0], lst[5], lst[1], lst[4], lst[2], lst[3]}\n    }\n    if len(lst)\
    \ == 7 {\n        return []int{lst[0], lst[6], lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]}\n    }\n    if len(lst) == 8 {\n        return []int{lst[0], lst[7],\
    \ lst[1], lst[6], lst[2], lst[5], lst[3], lst[4]}\n    }\n    if len(lst) == 9\
    \ {\n        return []int{lst[0], lst[8], lst[1], lst[7], lst[2], lst[6], lst[3],\
    \ lst[5], lst[4]}\n    }\n    if len(lst) == 10 {\n        return []int{lst[0],\
    \ lst[9], lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]}\n  \
    \  }\n    return []int{}\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpvxooh8cw_test.go:73: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpvxooh8cw_test.go:73: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    sorted := make([]int, len(lst))\n\
    \    sorted[0] = min(lst)\n    lst = remove(lst, sorted[0])\n    for i := 1; i\
    \ < len(sorted); i += 2 {\n        sorted[i] = max(lst)\n        lst = remove(lst,\
    \ sorted[i])\n        if len(lst) == 0 {\n            break\n        }\n     \
    \   sorted[i+1] = min(lst)\n        lst = remove(lst, sorted[i+1])\n    }\n  \
    \  return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_yrsqsle_test.go:20:17: undefined: min

    /tmp/tmp_yrsqsle_test.go:21:11: undefined: remove

    /tmp/tmp_yrsqsle_test.go:23:21: undefined: max

    /tmp/tmp_yrsqsle_test.go:24:15: undefined: remove

    /tmp/tmp_yrsqsle_test.go:28:23: undefined: min

    /tmp/tmp_yrsqsle_test.go:29:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min\
    \ = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpey5qyf0q_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpey5qyf0q_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpey5qyf0q_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpey5qyf0q_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    var min_index, max_index int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \            min_index = i\n            max_index = i\n        } else {\n    \
    \        if lst[i] < min {\n                min = lst[i]\n                min_index\
    \ = i\n            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \                max_index = i\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, max)\n    lst = append(lst[:min_index],\
    \ lst[min_index+1:]...)\n    lst = append(lst[:max_index-1], lst[max_index:]...)\n\
    \    return append(result, strange_sort_list(lst)...)\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000024390?, 0x1, 0x5})\n\
    \t/tmp/tmp0evduhq1_test.go:42 +0x394\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x3, 0x5})\n\t/tmp/tmp0evduhq1_test.go:43 +0x2e5\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x5, 0x5})\n\t/tmp/tmp0evduhq1_test.go:43 +0x2e5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp0evduhq1_test.go:54 +0xd7\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    if min\
    \ == max {\n        return lst\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 1; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp48adday9_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp48adday9_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp48adday9_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmp48adday9_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp48adday9_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    res := []int{min}\n    for len(lst) > 1 {\n        if lst[0] == min {\n \
    \           lst = lst[1:]\n        }\n        if lst[len(lst)-1] == max {\n  \
    \          lst = lst[:len(lst)-1]\n        }\n        res = append(res, max)\n\
    \        res = append(res, min)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074346
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    res := []int{min}\n    for\
    \ len(lst) > 1 {\n        res = append(res, max)\n        res = append(res, min)\n\
    \        lst = lst[1:]\n        if len(lst) == 1 {\n            res = append(res,\
    \ lst[0])\n            break\n        }\n        lst = lst[1:]\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpa_ioedq3_test.go:67: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpa_ioedq3_test.go:67:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpa_ioedq3_test.go:67: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpa_ioedq3_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpa_ioedq3_test.go:67: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpa_ioedq3_test.go:67:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append(lst, min)\n    lst = append(lst, max)\n    return lst\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp82u1_91h_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=1)\
    \ %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp82u1_91h_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp82u1_91h_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmp82u1_91h_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar"
  timestamp: 1660074334
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = find_min_max(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove_min_max(lst, min, max)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5rzkf0y4_test.go:22:20: undefined: find_min_max

    /tmp/tmp5rzkf0y4_test.go:27:15: undefined: remove_min_max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var res []int\n    var min,\
    \ max int\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n       \
    \ for _, v := range lst {\n            if v < min {\n                min = v\n\
    \            }\n            if v > max {\n                max = v\n          \
    \  }\n        }\n        res = append(res, min)\n        if min != max {\n   \
    \         res = append(res, max)\n        }\n        lst = remove(lst, min)\n\
    \        lst = remove(lst, max)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp555yde3v_test.go:35:15: undefined: remove

    /tmp/tmp555yde3v_test.go:36:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    var\
    \ min_index, max_index int\n    var result []int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \            min_index = i\n            max_index = i\n        } else {\n    \
    \        if lst[i] < min {\n                min = lst[i]\n                min_index\
    \ = i\n            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \                max_index = i\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, max)\n    var lst_min []int\n\
    \    var lst_max []int\n    for i := 0; i < len(lst); i++ {\n        if i != min_index\
    \ && i != max_index {\n            lst_min = append(lst_min, lst[i])\n       \
    \     lst_max = append(lst_max, lst[i])\n        }\n    }\n    result = append(result,\
    \ strange_sort_list(lst_min)...)\n    result = append(result, strange_sort_list(lst_max)...)\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp59jtmf0n_test.go:75: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp59jtmf0n_test.go:75:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=7) %!s(int=7) %!s(int=7)\
    \ %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=7) %!s(int=7) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp59jtmf0n_test.go:75:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp59jtmf0n_test.go:75:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7) %!s(int=6)\
    \ %!s(int=7) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp59jtmf0n_test.go:75:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp59jtmf0n_test.go:75:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3)\
    \ %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=3) %!s(int=6)\
    \ %!s(int="
  timestamp: 1660074335
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    var result []int\n    var min int\n    var max int\n\
    \    var min_index int\n    var max_index int\n    for i, v := range lst {\n \
    \       if i == 0 {\n            min = v\n            max = v\n            min_index\
    \ = 0\n            max_index = 0\n        } else {\n            if v < min {\n\
    \                min = v\n                min_index = i\n            }\n     \
    \       if v > max {\n                max = v\n                max_index = i\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    if min_index\
    \ == max_index {\n        result = append(result, max)\n    } else {\n       \
    \ result = append(result, max)\n    }\n    lst = append(lst[:min_index], lst[min_index+1:]...)\n\
    \    if min_index != max_index {\n        lst = append(lst[:max_index-1], lst[max_index:]...)\n\
    \    }\n    result = append(result, strange_sort_list(lst)...)\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpym5dggds_test.go:79: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=9)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpym5dggds_test.go:79: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpym5dggds_test.go:79:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append(lst, min)\n    lst = append(lst, max)\n    return lst\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp82u1_91h_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=1)\
    \ %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp82u1_91h_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp82u1_91h_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmp82u1_91h_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar"
  timestamp: 1660074334
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var result []int\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for _, v := range lst {\n        if v != min && v != max {\n     \
    \       result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp5irfga6e_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp5irfga6e_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp5irfga6e_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp5irfga6e_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp5irfga6e_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp5irfga6e_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp5irfga6e_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var res []int\n    var min,\
    \ max int\n    for len(lst) > 0 {\n        min, max = minMax(lst)\n        res\
    \ = append(res, min)\n        if min != max {\n            res = append(res, max)\n\
    \        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n \
    \   }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpse60can9_test.go:22:20: undefined: minMax

    /tmp/tmpse60can9_test.go:27:15: undefined: remove

    /tmp/tmpse60can9_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    res := []int{min}\n    lst = append(lst[:0], lst[1:]...)\n    for len(lst)\
    \ > 0 {\n        max = lst[0]\n        max_i := 0\n        for i, v := range lst\
    \ {\n            if v > max {\n                max = v\n                max_i\
    \ = i\n            }\n        }\n        res = append(res, max)\n        lst =\
    \ append(lst[:max_i], lst[max_i+1:]...)\n        if len(lst) == 0 {\n        \
    \    break\n        }\n        min = lst[0]\n        min_i := 0\n        for i,\
    \ v := range lst {\n            if v < min {\n                min = v\n      \
    \          min_i = i\n            }\n        }\n        res = append(res, min)\n\
    \        lst = append(lst[:min_i], lst[min_i+1:]...)\n    }\n    return res\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpy1jofdbe_test.go:80: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpy1jofdbe_test.go:80: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=2) %!s(int=2) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    var min_index, max_index int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \            min_index = i\n            max_index = i\n        } else {\n    \
    \        if lst[i] < min {\n                min = lst[i]\n                min_index\
    \ = i\n            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \                max_index = i\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, max)\n    var lst_min, lst_max\
    \ []int\n    for i := 0; i < len(lst); i++ {\n        if i != min_index && i !=\
    \ max_index {\n            if lst[i] < min {\n                lst_min = append(lst_min,\
    \ lst[i])\n            } else {\n                lst_max = append(lst_max, lst[i])\n\
    \            }\n        }\n    }\n    lst_min = strange_sort_list(lst_min)\n \
    \   lst_max = strange_sort_list(lst_max)\n    result = append(result, lst_min...)\n\
    \    result = append(result, lst_max...)\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpdzjh2ecg_test.go:79: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)\
    \ %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n    \
    \    tmpdzjh2ecg_test.go:79: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpdzjh2ecg_test.go:79:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpdzjh2ecg_test.go:79:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpdzjh2ecg_test.go:79:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    var result []int\n    result\
    \ = append(result, min)\n    result = append(result, max)\n    for i := 0; i <\
    \ len(lst); i++ {\n        if lst[i] != min && lst[i] != max {\n            result\
    \ = append(result, lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmph3a6da8p_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmph3a6da8p_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmph3a6da8p_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmph3a6da8p_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmph3a6da8p_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    var res []int\n    res = append(res, min)\n    var i, j int\n\
    \    for i, j = 0, len(lst) - 1; i < j; i, j = i + 1, j - 1 {\n        res = append(res,\
    \ max)\n        res = append(res, lst[i + 1])\n        res = append(res, lst[j])\n\
    \    }\n    if i == j {\n        res = append(res, lst[i])\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpn1s7o4wk_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n    \
    \    tmpn1s7o4wk_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=9) %!s(int=7)\
    \ %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmpn1s7o4wk_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=3)\
    \ %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpn1s7o4wk_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=1) %!s(int=9)\
    \ %!s(int=7) %!s(int=9) %!s(int=9) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpn1s7o4wk_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpn1s7o4wk_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=8) %!s(int=8) %!s(int=3) %!s(int=7) %!s(int=8) %!s(int=4) %!s(int=6)\
    \ %!s(int=8) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpn1s7o4wk_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=2) %!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=-5) %!s(int=5)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8\
    \ (0.00s)\n        tmp"
  timestamp: 1660074336
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = find_min_max(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove_from_list(lst, min)\n\
    \        lst = remove_from_list(lst, max)\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn0uqc44y_test.go:22:20: undefined: find_min_max

    /tmp/tmpn0uqc44y_test.go:27:15: undefined: remove_from_list

    /tmp/tmpn0uqc44y_test.go:28:15: undefined: remove_from_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            result = append(result, lst[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcs8_vgjl_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpcs8_vgjl_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcs8_vgjl_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpcs8_vgjl_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    var min_index, max_index int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \            min_index = i\n            max_index = i\n        } else {\n    \
    \        if lst[i] < min {\n                min = lst[i]\n                min_index\
    \ = i\n            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \                max_index = i\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    lst = append(lst[:min_index], lst[min_index+1:]...)\n\
    \    result = append(result, max)\n    lst = append(lst[:max_index], lst[max_index+1:]...)\n\
    \    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            min\
    \ = lst[i]\n            min_index = i\n            for j := i; j < len(lst); j++\
    \ {\n                if lst[j] < min {\n                    min = lst[j]\n   \
    \                 min_index = j\n                }\n            }\n          \
    \  result = append(result, min)\n            lst = append(lst[:min_index], lst[min_index+1:]...)\n\
    \        } else {\n            max = lst[i]\n            max_index = i\n     \
    \       for j := i; j < len(lst); j++ {\n                if lst[j] > max {\n \
    \                   max = lst[j]\n                    max_index = j\n        \
    \        }\n            }\n            result = append(result, max)\n        \
    \    lst = append(lst[:max_index], lst[max_index+1:]...)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [4:3]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4, 0x4})\n\
    \t/tmp/tmpcqcf_utk_test.go:42 +0x725\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpcqcf_utk_test.go:78 +0x77\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    var result []int\n    var min int\n    var max int\n\
    \    var min_index int\n    var max_index int\n    var lst_len int = len(lst)\n\
    \    var i int\n    for i = 0; i < lst_len; i++ {\n        min = lst[0]\n    \
    \    max = lst[0]\n        min_index = 0\n        max_index = 0\n        for j\
    \ := 0; j < len(lst); j++ {\n            if lst[j] < min {\n                min\
    \ = lst[j]\n                min_index = j\n            }\n            if lst[j]\
    \ > max {\n                max = lst[j]\n                max_index = j\n     \
    \       }\n        }\n        if i % 2 == 0 {\n            result = append(result,\
    \ min)\n            lst = append(lst[:min_index], lst[min_index+1:]...)\n    \
    \    } else {\n            result = append(result, max)\n            lst = append(lst[:max_index],\
    \ lst[max_index+1:]...)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    var result []int\n    var min, max int\n    var min_index,\
    \ max_index int\n    for i := 0; i < len(lst); i++ {\n        if i == 0 {\n  \
    \          min = lst[i]\n            max = lst[i]\n            min_index = i\n\
    \            max_index = i\n        } else {\n            if lst[i] < min {\n\
    \                min = lst[i]\n                min_index = i\n            }\n\
    \            if lst[i] > max {\n                max = lst[i]\n               \
    \ max_index = i\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    lst = append(lst[:min_index], lst[min_index+1:]...)\n    if len(lst)\
    \ == 1 {\n        result = append(result, lst[0])\n        return result\n   \
    \ }\n    result = append(result, max)\n    lst = append(lst[:max_index], lst[max_index+1:]...)\n\
    \    if len(lst) == 1 {\n        result = append(result, lst[0])\n        return\
    \ result\n    }\n    for i := 0; i < len(lst); i++ {\n        if i == 0 {\n  \
    \          min = lst[i]\n            min_index = i\n        } else {\n       \
    \     if lst[i] < min {\n                min = lst[i]\n                min_index\
    \ = i\n            }\n        }\n    }\n    result = append(result, min)\n   \
    \ lst = append(lst[:min_index], lst[min_index+1:]...)\n    if len(lst) == 1 {\n\
    \        result = append(result, lst[0])\n        return result\n    }\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i == 0 {\n            max = lst[i]\n\
    \            max_index = i\n        } else\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp18hfa4p8_test.go:76:1: expected if statement or block, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = min_max(lst)\n    \
    \    result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn802rvh0_test.go:22:20: undefined: min_max

    /tmp/tmpn802rvh0_test.go:27:15: undefined: remove

    /tmp/tmpn802rvh0_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    if min\
    \ == max {\n        return lst\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmps53ldefk_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmps53ldefk_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmps53ldefk_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmps53ldefk_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmps53ldefk_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            return []int{lst[1], lst[0]}\n        }\n        return lst\n   \
    \ }\n    var result []int\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, max)\n    for i := 0; i <\
    \ len(lst); i++ {\n        if lst[i] != min && lst[i] != max {\n            result\
    \ = append(result, lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp80rei_60_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp80rei_60_test.go:71:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp80rei_60_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp80rei_60_test.go:71: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp80rei_60_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp80rei_60_test.go:71:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    var result []int\n    result = append(result, min)\n    result\
    \ = append(result, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            result = append(result, lst[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp0uet7f51_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp0uet7f51_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp0uet7f51_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp0uet7f51_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp0uet7f51_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp0uet7f51_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp0uet7f51_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    var min, max int\n    var min_index, max_index int\n   \
    \ for i, v := range lst {\n        if i == 0 {\n            min = v\n        \
    \    max = v\n            min_index = 0\n            max_index = 0\n        }\
    \ else {\n            if v < min {\n                min = v\n                min_index\
    \ = i\n            }\n            if v > max {\n                max = v\n    \
    \            max_index = i\n            }\n        }\n    }\n    var new_lst []int\n\
    \    new_lst = append(new_lst, min)\n    new_lst = append(new_lst, max)\n    var\
    \ new_lst_2 []int\n    for i, v := range lst {\n        if i != min_index && i\
    \ != max_index {\n            new_lst_2 = append(new_lst_2, v)\n        }\n  \
    \  }\n    new_lst = append(new_lst, strange_sort_list(new_lst_2)...)\n    return\
    \ new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpdl8p3l4j_test.go:78: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min\
    \ = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for _, v := range lst {\n        if v != min && v != max {\n     \
    \       res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp_77iwfl6_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp_77iwfl6_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp_77iwfl6_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp_77iwfl6_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp_77iwfl6_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp_77iwfl6_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp_77iwfl6_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var res []int\n    res = append(res, min)\n    res = append(res, max)\n \
    \   for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            res = append(res, lst[i])\n        }\n    }\n    return res\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmptrava0ax_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptrava0ax_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmptrava0ax_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmptrava0ax_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmptrava0ax_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptrava0ax_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmptrava0ax_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ojuu3hj_test.go:22:20: undefined: findMinMax

    /tmp/tmp5ojuu3hj_test.go:27:15: undefined: remove

    /tmp/tmp5ojuu3hj_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    var result []int\n    var min, max int\n    if lst[0]\
    \ < lst[1] {\n        min = lst[0]\n        max = lst[1]\n    } else {\n     \
    \   min = lst[1]\n        max = lst[0]\n    }\n    for i := 2; i < len(lst); i++\
    \ {\n        if lst[i] < min {\n            max = min\n            min = lst[i]\n\
    \        } else if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    result = append(result, min)\n    result = append(result, max)\n    for i\
    \ := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max {\n   \
    \         result = append(result, lst[i])\n        }\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp6_d_lnq8_test.go:70: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp6_d_lnq8_test.go:70:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp6_d_lnq8_test.go:70: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp6_d_lnq8_test.go:70: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp6_d_lnq8_test.go:70: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp6_d_lnq8_test.go:70:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    var res []int\n    res =\
    \ append(res, min)\n    res = append(res, max)\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] != min && lst[i] != max {\n            res = append(res,\
    \ lst[i])\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpreq4pzmi_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpreq4pzmi_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpreq4pzmi_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpreq4pzmi_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpreq4pzmi_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    res := []int{min}\n    for len(lst) > 1 {\n        if min == max {\n    \
    \        return res\n        }\n        lst = lst[1:]\n        if lst[0] == min\
    \ {\n            lst = lst[1:]\n        }\n        if lst[0] == max {\n      \
    \      lst = lst[1:]\n        }\n        res = append(res, max)\n        max =\
    \ lst[0]\n        for _, v := range lst {\n            if v > max {\n        \
    \        max = v\n            }\n        }\n        res = append(res, min)\n \
    \       min = lst[0]\n        for _, v := range lst {\n            if v < min\
    \ {\n                min = v\n            }\n        }\n    }\n    return res\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0, 0x4, 0x4})\n\
    \t/tmp/tmp_exizx_1_test.go:42 +0x27c\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp_exizx_1_test.go:66 +0x77\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    res := []int{min}\n    lst = append(lst[:0], lst[1:]...)\n    for len(lst)\
    \ > 0 {\n        min = lst[0]\n        max = lst[0]\n        for _, v := range\
    \ lst {\n            if v < min {\n                min = v\n            }\n  \
    \          if v > max {\n                max = v\n            }\n        }\n \
    \       if len(res) % 2 == 0 {\n            res = append(res, max)\n         \
    \   lst = append(lst[:0], lst[1:]...)\n        } else {\n            res = append(res,\
    \ min)\n            lst = append(lst[:0], lst[1:]...)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpp_f8btko_test.go:74: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpp_f8btko_test.go:74: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=9) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpp_f8btko_test.go:74: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=5) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpp_f8btko_test.go:74:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpp_f8btko_test.go:74:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=8)\
    \ %!s(int=6) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpp_f8btko_test.go:74: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    res :=\
    \ []int{min}\n    for i := 0; i < len(lst) - 1; i++ {\n        if i % 2 == 0 {\n\
    \            res = append(res, max)\n        } else {\n            res = append(res,\
    \ min)\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpuda6onvl_test.go:60: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpuda6onvl_test.go:60: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpuda6onvl_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpuda6onvl_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpuda6onvl_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpuda6onvl_test.go:60: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    result := []int{min}\n  \
    \  for i := 1; i < len(lst); i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, max)\n        } else {\n            result = append(result,\
    \ min)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp5_416id5_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=4) %!s(int=1)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp5_416id5_test.go:64: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=9) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp5_416id5_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp5_416id5_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp5_416id5_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8)\
    \ %!s(int=1) %!s(int=8) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp5_416id5_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min, max = findMinMax(lst)\n    result = append(result, min)\n\
    \    result = append(result, max)\n    lst = remove(lst, min)\n    lst = remove(lst,\
    \ max)\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n        result\
    \ = append(result, min)\n        result = append(result, max)\n        lst = remove(lst,\
    \ min)\n        lst = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5r8hrhs_test.go:21:16: undefined: findMinMax

    /tmp/tmpn5r8hrhs_test.go:24:11: undefined: remove

    /tmp/tmpn5r8hrhs_test.go:25:11: undefined: remove

    /tmp/tmpn5r8hrhs_test.go:27:20: undefined: findMinMax

    /tmp/tmpn5r8hrhs_test.go:30:15: undefined: remove

    /tmp/tmpn5r8hrhs_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var result []int\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpwpx_w3k4_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpwpx_w3k4_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpwpx_w3k4_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpwpx_w3k4_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            return []int{lst[1], lst[0]}\n        }\n        return lst\n   \
    \ }\n    var res []int\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    res =\
    \ append(res, min)\n    res = append(res, max)\n    for _, v := range lst {\n\
    \        if v != min && v != max {\n            res = append(res, v)\n       \
    \ }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n\
    \  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpgyljofdl_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpgyljofdl_test.go:71:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpgyljofdl_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpgyljofdl_test.go:71: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpgyljofdl_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpgyljofdl_test.go:71:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var res []int\n    res = append(res, min)\n    res = append(res, max)\n \
    \   for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            res = append(res, lst[i])\n        }\n    }\n    return res\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmptrava0ax_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptrava0ax_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmptrava0ax_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmptrava0ax_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmptrava0ax_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptrava0ax_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmptrava0ax_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ojuu3hj_test.go:22:20: undefined: findMinMax

    /tmp/tmp5ojuu3hj_test.go:27:15: undefined: remove

    /tmp/tmp5ojuu3hj_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            result[i]\
    \ = min(lst)\n        } else {\n            result[i] = max(lst)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gqeabs3_test.go:22:25: undefined: min

    /tmp/tmp6gqeabs3_test.go:24:25: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n\
    \    min, max := findMinMax(lst)\n    result[0] = min\n    result[len(lst) - 1]\
    \ = max\n    lst = remove(lst, min)\n    lst = remove(lst, max)\n    return strange_sort_list_rec(lst,\
    \ result, 1, len(lst) - 2)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n\
    \  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp580wcp3g_test.go:20:17: undefined: findMinMax

    /tmp/tmp580wcp3g_test.go:23:11: undefined: remove

    /tmp/tmp580wcp3g_test.go:24:11: undefined: remove

    /tmp/tmp580wcp3g_test.go:25:12: undefined: strange_sort_list_rec

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n     \
    \   if lst[i] != min && lst[i] != max {\n            result = append(result, lst[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpt24qupg1_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpt24qupg1_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpt24qupg1_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpt24qupg1_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpt24qupg1_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max, min_index,\
    \ max_index int\n    min = lst[0]\n    max = lst[0]\n    for i, v := range lst\
    \ {\n        if v < min {\n            min = v\n            min_index = i\n  \
    \      }\n        if v > max {\n            max = v\n            max_index = i\n\
    \        }\n    }\n    var result []int\n    result = append(result, min)\n  \
    \  if min_index < max_index {\n        result = append(result, lst[min_index+1:max_index]...)\n\
    \    }\n    result = append(result, max)\n    if max_index < len(lst)-1 {\n  \
    \      result = append(result, lst[max_index+1:]...)\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpvtghyww9_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvtghyww9_test.go:65: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpvtghyww9_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvtghyww9_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpvtghyww9_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvtghyww9_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpvtghyww9_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8\
    \ (0.00s)\n        tmpvtghyww9_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var res []int\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpv28k73xl_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpv28k73xl_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpv28k73xl_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpv28k73xl_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpv28k73xl_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpv28k73xl_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpv28k73xl_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var result []int\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpwpx_w3k4_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpwpx_w3k4_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpwpx_w3k4_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpwpx_w3k4_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for i := 0; i < len(lst); i++ {\n        min, max = findMinMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3zli3dbl_test.go:22:20: undefined: findMinMax

    /tmp/tmp3zli3dbl_test.go:27:15: undefined: remove

    /tmp/tmp3zli3dbl_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) <= 1 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n  \
    \      for _, v := range lst {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        result = append(result, min)\n        result =\
    \ append(result, max)\n        lst = remove(lst, min)\n        lst = remove(lst,\
    \ max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_7aegf1n_test.go:33:15: undefined: remove

    /tmp/tmp_7aegf1n_test.go:34:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    for\
    \ i, v := range lst {\n        if i == 0 {\n            min = v\n            max\
    \ = v\n        } else {\n            if v < min {\n                min = v\n \
    \           }\n            if v > max {\n                max = v\n           \
    \ }\n        }\n    }\n    var result []int\n    result = append(result, min)\n\
    \    result = append(result, max)\n    for _, v := range lst {\n        if v !=\
    \ min && v != max {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpuxnx0_bk_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpuxnx0_bk_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpuxnx0_bk_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpuxnx0_bk_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpuxnx0_bk_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpuxnx0_bk_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpuxnx0_bk_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ojuu3hj_test.go:22:20: undefined: findMinMax

    /tmp/tmp5ojuu3hj_test.go:27:15: undefined: remove

    /tmp/tmp5ojuu3hj_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            return []int{lst[1], lst[0]}\n        }\n        return lst\n   \
    \ }\n    var result []int\n    result = append(result, lst[0])\n    lst = lst[1:]\n\
    \    for len(lst) > 0 {\n        var min, max int\n        min = lst[0]\n    \
    \    max = lst[0]\n        for _, v := range lst {\n            if v < min {\n\
    \                min = v\n            }\n            if v > max {\n          \
    \      max = v\n            }\n        }\n        result = append(result, max)\n\
    \        lst = remove(lst, max)\n        if len(lst) == 0 {\n            break\n\
    \        }\n        result = append(result, min)\n        lst = remove(lst, min)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp57dcu5qp_test.go:44:15: undefined: remove

    /tmp/tmp57dcu5qp_test.go:49:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var result []int\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpax3a4pgh_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpax3a4pgh_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpax3a4pgh_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpax3a4pgh_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpax3a4pgh_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpax3a4pgh_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpax3a4pgh_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ojuu3hj_test.go:22:20: undefined: findMinMax

    /tmp/tmp5ojuu3hj_test.go:27:15: undefined: remove

    /tmp/tmp5ojuu3hj_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    var new_lst\
    \ []int\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst, max)\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            new_lst = append(new_lst, lst[i])\n        }\n    }\n    return\
    \ new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpgd_ezhv1_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpgd_ezhv1_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpgd_ezhv1_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpgd_ezhv1_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpgd_ezhv1_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpgd_ezhv1_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    var min_idx, max_idx int\n    for i := 0; i < len(lst); i++\
    \ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \            min_idx = i\n            max_idx = i\n        } else {\n        \
    \    if lst[i] < min {\n                min = lst[i]\n                min_idx\
    \ = i\n            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \                max_idx = i\n            }\n        }\n    }\n    if min_idx\
    \ < max_idx {\n        result = append(result, min)\n        result = append(result,\
    \ strange_sort_list(lst[min_idx+1:max_idx])...)\n        result = append(result,\
    \ max)\n        result = append(result, strange_sort_list(lst[max_idx+1:])...)\n\
    \    } else {\n        result = append(result, max)\n        result = append(result,\
    \ strange_sort_list(lst[max_idx+1:min_idx])...)\n        result = append(result,\
    \ min)\n        result = append(result, strange_sort_list(lst[min_idx+1:])...)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000243d0?, 0x1, 0x3})\n\
    \t/tmp/tmpinkhw0r0_test.go:46 +0x615\ncommand-line-arguments_test.strange_sort_list({0xc0000243c8?,\
    \ 0x3, 0x4})\n\t/tmp/tmpinkhw0r0_test.go:41 +0x185\ncommand-line-arguments_test.strange_sort_list({0xc0000243c0?,\
    \ 0x5, 0x5})\n\t/tmp/tmpinkhw0r0_test.go:41 +0x185\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpinkhw0r0_test.go:61 +0xd7\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    if len(lst) == 4 {\n        return []int{lst[0], lst[3],\
    \ lst[1], lst[2]}\n    }\n    if len(lst) == 5 {\n        return []int{lst[0],\
    \ lst[4], lst[1], lst[3], lst[2]}\n    }\n    if len(lst) == 6 {\n        return\
    \ []int{lst[0], lst[5], lst[1], lst[4], lst[2], lst[3]}\n    }\n    if len(lst)\
    \ == 7 {\n        return []int{lst[0], lst[6], lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]}\n    }\n    if len(lst) == 8 {\n        return []int{lst[0], lst[7],\
    \ lst[1], lst[6], lst[2], lst[5], lst[3], lst[4]}\n    }\n    if len(lst) == 9\
    \ {\n        return []int{lst[0], lst[8], lst[1], lst[7], lst[2], lst[6], lst[3],\
    \ lst[5], lst[4]}\n    }\n    if len(lst) == 10 {\n        return []int{lst[0],\
    \ lst[9], lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]}\n  \
    \  }\n    if len(lst) == 11 {\n        return []int{lst[0], lst\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpma88v1w3_test.go:50:33: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    res := []int{min}\n    for len(lst) > 1 {\n        if min == max {\n    \
    \        return res\n        }\n        res = append(res, max)\n        for i,\
    \ v := range lst {\n            if v == max {\n                lst = append(lst[:i],\
    \ lst[i+1:]...)\n                break\n            }\n        }\n        min\
    \ = lst[0]\n        max = lst[0]\n        for _, v := range lst {\n          \
    \  if v < min {\n                min = v\n            }\n            if v > max\
    \ {\n                max = v\n            }\n        }\n        res = append(res,\
    \ min)\n        for i, v := range lst {\n            if v == min {\n         \
    \       lst = append(lst[:i], lst[i+1:]...)\n                break\n         \
    \   }\n        }\n        min = lst[0]\n        max = lst[0]\n        for _, v\
    \ := range lst {\n            if v < min {\n                min = v\n        \
    \    }\n            if v > max {\n                max = v\n            }\n   \
    \     }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0, 0x4, 0x4})\n\
    \t/tmp/tmparbh8bez_test.go:58 +0x465\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmparbh8bez_test.go:79 +0x77\ntesting.tRunner(0xc000192680, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ojuu3hj_test.go:22:20: undefined: findMinMax

    /tmp/tmp5ojuu3hj_test.go:27:15: undefined: remove

    /tmp/tmp5ojuu3hj_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var new_lst []int\n    new_lst = append(new_lst, min)\n    for i := 0; i\
    \ < len(lst); i++ {\n        if lst[i] == min {\n            continue\n      \
    \  }\n        new_lst = append(new_lst, lst[i])\n    }\n    new_lst = append(new_lst,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n    \
    \        continue\n        }\n        new_lst = append(new_lst, lst[i])\n    }\n\
    \    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpx0v_15x3_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpx0v_15x3_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpx0v_15x3_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpx0v_15x3_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpx0v_15x3_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpx0v_15x3_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx0v_15x3_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=-5) %!s(int=-5)]'\n "
  timestamp: 1660074339
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = removeMinMax(lst, min, max)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31p5ik5b_test.go:22:20: undefined: findMinMax

    /tmp/tmp31p5ik5b_test.go:27:15: undefined: removeMinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            result = append(result, lst[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcs8_vgjl_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpcs8_vgjl_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcs8_vgjl_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpcs8_vgjl_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    result\
    \ = append(result, lst[0])\n    lst = lst[1:]\n    for len(lst) > 0 {\n      \
    \  var min, max int\n        min = lst[0]\n        max = lst[0]\n        for _,\
    \ v := range lst {\n            if v < min {\n                min = v\n      \
    \      }\n            if v > max {\n                max = v\n            }\n \
    \       }\n        result = append(result, max)\n        lst = remove(lst, max)\n\
    \        if len(lst) > 0 {\n            result = append(result, min)\n       \
    \     lst = remove(lst, min)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfb81xeoz_test.go:35:15: undefined: remove

    /tmp/tmpfb81xeoz_test.go:38:19: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp6be3532t_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp6be3532t_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp6be3532t_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp6be3532t_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp6be3532t_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp6be3532t_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp6be3532t_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    var result []int\n    var min, max int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \        } else {\n            if lst[i] < min {\n                min = lst[i]\n\
    \            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            result = append(result, lst[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp8oe6iwph_test.go:74: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp8oe6iwph_test.go:74:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp8oe6iwph_test.go:74: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp8oe6iwph_test.go:74: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp8oe6iwph_test.go:74: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp8oe6iwph_test.go:74:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074339
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    new_lst := []int{min}\n    for len(lst) > 1 {\n        if lst[0] == min {\n\
    \            lst = lst[1:]\n        }\n        if lst[len(lst)-1] == max {\n \
    \           lst = lst[:len(lst)-1]\n        }\n        new_lst = append(new_lst,\
    \ max)\n        new_lst = append(new_lst, min)\n    }\n    return new_lst\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074352
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    var min int\n    var max int\n    var min_index int\n\
    \    var max_index int\n    var result []int\n    var lst_copy []int\n    lst_copy\
    \ = make([]int, len(lst))\n    copy(lst_copy, lst)\n    for len(lst_copy) > 0\
    \ {\n        min = lst_copy[0]\n        max = lst_copy[0]\n        min_index =\
    \ 0\n        max_index = 0\n        for i, v := range lst_copy {\n           \
    \ if v < min {\n                min = v\n                min_index = i\n     \
    \       }\n            if v > max {\n                max = v\n               \
    \ max_index = i\n            }\n        }\n        result = append(result, min)\n\
    \        lst_copy = append(lst_copy[:min_index], lst_copy[min_index+1:]...)\n\
    \        if len(lst_copy) > 0 {\n            result = append(result, max)\n  \
    \          lst_copy = append(lst_copy[:max_index], lst_copy[max_index+1:]...)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [4:3]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4, 0x5e3ea0?})\n\
    \t/tmp/tmpbk7d6ijc_test.go:49 +0x407\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpbk7d6ijc_test.go:62 +0x77\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    res := make([]int, len(lst))\n\
    \    min, max := lst[0], lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    res[0] = min\n    res[len(lst) - 1] = max\n    if len(lst)\
    \ == 2 {\n        return res\n    }\n    return append(res, strange_sort_list(lst[1:len(lst)\
    \ - 1])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc0001d0018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc0001d0018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0001b8040?, 0x1, 0x3})\n\
    \t/tmp/tmp54zzpvvn_test.go:34 +0x15d\ncommand-line-arguments_test.strange_sort_list({0xc0001b8038?,\
    \ 0x3, 0x4})\n\t/tmp/tmp54zzpvvn_test.go:34 +0xba\ncommand-line-arguments_test.strange_sort_list({0xc0001b8030?,\
    \ 0x5, 0x5})\n\t/tmp/tmp54zzpvvn_test.go:34 +0xba\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp54zzpvvn_test.go:45 +0xd7\ntesting.tRunner(0xc00019b1e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp6iyb19rm_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp6iyb19rm_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp6iyb19rm_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp6iyb19rm_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp6iyb19rm_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp6iyb19rm_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmp6iyb19rm_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var new_lst []int\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst,\
    \ max)\n    for _, v := range lst {\n        if v != min && v != max {\n     \
    \       new_lst = append(new_lst, v)\n        }\n    }\n    return new_lst\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpue2n3ngf_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpue2n3ngf_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpue2n3ngf_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpue2n3ngf_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpue2n3ngf_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpue2n3ngf_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpue2n3ngf_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    var result []int\n    var min, max int\n    for i := 0;\
    \ i < len(lst); i++ {\n        if i == 0 {\n            min = lst[i]\n       \
    \     max = lst[i]\n        }\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n \
    \   }\n    result = append(result, min)\n    result = append(result, max)\n  \
    \  for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            result = append(result, lst[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpedwwge7w_test.go:70: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpedwwge7w_test.go:70:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpedwwge7w_test.go:70: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpedwwge7w_test.go:70: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpedwwge7w_test.go:70: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpedwwge7w_test.go:70:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    for\
    \ i, v := range lst {\n        if i == 0 {\n            min = v\n            max\
    \ = v\n        } else {\n            if v < min {\n                min = v\n \
    \           }\n            if v > max {\n                max = v\n           \
    \ }\n        }\n    }\n    var lst1, lst2 []int\n    for _, v := range lst {\n\
    \        if v == min || v == max {\n            continue\n        }\n        if\
    \ len(lst1) == 0 {\n            lst1 = append(lst1, v)\n        } else {\n   \
    \         lst2 = append(lst2, v)\n        }\n    }\n    return append([]int{min},\
    \ append(strange_sort_list(lst2), append([]int{max}, strange_sort_list(lst1)...)...)...)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp5tuqk2gn_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp5tuqk2gn_test.go:68:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp5tuqk2gn_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n    \
    \    tmp5tuqk2gn_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=7)\
    \ %!s(int=9) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmp5tuqk2gn_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp5tuqk2gn_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n    \
    \    tmp5tuqk2gn_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8\
    \ (0.00s)\n        tmp5tuqk2gn_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            result = append(result, lst[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcs8_vgjl_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpcs8_vgjl_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcs8_vgjl_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpcs8_vgjl_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var new_lst []int\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst,\
    \ max)\n    for _, v := range lst {\n        if v != min && v != max {\n     \
    \       new_lst = append(new_lst, v)\n        }\n    }\n    return new_lst\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpue2n3ngf_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpue2n3ngf_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpue2n3ngf_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpue2n3ngf_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpue2n3ngf_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpue2n3ngf_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpue2n3ngf_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    res := []int{min}\n    for len(lst) > 1 {\n        if min == max {\n    \
    \        return res\n        }\n        if min == lst[0] {\n            res =\
    \ append(res, max)\n            lst = lst[1:]\n        } else {\n            res\
    \ = append(res, min)\n            lst = lst[:len(lst)-1]\n        }\n        min\
    \ = lst[0]\n        max = lst[0]\n        for _, v := range lst {\n          \
    \  if v < min {\n                min = v\n            }\n            if v > max\
    \ {\n                max = v\n            }\n        }\n    }\n    return res\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpiost0j8a_test.go:76: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpiost0j8a_test.go:76: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpiost0j8a_test.go:76: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpiost0j8a_test.go:76:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpiost0j8a_test.go:76:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpiost0j8a_test.go:76:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpiost0j8a_test.go:76: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n  \
    \      for _, v := range lst {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        result = append(result, min)\n        if min !=\
    \ max {\n            result = append(result, max)\n        }\n        lst = remove(lst,\
    \ min)\n        lst = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1pzsj000_test.go:35:15: undefined: remove

    /tmp/tmp1pzsj000_test.go:36:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ == min || lst[i] == max {\n            continue\n        }\n        result =\
    \ append(result, lst[i])\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpx_8sbi9d_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx_8sbi9d_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpx_8sbi9d_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpx_8sbi9d_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpx_8sbi9d_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx_8sbi9d_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpx_8sbi9d_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var result []int\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpwpx_w3k4_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpwpx_w3k4_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpwpx_w3k4_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpwpx_w3k4_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpwpx_w3k4_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var res []int\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for _, v := range lst {\n        if v != min && v != max {\n     \
    \       res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpnvwmy4ln_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpnvwmy4ln_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpnvwmy4ln_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpnvwmy4ln_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpnvwmy4ln_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpnvwmy4ln_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpnvwmy4ln_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n  \
    \      for _, v := range lst {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        result = append(result, min)\n        if min !=\
    \ max {\n            result = append(result, max)\n        }\n        lst = remove(lst,\
    \ min)\n        lst = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1pzsj000_test.go:35:15: undefined: remove

    /tmp/tmp1pzsj000_test.go:36:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min int\n    var max int\n    for i := 0; i < len(lst); i++ {\n        if i\
    \ == 0 {\n            min = lst[i]\n            max = lst[i]\n        } else {\n\
    \            if lst[i] < min {\n                min = lst[i]\n            }\n\
    \            if lst[i] > max {\n                max = lst[i]\n            }\n\
    \        }\n    }\n    result = append(result, min)\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    result = append(result, max)\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpv3qb3m58_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpv3qb3m58_test.go:66: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpv3qb3m58_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpv3qb3m58_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpv3qb3m58_test.go:66:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpv3qb3m58_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpv3qb3m58_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8\
    \ (0.00s)\n        tmpv3qb3m58_test.go:66: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min int\n    var max\
    \ int\n    var min_index int\n    var max_index int\n    var new_lst []int\n \
    \   for i := 0; i < len(lst); i++ {\n        if i == 0 {\n            min = lst[i]\n\
    \            max = lst[i]\n            min_index = i\n            max_index =\
    \ i\n        } else {\n            if lst[i] < min {\n                min = lst[i]\n\
    \                min_index = i\n            }\n            if lst[i] > max {\n\
    \                max = lst[i]\n                max_index = i\n            }\n\
    \        }\n    }\n    new_lst = append(new_lst, min)\n    if min_index < max_index\
    \ {\n        new_lst = append(new_lst, max)\n        new_lst = append(new_lst,\
    \ strange_sort_list(lst[min_index+1:max_index])...)\n    } else {\n        new_lst\
    \ = append(new_lst, strange_sort_list(lst[min_index+1:])...)\n        new_lst\
    \ = append(new_lst, max)\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpsu5zk9yf_test.go:73: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)\
    \ %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n    \
    \    tmpsu5zk9yf_test.go:73: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpsu5zk9yf_test.go:73:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpsu5zk9yf_test.go:73: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpsu5zk9yf_test.go:73: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8\
    \ (0.00s)\n        tmpsu5zk9yf_test.go:73: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    var min_index, max_index int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \            min_index = i\n            max_index = i\n        } else {\n    \
    \        if lst[i] < min {\n                min = lst[i]\n                min_index\
    \ = i\n            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \                max_index = i\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    if min_index == max_index {\n        return result\n\
    \    }\n    result = append(result, max)\n    var new_lst []int\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if i != min_index && i != max_index {\n    \
    \        new_lst = append(new_lst, lst[i])\n        }\n    }\n    result = append(result,\
    \ strange_sort_list(new_lst)...)\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpfiitmvhv_test.go:75: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpfiitmvhv_test.go:75: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074340
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var new_lst []int\n    new_lst\
    \ = append(new_lst, lst[0])\n    lst = lst[1:]\n    for len(lst) > 0 {\n     \
    \   var min, max int\n        min, max = lst[0], lst[0]\n        for _, v := range\
    \ lst {\n            if v < min {\n                min = v\n            }\n  \
    \          if v > max {\n                max = v\n            }\n        }\n \
    \       new_lst = append(new_lst, max)\n        lst = remove(lst, max)\n     \
    \   if len(lst) > 0 {\n            new_lst = append(new_lst, min)\n          \
    \  lst = remove(lst, min)\n        }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiwt3p44m_test.go:34:15: undefined: remove

    /tmp/tmpiwt3p44m_test.go:37:19: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var result []int\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpax3a4pgh_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpax3a4pgh_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpax3a4pgh_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpax3a4pgh_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpax3a4pgh_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpax3a4pgh_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpax3a4pgh_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    var new_lst []int\n    new_lst\
    \ = append(new_lst, min)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min {\n            new_lst = append(new_lst, lst[i])\n        }\n    }\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] != max {\n           \
    \ new_lst = append(new_lst, lst[i])\n        }\n    }\n    new_lst = append(new_lst,\
    \ max)\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n\
    \  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpcuhtcxz__test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpcuhtcxz__test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpcuhtcxz__test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpcuhtcxz__test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1)\
    \ %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpcuhtcxz__test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcuhtcxz__test.go:69:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=-5) %!s(int=-5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n\
    \    result[0] = min(lst)\n    lst = remove(lst, result[0])\n    for i := 1; i\
    \ < len(result); i += 2 {\n        result[i] = max(lst)\n        lst = remove(lst,\
    \ result[i])\n        if len(lst) == 0 {\n            break\n        }\n     \
    \   result[i+1] = min(lst)\n        lst = remove(lst, result[i+1])\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmkf14ta7_test.go:20:17: undefined: min

    /tmp/tmpmkf14ta7_test.go:21:11: undefined: remove

    /tmp/tmpmkf14ta7_test.go:23:21: undefined: max

    /tmp/tmpmkf14ta7_test.go:24:15: undefined: remove

    /tmp/tmpmkf14ta7_test.go:28:23: undefined: min

    /tmp/tmpmkf14ta7_test.go:29:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074340
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var res []int\n    var min,\
    \ max int\n    for {\n        min, max = findMinMax(lst)\n        res = append(res,\
    \ min)\n        if max != min {\n            res = append(res, max)\n        }\n\
    \        if len(lst) == 2 {\n            break\n        }\n        lst = removeMinMax(lst,\
    \ min, max)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpypqaarop_test.go:22:20: undefined: findMinMax

    /tmp/tmpypqaarop_test.go:30:15: undefined: removeMinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    var result []int\n    result = append(result, min)\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            continue\n\
    \        }\n        result = append(result, lst[i])\n    }\n    result = append(result,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n    \
    \        continue\n        }\n        result = append(result, lst[i])\n    }\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpf1de5xlx_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpf1de5xlx_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpf1de5xlx_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpf1de5xlx_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpf1de5xlx_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpf1de5xlx_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpf1de5xlx_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=-5) %!s(int=-5)]'\n "
  timestamp: 1660074341
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    var min_index, max_index int\n    for i, v := range lst {\n\
    \        if i == 0 {\n            min = v\n            max = v\n            min_index\
    \ = 0\n            max_index = 0\n        } else {\n            if v < min {\n\
    \                min = v\n                min_index = i\n            }\n     \
    \       if v > max {\n                max = v\n                max_index = i\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    if min_index\
    \ == max_index {\n        for i, v := range lst {\n            if i != min_index\
    \ {\n                result = append(result, v)\n            }\n        }\n  \
    \  } else {\n        for i, v := range lst {\n            if i != min_index &&\
    \ i != max_index {\n                result = append(result, v)\n            }\n\
    \        }\n        result = append(result, max)\n    }\n    return result\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp0v6xcick_test.go:78: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp0v6xcick_test.go:78: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp0v6xcick_test.go:78: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp0v6xcick_test.go:78:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp0v6xcick_test.go:78:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp0v6xcick_test.go:78: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for i := 0; i < len(lst); i++ {\n        if i == 0 {\n   \
    \         min = lst[i]\n            max = lst[i]\n        } else {\n         \
    \   if lst[i] < min {\n                min = lst[i]\n            }\n         \
    \   if lst[i] > max {\n                max = lst[i]\n            }\n        }\n\
    \    }\n    result = append(result, min)\n    result = append(result, max)\n \
    \   for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            result = append(result, lst[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpuzckgsx4_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpuzckgsx4_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpuzckgsx4_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpuzckgsx4_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpuzckgsx4_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpuzckgsx4_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpuzckgsx4_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    min\
    \ := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpxjp2ot2b_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxjp2ot2b_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpxjp2ot2b_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpxjp2ot2b_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpxjp2ot2b_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxjp2ot2b_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpxjp2ot2b_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074342
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n\
    \    i := 0\n    for len(lst) > 0 {\n        min := lst[0]\n        max := lst[0]\n\
    \        for _, v := range lst {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        result[i] = min\n        result[i+1] = max\n  \
    \      lst = remove(lst, min)\n        lst = remove(lst, max)\n        i += 2\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu3q26v19_test.go:34:15: undefined: remove

    /tmp/tmpu3q26v19_test.go:35:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    var min_index, max_index int\n    for i, v := range lst {\n\
    \        if i == 0 {\n            min = v\n            max = v\n            min_index\
    \ = 0\n            max_index = 0\n        } else {\n            if v < min {\n\
    \                min = v\n                min_index = i\n            }\n     \
    \       if v > max {\n                max = v\n                max_index = i\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    if min_index\
    \ == max_index {\n        return result\n    }\n    result = append(result, max)\n\
    \    var lst_copy []int\n    for i, v := range lst {\n        if i != min_index\
    \ && i != max_index {\n            lst_copy = append(lst_copy, v)\n        }\n\
    \    }\n    return append(result, strange_sort_list(lst_copy)...)\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmp5ge4yzlv_test.go:74: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp5ge4yzlv_test.go:74: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var res []int\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    res = append(res, min)\n    for len(lst)\
    \ > 1 {\n        var min, max int\n        for i, v := range lst {\n         \
    \   if i == 0 {\n                min = v\n                max = v\n          \
    \  } else {\n                if v < min {\n                    min = v\n     \
    \           }\n                if v > max {\n                    max = v\n   \
    \             }\n            }\n        }\n        var new_lst []int\n       \
    \ for _, v := range lst {\n            if v != min && v != max {\n           \
    \     new_lst = append(new_lst, v)\n            }\n        }\n        lst = new_lst\n\
    \        res = append(res, max)\n        res = append(res, min)\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp2xbauo13_test.go:84: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=3) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp2xbauo13_test.go:84:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp2xbauo13_test.go:84: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp2xbauo13_test.go:84:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=6)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp2xbauo13_test.go:84:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmp2xbauo13_test.go:84: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=7) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=5) %!s(int=4)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp2xbauo13_test.go:84:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=2)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074342
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for i := 0; i < len(lst); i++ {\n        min, max = findMinMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3zli3dbl_test.go:22:20: undefined: findMinMax

    /tmp/tmp3zli3dbl_test.go:27:15: undefined: remove

    /tmp/tmp3zli3dbl_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    var min, max int\n    if lst[0] < lst[1] {\n        min, max = lst[0],\
    \ lst[1]\n    } else {\n        min, max = lst[1], lst[0]\n    }\n    for i :=\
    \ 2; i < len(lst); i++ {\n        if lst[i] < min {\n            max = min\n \
    \           min = lst[i]\n        } else if lst[i] > max {\n            max =\
    \ lst[i]\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    new_lst = append(new_lst, max)\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] != min && lst[i] != max {\n            new_lst = append(new_lst,\
    \ lst[i])\n        }\n    }\n    return strange_sort_list(new_lst)\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.mallocgc(0x8?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x40cf1d\nruntime.growslice(0x0?,\
    \ {0x0?, 0x44a174?, 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0201e0410 sp=0xc0201e03a8 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc00438b6a0?,\
    \ 0x4, 0x44a174?})\n\t/tmp/tmp8go84hyy_test.go:43 +0xd9 fp=0xc0201e0490 sp=0xc0201e0410\
    \ pc=0x4ef739\ncommand-line-arguments_test.strange_sort_list({0xc00438b680?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp8go84hyy_test.go:50 +0x1ba fp=0xc0201e0510 sp=0xc0201e0490\
    \ pc=0x4ef81a\ncommand-line-arguments_test.strange_sort_list({0xc00438b660?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp8go84hyy_test.go:50 +0x1ba fp=0xc0201e0590 sp=0xc0201e0510\
    \ pc=0x4ef81a\ncommand-line-arguments_test.strange_sort_list({0xc00438b640?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp8go84hyy_test.go:50 +0x1ba fp=0xc0201e0610 sp=0xc0201e0590\
    \ pc=0x4ef81a\ncommand-line-arguments_test.strange_sort_list({0xc00438b620?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp8go84hyy_test.go:50 +0x1ba fp=0xc0201e0690 sp=0xc0201e0610\
    \ pc=0x4ef81a\ncommand-line-arguments_test.strange_sort_list({0xc00438b600?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp8go84hyy_test.go:50 +0x1ba fp=0xc0201e0710 sp=0xc0201e0690\
    \ pc=0x4ef81a\ncommand-line-arguments_test.strange_sort_list({0xc00438b5e0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp8go84hyy_test.go:50 +0x1ba fp=0xc0201e0790 sp=0xc0201e0710\
    \ pc=0x4ef81a\ncommand-line-arguments_test.strange_sort_list({0xc00438b5c0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp8go84hyy_test.go:50 +0x1ba fp=0xc0201e0810 sp=0xc0201e0"
  timestamp: 1660074344
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            result[i]\
    \ = min(lst)\n        } else {\n            result[i] = max(lst)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gqeabs3_test.go:22:25: undefined: min

    /tmp/tmp6gqeabs3_test.go:24:25: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var res []int\n    res = append(res, min)\n    res = append(res, max)\n \
    \   for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            res = append(res, lst[i])\n        }\n    }\n    return res\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmptrava0ax_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptrava0ax_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmptrava0ax_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmptrava0ax_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmptrava0ax_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptrava0ax_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmptrava0ax_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    var result []int\n    for len(lst) > 0 {\n        result =\
    \ append(result, min)\n        lst = remove(lst, min)\n        if len(lst) ==\
    \ 0 {\n            break\n        }\n        result = append(result, max)\n  \
    \      lst = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjy_0fm_o_test.go:32:15: undefined: remove

    /tmp/tmpjy_0fm_o_test.go:37:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n\
    \            return []int{lst[1], lst[0]}\n        }\n        return lst\n   \
    \ }\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    var new_lst []int\n  \
    \  new_lst = append(new_lst, min)\n    new_lst = append(new_lst, max)\n    for\
    \ _, v := range lst {\n        if v != min && v != max {\n            new_lst\
    \ = append(new_lst, v)\n        }\n    }\n    return strange_sort_list(new_lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520568?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x40cf1d\nruntime.growslice(0x0?,\
    \ {0x0?, 0x44a174?, 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0201e0410 sp=0xc0201e03a8 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc0043cdd20?,\
    \ 0x4, 0x44a174?})\n\t/tmp/tmpvwpe340d_test.go:40 +0xde fp=0xc0201e0490 sp=0xc0201e0410\
    \ pc=0x4ef73e\ncommand-line-arguments_test.strange_sort_list({0xc0043cdd00?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpvwpe340d_test.go:47 +0x1c5 fp=0xc0201e0510 sp=0xc0201e0490\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc0043cdce0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpvwpe340d_test.go:47 +0x1c5 fp=0xc0201e0590 sp=0xc0201e0510\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc0043cdcc0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpvwpe340d_test.go:47 +0x1c5 fp=0xc0201e0610 sp=0xc0201e0590\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc0043cdca0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpvwpe340d_test.go:47 +0x1c5 fp=0xc0201e0690 sp=0xc0201e0610\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc0043cdc80?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpvwpe340d_test.go:47 +0x1c5 fp=0xc0201e0710 sp=0xc0201e0690\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc0043cdc60?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpvwpe340d_test.go:47 +0x1c5 fp=0xc0201e0790 sp=0xc0201e0710\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc0043cdc40?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpvwpe340d_test.go:47 +0x1c5 fp=0xc0201e0810 sp=0xc0201e07"
  timestamp: 1660074344
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ojuu3hj_test.go:22:20: undefined: findMinMax

    /tmp/tmp5ojuu3hj_test.go:27:15: undefined: remove

    /tmp/tmp5ojuu3hj_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = min_max(lst)\n    \
    \    result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn802rvh0_test.go:22:20: undefined: min_max

    /tmp/tmpn802rvh0_test.go:27:15: undefined: remove

    /tmp/tmpn802rvh0_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) <= 1 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = find_min_max(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove_min_max(lst, min, max)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9p302lll_test.go:22:20: undefined: find_min_max

    /tmp/tmp9p302lll_test.go:27:15: undefined: remove_min_max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074342
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n\
    \    result[0] = min(lst)\n    lst = remove(lst, result[0])\n    for i := 1; i\
    \ < len(result); i++ {\n        if i % 2 == 1 {\n            result[i] = max(lst)\n\
    \        } else {\n            result[i] = min(lst)\n        }\n        lst =\
    \ remove(lst, result[i])\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpojvg7cxi_test.go:20:17: undefined: min

    /tmp/tmpojvg7cxi_test.go:21:11: undefined: remove

    /tmp/tmpojvg7cxi_test.go:24:25: undefined: max

    /tmp/tmpojvg7cxi_test.go:26:25: undefined: min

    /tmp/tmpojvg7cxi_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, max)\n    for _, v := range lst {\n        if v !=\
    \ min && v != max {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp47jyge3t_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp47jyge3t_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp47jyge3t_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp47jyge3t_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp47jyge3t_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp47jyge3t_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp47jyge3t_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n\
    \            min = lst[i]\n        }\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp1qkr_3y2_test.go:60: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp1qkr_3y2_test.go:60:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=0)\
    \ %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp1qkr_3y2_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n    \
    \    tmp1qkr_3y2_test.go:60: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=0) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp1qkr_3y2_test.go:60: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp1qkr_3y2_test.go:60: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=8)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp1qkr_3y2_test.go:60:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp1qkr_3y2_test.go:60: expected '[%!s(int=111111)]', got '[%!s(int=0)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    lst = append(lst, min)\n    lst = append(lst, max)\n    return lst\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp82u1_91h_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=1)\
    \ %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp82u1_91h_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp82u1_91h_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp82u1_91h_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmp82u1_91h_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar"
  timestamp: 1660074334
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min, max = minMax(lst)\n    result = append(result, min)\n\
    \    lst = remove(lst, min)\n    for len(lst) > 0 {\n        min, max = minMax(lst)\n\
    \        result = append(result, max)\n        lst = remove(lst, max)\n      \
    \  if len(lst) > 0 {\n            result = append(result, min)\n            lst\
    \ = remove(lst, min)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfm1p3lm1_test.go:21:16: undefined: minMax

    /tmp/tmpfm1p3lm1_test.go:23:11: undefined: remove

    /tmp/tmpfm1p3lm1_test.go:25:20: undefined: minMax

    /tmp/tmpfm1p3lm1_test.go:27:15: undefined: remove

    /tmp/tmpfm1p3lm1_test.go:30:19: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    var min_idx, max_idx int\n    for i := 0; i < len(lst); i++\
    \ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \            min_idx = i\n            max_idx = i\n        } else {\n        \
    \    if lst[i] < min {\n                min = lst[i]\n                min_idx\
    \ = i\n            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \                max_idx = i\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    lst = append(lst[:min_idx], lst[min_idx+1:]...)\n\
    \    lst = append(lst[:max_idx-1], lst[max_idx:]...)\n    result = append(result,\
    \ strange_sort_list(lst)...)\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00014a030?, 0x1, 0x5})\n\
    \t/tmp/tmpzvkvjjew_test.go:42 +0x394\ncommand-line-arguments_test.strange_sort_list({0xc00014a030?,\
    \ 0x3, 0x5})\n\t/tmp/tmpzvkvjjew_test.go:43 +0x2e5\ncommand-line-arguments_test.strange_sort_list({0xc00014a030?,\
    \ 0x5, 0x5})\n\t/tmp/tmpzvkvjjew_test.go:43 +0x2e5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpzvkvjjew_test.go:55 +0xd7\ntesting.tRunner(0xc000103380, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    var res []int\n    res =\
    \ append(res, min)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ min {\n            continue\n        }\n        res = append(res, lst[i])\n\
    \    }\n    res = append(res, max)\n    for i := len(lst) - 1; i >= 0; i-- {\n\
    \        if lst[i] == max {\n            continue\n        }\n        res = append(res,\
    \ lst[i])\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpxqcq4rzo_test.go:71: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpxqcq4rzo_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpxqcq4rzo_test.go:71: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpxqcq4rzo_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=1) %!s(int=8) %!s(int=7) %!s(int=6)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpxqcq4rzo_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=7)\
    \ %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxqcq4rzo_test.go:71:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var result []int\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpax3a4pgh_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpax3a4pgh_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpax3a4pgh_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpax3a4pgh_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpax3a4pgh_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpax3a4pgh_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpax3a4pgh_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            result = append(result, lst[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcs8_vgjl_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpcs8_vgjl_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpcs8_vgjl_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcs8_vgjl_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpcs8_vgjl_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    result := []int{min}\n    for len(lst) > 1 {\n        if min == max {\n \
    \           return result\n        }\n        min = max\n        for _, v := range\
    \ lst {\n            if v < min {\n                min = v\n            }\n  \
    \      }\n        result = append(result, min)\n        lst = remove(lst, min)\n\
    \        max = lst[0]\n        for _, v := range lst {\n            if v > max\
    \ {\n                max = v\n            }\n        }\n        result = append(result,\
    \ max)\n        lst = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjqjul2aw_test.go:41:15: undefined: remove

    /tmp/tmpjqjul2aw_test.go:49:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min\
    \ = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpey5qyf0q_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpey5qyf0q_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpey5qyf0q_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpey5qyf0q_test.go:62:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpey5qyf0q_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var res []int\n    res = append(res, min)\n    res = append(res, max)\n \
    \   for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            res = append(res, lst[i])\n        }\n    }\n    return res\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp6otbrpw0_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp6otbrpw0_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp6otbrpw0_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp6otbrpw0_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp6otbrpw0_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp6otbrpw0_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp6otbrpw0_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    for\
    \ i, v := range lst {\n        if i == 0 {\n            min = v\n            max\
    \ = v\n        } else {\n            if v < min {\n                min = v\n \
    \           }\n            if v > max {\n                max = v\n           \
    \ }\n        }\n    }\n    var res []int\n    res = append(res, min)\n    res\
    \ = append(res, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] !=\
    \ min && lst[i] != max {\n            res = append(res, lst[i])\n        }\n \
    \   }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpu2j3neo7_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpu2j3neo7_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpu2j3neo7_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpu2j3neo7_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpu2j3neo7_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpu2j3neo7_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpu2j3neo7_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var lst2 []int\n    lst2 = append(lst2, min)\n    lst2 = append(lst2, max)\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            lst2 = append(lst2, lst[i])\n        }\n    }\n    return lst2\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpfym2rh2v_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpfym2rh2v_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpfym2rh2v_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpfym2rh2v_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpfym2rh2v_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpfym2rh2v_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpfym2rh2v_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var result []int\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for _, v := range lst {\n        if v != min && v != max {\n     \
    \       result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp5irfga6e_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp5irfga6e_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp5irfga6e_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp5irfga6e_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp5irfga6e_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp5irfga6e_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp5irfga6e_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    for\
    \ i, v := range lst {\n        if i == 0 {\n            min = v\n            max\
    \ = v\n        } else {\n            if v < min {\n                min = v\n \
    \           }\n            if v > max {\n                max = v\n           \
    \ }\n        }\n    }\n    var result []int\n    result = append(result, min)\n\
    \    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n     \
    \   if lst[i] != min && lst[i] != max {\n            result = append(result, lst[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpo95wryyy_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpo95wryyy_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpo95wryyy_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpo95wryyy_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpo95wryyy_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpo95wryyy_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpo95wryyy_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var res []int\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpv28k73xl_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpv28k73xl_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpv28k73xl_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpv28k73xl_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpv28k73xl_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpv28k73xl_test.go:61:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpv28k73xl_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    min,\
    \ max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    var result []int\n    result = append(result, min)\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            continue\n\
    \        }\n        result = append(result, lst[i])\n    }\n    result = append(result,\
    \ max)\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == max {\n\
    \            continue\n        }\n        result = append(result, lst[i])\n  \
    \  }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpwn78w8wy_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpwn78w8wy_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpwn78w8wy_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpwn78w8wy_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=1) %!s(int=8) %!s(int=7) %!s(int=6)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpwn78w8wy_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpwn78w8wy_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpwn78w8wy_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=0)]'\n "
  timestamp: 1660074342
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) <= 1 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for i := 0; i < len(lst); i++ {\n        if i == 0 {\n   \
    \         min = lst[i]\n            max = lst[i]\n        } else {\n         \
    \   if lst[i] < min {\n                min = lst[i]\n            }\n         \
    \   if lst[i] > max {\n                max = lst[i]\n            }\n        }\n\
    \    }\n    result = append(result, min)\n    result = append(result, max)\n \
    \   for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            result = append(result, lst[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpgh68qb5x_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpgh68qb5x_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpgh68qb5x_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpgh68qb5x_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpgh68qb5x_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpgh68qb5x_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074343
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ojuu3hj_test.go:22:20: undefined: findMinMax

    /tmp/tmp5ojuu3hj_test.go:27:15: undefined: remove

    /tmp/tmp5ojuu3hj_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ojuu3hj_test.go:22:20: undefined: findMinMax

    /tmp/tmp5ojuu3hj_test.go:27:15: undefined: remove

    /tmp/tmp5ojuu3hj_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    var\
    \ min_index, max_index int\n    for i, v := range lst {\n        if i == 0 {\n\
    \            min = v\n            max = v\n            min_index = 0\n       \
    \     max_index = 0\n        } else {\n            if v < min {\n            \
    \    min = v\n                min_index = i\n            }\n            if v >\
    \ max {\n                max = v\n                max_index = i\n            }\n\
    \        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst, min)\n\
    \    if min_index < max_index {\n        new_lst = append(new_lst, max)\n    \
    \    new_lst = append(new_lst, strange_sort_list(lst[min_index+1:max_index])...)\n\
    \    } else {\n        new_lst = append(new_lst, strange_sort_list(lst[min_index+1:])...)\n\
    \        new_lst = append(new_lst, max)\n    }\n    return new_lst\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpalzq80dq_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)\
    \ %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n    \
    \    tmpalzq80dq_test.go:71: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpalzq80dq_test.go:71:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpalzq80dq_test.go:71: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpalzq80dq_test.go:71: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8\
    \ (0.00s)\n        tmpalzq80dq_test.go:71: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074343
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var res []int\n    var min,\
    \ max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n      \
    \  res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu69hm2yj_test.go:22:20: undefined: findMinMax

    /tmp/tmpu69hm2yj_test.go:27:15: undefined: remove

    /tmp/tmpu69hm2yj_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074342
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for i := 0; i < len(lst); i++ {\n        min, max = minMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_wphkbb4_test.go:22:20: undefined: minMax

    /tmp/tmp_wphkbb4_test.go:27:15: undefined: remove

    /tmp/tmp_wphkbb4_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074342
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = minMax(lst)\n     \
    \   result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01_lqcr1_test.go:22:20: undefined: minMax

    /tmp/tmp01_lqcr1_test.go:27:15: undefined: remove

    /tmp/tmp01_lqcr1_test.go:28:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074342
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        lst = remove(lst, min)\n       \
    \ if len(lst) > 0 {\n            result = append(result, max)\n            lst\
    \ = remove(lst, max)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp97gi5vs__test.go:22:20: undefined: findMinMax

    /tmp/tmp97gi5vs__test.go:24:15: undefined: remove

    /tmp/tmp97gi5vs__test.go:27:19: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074343
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunc strange_sort_list(lst []int) []int {\n  \
    \  if len(lst) == 0 {\n        return lst\n    }\n    var min, max int\n    for\
    \ i, v := range lst {\n        if i == 0 {\n            min = v\n            max\
    \ = v\n        } else {\n            if v < min {\n                min = v\n \
    \           }\n            if v > max {\n                max = v\n           \
    \ }\n        }\n    }\n    var result []int\n    var min_index, max_index int\n\
    \    for i, v := range lst {\n        if v == min {\n            min_index = i\n\
    \        }\n        if v == max {\n            max_index = i\n        }\n    }\n\
    \    result = append(result, min)\n    result = append(result, max)\n    var lst_min,\
    \ lst_max []int\n    for i, v := range lst {\n        if i != min_index && i !=\
    \ max_index {\n            if v < min {\n                lst_min = append(lst_min,\
    \ v)\n            } else {\n                lst_max = append(lst_max, v)\n   \
    \         }\n        }\n    }\n    lst_min = strange_sort_list(lst_min)\n    lst_max\
    \ = strange_sort_list(lst_max)\n    for _, v := range lst_min {\n        result\
    \ = append(result, v)\n    }\n    for _, v := range lst_max {\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp8pb74im5_test.go:87: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)\
    \ %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n    \
    \    tmp8pb74im5_test.go:87: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp8pb74im5_test.go:87:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp8pb74im5_test.go:87:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp8pb74im5_test.go:87:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074343
