name: HumanEval_19_sort_numbers
language: go_test.go
prompt: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid\
  \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
  \ and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n\
  // >>> sort_numbers('three one five')\n// 'one three five'\nfunc sort_numbers(numbers\
  \ string) string {\n"
tests: "func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
  \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
  \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five\
  \ zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n\
  \     { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
  \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n\
    }\n", "    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n",
  "    // TODO: implement me\n    return \"\"\n}\n", "    // TODO: implement this\
    \ function\n    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement\
    \ me\n    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n",
  "    return \"\"\n}\n", "    // TODO: Implement me!\n    return \"\"\n}\n", "  \
    \  return \"\"\n}\n", "    // TODO: implement me\n    return \"\"\n}\n", "   \
    \ nums := []int{}\n    for _, num := range strings.Split(numbers, \" \") {\n \
    \       switch num {\n        case \"zero\":\n            nums = append(nums,\
    \ 0)\n        case \"one\":\n            nums = append(nums, 1)\n        case\
    \ \"two\":\n            nums = append(nums, 2)\n        case \"three\":\n    \
    \        nums = append(nums, 3)\n        case \"four\":\n            nums = append(nums,\
    \ 4)\n        case \"five\":\n            nums = append(nums, 5)\n        case\
    \ \"six\":\n            nums = append(nums, 6)\n        case \"seven\":\n    \
    \        nums = append(nums, 7)\n        case \"eight\":\n            nums = append(nums,\
    \ 8)\n        case \"nine\":\n            nums = append(nums, 9)\n        }\n\
    \    }\n    sort.Ints(nums)\n    result := []string{}\n    for _, num := range\
    \ nums {\n        switch num {\n        case 0:\n            result = append(result,\
    \ \"zero\")\n        case 1:\n            result = append(result, \"one\")\n \
    \       case 2:\n            result = append(result, \"two\")\n        case 3:\n\
    \            result = append(result, \"three\")\n        case 4:\n           \
    \ result = append(result, \"four\")\n        case 5:\n            result = append(result,\
    \ \"five\")\n        case 6:\n            result = append(result, \"six\")\n \
    \       case 7:\n            result = append(result, \"seven\")\n        case\
    \ 8:\n            result = append(result, \"eight\")\n        case 9:\n      \
    \      result = append(result, \"nine\")\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    return \"\"\n}\n", "    // TODO: implement me\n    return\
    \ \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", "    // TODO:\
    \ implement me\n    return \"\"\n}\n", "    // TODO: Implement me\n    return\
    \ \"\"\n}\n", "    return \"\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
