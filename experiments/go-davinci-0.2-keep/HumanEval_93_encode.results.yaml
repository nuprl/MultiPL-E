language: go_test.go
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else {\n            encoded += string(char)\n \
    \       }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpv9u_otnj_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpv9u_otnj_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpv9u_otnj_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpv9u_otnj_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpv9u_otnj_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'A' {\n            encoded += \"\
    C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n        }\
    \ else if char == 'I' {\n            encoded += \"K\"\n        } else if char\
    \ == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n  \
    \          encoded += \"S\"\n        } else if char == 'a' {\n            encoded\
    \ += \"c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n  \
    \      } else if char == 'i' {\n            encoded += \"k\"\n        } else if\
    \ char == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n\
    \            encoded += \"s\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpu46si2kk_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpu46si2kk_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpu46si2kk_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpu46si2kk_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpu46si2kk_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, ch := range message {\n\
    \        if ch >= 'a' && ch <= 'z' {\n            result += string(ch - 32)\n\
    \        } else if ch >= 'A' && ch <= 'Z' {\n            result += string(ch +\
    \ 32)\n        } else {\n            result += string(ch)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp9awu1f_e_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp9awu1f_e_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp9awu1f_e_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp9awu1f_e_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp9awu1f_e_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            result += string(c - 'A'\
    \ + 'a')\n        } else {\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpm78a4dt4_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpm78a4dt4_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpm78a4dt4_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            result += string(c - 'A'\
    \ + 'a')\n        } else {\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpm78a4dt4_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpm78a4dt4_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpm78a4dt4_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            result += string(c - 'A'\
    \ + 'a')\n        } else {\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpm78a4dt4_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpm78a4dt4_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpm78a4dt4_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A'\
    \ + 'a')\n        } else if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' {\n            encoded += string(c + 2)\n        } else if c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            encoded += string(c\
    \ + 2)\n        } else {\n            encoded += string(c)\n        }\n    }\n\
    \    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp8f_fk2wy_test.go:53: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp8f_fk2wy_test.go:53: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp8f_fk2wy_test.go:53:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp8f_fk2wy_test.go:53: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp8f_fk2wy_test.go:53:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result []byte\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result = append(result,\
    \ char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result\
    \ = append(result, char + 32)\n        } else {\n            result = append(result,\
    \ byte(char))\n        }\n    }\n    return string(result)\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpto21ejz5_test.go:22:37: cannot use char - 32 (value of type rune) as type
    byte in argument to append

    /tmp/tmpto21ejz5_test.go:24:37: cannot use char + 32 (value of type rune) as type
    byte in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - ('a' - 'A'))\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            result += string(c + ('a'\
    \ - 'A'))\n        } else {\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp_onwql4l_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp_onwql4l_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp_onwql4l_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp_onwql4l_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp_onwql4l_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var newMessage string\n    for _, char := range message\
    \ {\n        if char >= 'a' && char <= 'z' {\n            newMessage += string(char\
    \ - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newMessage\
    \ += string(char + 32)\n        } else {\n            newMessage += string(char)\n\
    \        }\n    }\n    return newMessage\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmppj0sc7nt_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmppj0sc7nt_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmppj0sc7nt_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmppj0sc7nt_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmppj0sc7nt_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            result += string(c - 'A'\
    \ + 'a')\n        } else {\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpm78a4dt4_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpm78a4dt4_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpm78a4dt4_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else {\n            encoded += string(char)\n \
    \       }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpv9u_otnj_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpv9u_otnj_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpv9u_otnj_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpv9u_otnj_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpv9u_otnj_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            result += string(c - 'A'\
    \ + 'a')\n        } else {\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpm78a4dt4_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpm78a4dt4_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpm78a4dt4_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            result += string(c - 'A'\
    \ + 'a')\n        } else {\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpm78a4dt4_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpm78a4dt4_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpm78a4dt4_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A'\
    \ + 'a')\n        } else if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' {\n            encoded += string(c + 2)\n        } else if c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            encoded += string(c\
    \ + 2)\n        } else {\n            encoded += string(c)\n        }\n    }\n\
    \    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp8f_fk2wy_test.go:53: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp8f_fk2wy_test.go:53: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp8f_fk2wy_test.go:53:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp8f_fk2wy_test.go:53: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp8f_fk2wy_test.go:53:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'A' {\n            encoded += \"\
    C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n        }\
    \ else if char == 'I' {\n            encoded += \"K\"\n        } else if char\
    \ == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n  \
    \          encoded += \"S\"\n        } else if char == 'a' {\n            encoded\
    \ += \"c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n  \
    \      } else if char == 'i' {\n            encoded += \"k\"\n        } else if\
    \ char == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n\
    \            encoded += \"s\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpu46si2kk_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpu46si2kk_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpu46si2kk_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpu46si2kk_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpu46si2kk_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmposn4jgrt_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmposn4jgrt_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmposn4jgrt_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmposn4jgrt_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmposn4jgrt_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // TODO\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpilitrvt9_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpilitrvt9_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpilitrvt9_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpilitrvt9_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpilitrvt9_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpw0_vxeow_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpw0_vxeow_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpw0_vxeow_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpw0_vxeow_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpw0_vxeow_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            c = c - 32\n        }\n       \
    \ if c == 'A' {\n            c = 'C'\n        } else if c == 'E' {\n         \
    \   c = 'G'\n        } else if c == 'I' {\n            c = 'K'\n        } else\
    \ if c == 'O' {\n            c = 'Q'\n        } else if c == 'U' {\n         \
    \   c = 'S'\n        }\n        result += string(c)\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp3dobp5b0_test.go:57: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp3dobp5b0_test.go:57: expected 'mWDCSKR', got 'MSDCSKR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp3dobp5b0_test.go:57:\
    \ expected 'ygs', got 'YGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp3dobp5b0_test.go:57: expected 'tHKS KS C MGSSCGG', got 'THKS KS C MGSSCGG'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp3dobp5b0_test.go:57:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DQNT KNQW WHCT TQ WRKTG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, v := range message {\n \
    \       if v >= 'a' && v <= 'z' {\n            result += string(v - 32)\n    \
    \    } else if v >= 'A' && v <= 'Z' {\n            result += string(v + 32)\n\
    \        } else {\n            result += string(v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmps0h0i9sv_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmps0h0i9sv_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmps0h0i9sv_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmps0h0i9sv_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmps0h0i9sv_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // TODO: Implement me!\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmprrmj2pj__test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmprrmj2pj__test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmprrmj2pj__test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmprrmj2pj__test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmprrmj2pj__test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            result += string(c - 'A'\
    \ + 'a')\n        } else {\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpm78a4dt4_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpm78a4dt4_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpm78a4dt4_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpj0wynoh__test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpj0wynoh__test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpj0wynoh__test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpj0wynoh__test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpj0wynoh__test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'A' {\n            encoded += \"\
    C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n        }\
    \ else if char == 'I' {\n            encoded += \"K\"\n        } else if char\
    \ == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n  \
    \          encoded += \"S\"\n        } else if char == 'a' {\n            encoded\
    \ += \"c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n  \
    \      } else if char == 'i' {\n            encoded += \"k\"\n        } else if\
    \ char == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n\
    \            encoded += \"s\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpu46si2kk_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpu46si2kk_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpu46si2kk_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpu46si2kk_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpu46si2kk_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'A' {\n            encoded += \"\
    C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n        }\
    \ else if char == 'I' {\n            encoded += \"K\"\n        } else if char\
    \ == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n  \
    \          encoded += \"S\"\n        } else if char == 'a' {\n            encoded\
    \ += \"c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n  \
    \      } else if char == 'i' {\n            encoded += \"k\"\n        } else if\
    \ char == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n\
    \            encoded += \"s\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpu46si2kk_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpu46si2kk_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpu46si2kk_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpu46si2kk_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpu46si2kk_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpj0wynoh__test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpj0wynoh__test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpj0wynoh__test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpj0wynoh__test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpj0wynoh__test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpj0wynoh__test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpj0wynoh__test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpj0wynoh__test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpj0wynoh__test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpj0wynoh__test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A'\
    \ + 'a')\n        } else if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' {\n            encoded += string(c + 2)\n        } else if c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            encoded += string(c\
    \ + 2)\n        } else {\n            encoded += string(c)\n        }\n    }\n\
    \    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp8f_fk2wy_test.go:53: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp8f_fk2wy_test.go:53: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp8f_fk2wy_test.go:53:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp8f_fk2wy_test.go:53: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp8f_fk2wy_test.go:53:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else if char >= 'A' && char <= 'Z' {\n            result\
    \ += string(char - 'A' + 'a')\n        } else if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            result += string(char\
    \ + 2)\n        } else if char == 'A' || char == 'E' || char == 'I' || char ==\
    \ 'O' || char == 'U' {\n            result += string(char + 2)\n        } else\
    \ {\n            result += string(char)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp8f9p7pj6_test.go:53: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp8f9p7pj6_test.go:53: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp8f9p7pj6_test.go:53:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp8f9p7pj6_test.go:53: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp8f9p7pj6_test.go:53:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            result += string(c - 'A'\
    \ + 'a')\n        } else {\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpm78a4dt4_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpm78a4dt4_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpm78a4dt4_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpj0wynoh__test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpj0wynoh__test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpj0wynoh__test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpj0wynoh__test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpj0wynoh__test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 'a' + 'A')\n        } else if char >= 'A' && char <= 'Z' {\n            encoded\
    \ += string(char - 'A' + 'a')\n        } else if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            encoded += string(char\
    \ + 2)\n        } else if char == 'A' || char == 'E' || char == 'I' || char ==\
    \ 'O' || char == 'U' {\n            encoded += string(char + 2)\n        } else\
    \ {\n            encoded += string(char)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpaxpg8_7a_test.go:53: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpaxpg8_7a_test.go:53: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpaxpg8_7a_test.go:53:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpaxpg8_7a_test.go:53: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpaxpg8_7a_test.go:53:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'A' {\n            encoded += \"\
    C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n        }\
    \ else if char == 'I' {\n            encoded += \"K\"\n        } else if char\
    \ == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n  \
    \          encoded += \"S\"\n        } else if char == 'a' {\n            encoded\
    \ += \"c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n  \
    \      } else if char == 'i' {\n            encoded += \"k\"\n        } else if\
    \ char == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n\
    \            encoded += \"s\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpu46si2kk_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpu46si2kk_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpu46si2kk_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpu46si2kk_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpu46si2kk_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0pnv8ibl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0pnv8ibl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0pnv8ibl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0pnv8ibl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n    \
    \    } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpx4ea0yl6_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpx4ea0yl6_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpx4ea0yl6_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx4ea0yl6_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, c := range message {\n\
    \        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 32)\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz51zszcz_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz51zszcz_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz51zszcz_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz51zszcz_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp5b71ld6_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp5b71ld6_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp5b71ld6_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp5b71ld6_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            result += string(c - 'a' + 'A')\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            result += string(c - 'A'\
    \ + 'a')\n        } else {\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpm78a4dt4_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpm78a4dt4_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpm78a4dt4_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpm78a4dt4_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpic5b6nhs_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpic5b6nhs_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpic5b6nhs_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpic5b6nhs_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073192
