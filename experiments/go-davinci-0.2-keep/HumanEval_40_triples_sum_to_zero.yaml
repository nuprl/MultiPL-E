name: HumanEval_40_triples_sum_to_zero
language: go_test.go
prompt: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it returns\
  \ True if there are three distinct elements in the list that\n// sum to zero, and\
  \ False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
  \ triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n// >>> triples_sum_to_zero([1])\n\
  // False\nfunc triples_sum_to_zero(l []int) bool {\n"
tests: "func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
  \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual:\
  \ candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
  \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected:\
  \ false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
  \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
  \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5, -100}),\
  \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return false\n}\n", "    return false\n}\n", "    for i, v := range\
    \ l {\n        for j, w := range l {\n            for k, x := range l {\n    \
    \            if i != j && i != k && j != k {\n                    if v + w + x\
    \ == 0 {\n                        return true\n                    }\n       \
    \         }\n            }\n        }\n    }\n    return false\n}\n", "    //\
    \ TODO: implement this function\n    return false\n}\n", "    for i, v := range\
    \ l {\n        for j, v2 := range l {\n            for k, v3 := range l {\n  \
    \              if i != j && i != k && j != k {\n                    if v + v2\
    \ + v3 == 0 {\n                        return true\n                    }\n  \
    \              }\n            }\n        }\n    }\n    return false\n}\n", " \
    \   // TODO: implement me\n    return false\n}\n", "    return false\n}\n", " \
    \   // your code here\n    return false\n}\n", "    // TODO: implement me!\n \
    \   return false\n}\n", "    // your code here\n    return false\n}\n", "    //\
    \ TODO: implement this function\n    return false\n}\n", "    // your code here\n\
    \    return false\n}\n", "    // TODO: implement me\n    return false\n}\n", " \
    \   // your code here\n    return false\n}\n", "    // your code here\n    return\
    \ false\n}\n", "    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n          \
    \  for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n", "    // TODO: implement this function\n\
    \    return false\n}\n", "    // your code here\n    return false\n}\n", "   \
    \ return false\n}\n", "    // TODO: implement this function\n    return false\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
