name: HumanEval_152_compare
language: go_test.go
prompt: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// I\
  \ think we all remember that feeling when the result of some long-awaited\n// event\
  \ is finally known. The feelings and thoughts you have at that moment are\n// definitely\
  \ worth noting down and comparing.\n// Your task is to determine if a person correctly\
  \ guessed the results of a number of matches.\n// You are given two arrays of scores\
  \ and guesses of equal length, where each index shows a match. \n// Return an array\
  \ of the same length denoting how far off each guess was. If they have guessed correctly,\n\
  // the value is 0, and if not, the value is the absolute difference between the\
  \ guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
  \ [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nfunc\
  \ compare(game []int, guess []int) []int {\n"
tests: "func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
  \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
  \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
  \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n  \
  \   { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
  \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
  \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
  \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []int\n    for i, _ := range game {\n        if game[i]\
    \ == guess[i] {\n            result = append(result, 0)\n        } else {\n  \
    \          result = append(result, abs(game[i] - guess[i]))\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for i := 0; i < len(game);\
    \ i++ {\n        if game[i] == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i, _ := range game {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result = append(result, 0)\n        } else {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i]\
    \ {\n            result = append(result, 0)\n        } else {\n            result\
    \ = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(game))\n    for i, _ := range game {\n  \
    \      if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n\
    \            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for i := 0; i < len(game); i++ {\n\
    \        if game[i] == guess[i] {\n            result = append(result, 0)\n  \
    \      } else {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i, v := range game {\n        if v == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(v\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result = append(result, 0)\n        } else {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i]\
    \ {\n            result = append(result, 0)\n        } else {\n            result\
    \ = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for i := 0; i < len(game); i++ {\n        if\
    \ game[i] == guess[i] {\n            result = append(result, 0)\n        } else\
    \ {\n            result = append(result, abs(game[i] - guess[i]))\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for i := 0; i < len(game);\
    \ i++ {\n        if game[i] == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result = append(result, 0)\n        } else {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i]\
    \ {\n            result = append(result, 0)\n        } else {\n            result\
    \ = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for i, _ := range game {\n        if game[i]\
    \ == guess[i] {\n            result = append(result, 0)\n        } else {\n  \
    \          result = append(result, abs(game[i] - guess[i]))\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for i, _ := range game {\n\
    \        if game[i] == guess[i] {\n            result = append(result, 0)\n  \
    \      } else {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
