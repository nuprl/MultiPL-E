name: HumanEval_91_is_bored
language: go_test.go
prompt: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You'll be given a string of words, and your task is to count the number\n// of\
  \ boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
  \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\"\
  )\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n// 1\nfunc is_bored(S string) int {\n"
tests: "func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
  Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"),\
  \ expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
  \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
  \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
  \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var boredoms int\n    var sentences []string\n    var sentence\
    \ string\n    var word string\n    var is_bored bool\n    var is_sentence bool\n\
    \    var is_word bool\n    var is_space bool\n    var is_punctuation bool\n  \
    \  var is_quote bool\n    var is_apostrophe bool\n    var is_dash bool\n    var\
    \ is_colon bool\n    var is_semicolon bool\n    var is_comma bool\n    var is_period\
    \ bool\n    var is_question_mark bool\n    var is_exclamation_mark bool\n    var\
    \ is_newline bool\n    var is_tab bool\n    var is_carriage_return bool\n    var\
    \ is_backspace bool\n    var is_form_feed bool\n    var is_vertical_tab bool\n\
    \    var is_null bool\n    var is_escape bool\n    var is_unicode bool\n    var\
    \ is_other bool\n    var is_letter bool\n    var is_number bool\n    var is_symbol\
    \ bool\n    var is_digit bool\n    var is_lower bool\n    var is_upper bool\n\
    \    var is_title bool\n    var is_control bool\n    var is_graphic bool\n   \
    \ var is_printable bool\n    var is_punct bool\n    var is_space_unicode bool\n\
    \    var is_letter_unicode bool\n    var is_number_unicode bool\n    var is_symbol_unicode\
    \ bool\n    var is_digit_unicode bool\n    var is_lower_unicode bool\n    var\
    \ is_upper_unicode bool\n    var is_title_unicode bool\n    var is_control_unicode\
    \ bool\n    var is_graphic_unicode bool\n    var is_printable_unicode bool\n \
    \   var is_punct_unicode bool\n    var is_space_unicode_category bool\n    var\
    \ is_letter_unicode_category bool\n    var is_number_unicode_category bool\n \
    \   var is_symbol_unicode_category bool\n    var is_digit_unicode_category bool\n\
    \    var is_lower_unicode_category bool\n    var is_upper_unicode_category bool\n\
    \    var is_title", "    return 0\n}\n", "    // Your code here\n    return 0\n\
    }\n", "    var boredoms int = 0\n    var sentences []string = strings.Split(S,\
    \ \".\")\n    for _, sentence := range sentences {\n        var words []string\
    \ = strings.Split(sentence, \" \")\n        if words[0] == \"I\" {\n         \
    \   boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int\n    for _, word := range strings.Split(S, \" \") {\n        if word ==\
    \ \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    // Your code here\n    return 0\n}\n", "    var boredoms int\n    for _, word\
    \ := range strings.Split(S, \" \") {\n        if word == \"I\" {\n           \
    \ boredoms++\n        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n",
  "    var boredoms int\n    for _, word := range strings.Split(S, \" \") {\n    \
    \    if word == \"I\" {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    return 0\n}\n", "    var boredoms int = 0\n    var sentences\
    \ []string = strings.Split(S, \".\")\n    for _, sentence := range sentences {\n\
    \        if strings.HasPrefix(sentence, \"I\") {\n            boredoms++\n   \
    \     }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    var last_char\
    \ byte\n    var is_sentence bool\n    for _, char := range S {\n        if char\
    \ == '.' || char == '?' || char == '!' {\n            is_sentence = true\n   \
    \     } else if is_sentence && char == 'I' {\n            boredoms++\n       \
    \     is_sentence = false\n        } else {\n            is_sentence = false\n\
    \        }\n        last_char = byte(char)\n    }\n    if last_char == 'I' {\n\
    \        boredoms++\n    }\n    return boredoms\n}\n", "    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int = 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms += 1\n        }\n    }\n    return boredoms\n}\n", "    // Your\
    \ code here\n    return 0\n}\n", "    return 0\n}\n", "    boredoms := 0\n   \
    \ for _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    return\
    \ 0\n}\n", "    return 0\n}\n", "    return 0\n}\n", "    return 0\n}\n", "  \
    \  var count int\n    for _, v := range S {\n        if v == 'I' {\n         \
    \   count++\n        }\n    }\n    return count\n}\n", "    var boredoms int\n\
    \    var sentences []string\n    var sentence string\n    var words []string\n\
    \    var word string\n    var i int\n    var j int\n    var k int\n    var l int\n\
    \    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n \
    \   var r int\n    var s int\n    var t int\n    var u int\n    var v int\n  \
    \  var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n  \
    \  var ab int\n    var ac int\n    var ad int\n    var ae int\n    var af int\n\
    \    var ag int\n    var ah int\n    var ai int\n    var aj int\n    var ak int\n\
    \    var al int\n    var am int\n    var an int\n    var ao int\n    var ap int\n\
    \    var aq int\n    var ar int\n    var as int\n    var at int\n    var au int\n\
    \    var av int\n    var aw int\n    var ax int\n    var ay int\n    var az int\n\
    \    var ba int\n    var bb int\n    var bc int\n    var bd int\n    var be int\n\
    \    var bf int\n    var bg int\n    var bh int\n    var bi int\n    var bj int\n\
    \    var bk int\n    var bl int\n    var bm int\n    var bn int\n    var bo int\n\
    \    var bp int\n    var bq int\n    var br int\n    var bs int\n    var bt int\n\
    \    var bu int\n    var bv int\n    var bw int\n    var bx int\n    var by int\n\
    \    var bz int\n    var ca int\n    var cb int\n    var cc int\n    var cd int\n\
    \    var ce int\n    var cf int\n    var cg int\n    var ch int\n    var ci int\n\
    \    var cj int\n    var ck int\n    var cl int\n    var cm int\n    var cn int\n\
    \    var co int\n    var cp int\n    var cq int\n    var cr int\n    var cs int\n\
    \    var ct int\n    var", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    count := 0\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    return 0\n}\n", "    count := 0\n    for _, v :=\
    \ range S {\n        if v == 'I' {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    var boredoms int = 0\n    var sentences []string =\
    \ strings.Split(S, \".\")\n    for _, sentence := range sentences {\n        var\
    \ words []string = strings.Split(sentence, \" \")\n        if words[0] == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n", "  \
    \  count := 0\n    for _, word := range strings.Split(S, \" \") {\n        if\
    \ word == \"I\" {\n            count++\n        }\n    }\n    return count\n}\n",
  "    var boredoms int\n    for _, word := range strings.Split(S, \" \") {\n    \
    \    if word == \"I\" {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    // Your code here\n    return 0\n}\n", "    return 0\n\
    }\n", "    var boredoms int = 0\n    var sentences []string = strings.Split(S,\
    \ \".\")\n    for _, sentence := range sentences {\n        if strings.HasPrefix(sentence,\
    \ \"I\") {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    return 0\n}\n", "    var boredoms int = 0\n    var sentences []string = strings.Split(S,\
    \ \".\")\n    for _, sentence := range sentences {\n        if strings.HasPrefix(sentence,\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    for _, word := range strings.Split(S, \" \")\
    \ {\n        if word == \"I\" {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n", "    return 0\n}\n", "    var boredoms int = 0\n   \
    \ var sentences []string = strings.Split(S, \".!?\")\n    for _, sentence := range\
    \ sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", "    var boredoms\
    \ int\n    for _, word := range strings.Split(S, \" \") {\n        if word ==\
    \ \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var count int\n    for _, word := range S {\n        if word == 'I' {\n   \
    \         count++\n        }\n    }\n    return count\n}\n", "    var boredoms\
    \ int\n    for _, word := range strings.Split(S, \" \") {\n        if strings.HasPrefix(word,\
    \ \"I\") {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    return 0\n}\n", "    return 0\n}\n", "    var boredoms int\n    for _, word\
    \ := range strings.Split(S, \" \") {\n        if word == \"I\" {\n           \
    \ boredoms++\n        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n",
  "    var boredoms int\n    for _, word := range strings.Split(S, \" \") {\n    \
    \    if word == \"I\" {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    return 0\n}\n", "    count := 0\n    for _, word := range\
    \ S {\n        if word == 'I' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word := range\
    \ strings.Split(S, \" \") {\n        if word == \"I\" {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int = 0\n    var\
    \ sentences []string = strings.Split(S, \".\")\n    for _, sentence := range sentences\
    \ {\n        if strings.HasPrefix(sentence, \"I\") {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    var sentence\
    \ string\n    for _, char := range S {\n        sentence += string(char)\n   \
    \     if char == '.' || char == '?' || char == '!' {\n            if sentence[0]\
    \ == 'I' {\n                boredoms++\n            }\n            sentence =\
    \ \"\"\n        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", "  \
    \  var boredoms int = 0\n    var sentence string = \"\"\n    for _, c := range\
    \ S {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence[0]\
    \ == 'I' {\n                boredoms++\n            }\n            sentence =\
    \ \"\"\n        } else {\n            sentence += string(c)\n        }\n    }\n\
    \    return boredoms\n}\n", "    var boredoms int = 0\n    var sentences []string\
    \ = strings.Split(S, \".\")\n    for _, sentence := range sentences {\n      \
    \  if strings.HasPrefix(sentence, \"I\") {\n            boredoms++\n        }\n\
    \    }\n    return boredoms\n}\n", "    var boredoms int\n    var sentences []string\n\
    \    sentences = split_sentences(S)\n    for _, sentence := range sentences {\n\
    \        if is_bored_sentence(sentence) {\n            boredoms++\n        }\n\
    \    }\n    return boredoms\n}\n", "    var boredoms int = 0\n    var sentences\
    \ []string = strings.Split(S, \".\")\n    for _, sentence := range sentences {\n\
    \        if strings.HasPrefix(sentence, \"I\") {\n            boredoms++\n   \
    \     }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", "    count :=\
    \ 0\n    for _, word := range strings.Split(S, \" \") {\n        if word == \"\
    I\" {\n            count++\n        }\n    }\n    return count\n}\n", "    var\
    \ boredoms int\n    var is_bored bool\n    for _, c := range S {\n        if c\
    \ == '.' || c == '?' || c == '!' {\n            is_bored = false\n        } else\
    \ if c == 'I' {\n            is_bored = true\n        } else if is_bored {\n \
    \           boredoms++\n            is_bored = false\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    return 0\n}\n", "    count := 0\n    for\
    \ _, v := range S {\n        if v == 'I' {\n            count++\n        }\n \
    \   }\n    return count\n}\n", "    var boredoms int\n    for _, word := range\
    \ strings.Split(S, \" \") {\n        if strings.HasPrefix(word, \"I\") {\n   \
    \         boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int\n    for _, word := range strings.Split(S, \" \") {\n        if word ==\
    \ \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    return 0\n}\n", "    var count int\n    for _, sentence := range strings.Split(S,\
    \ \".\") {\n        if strings.HasPrefix(sentence, \"I\") {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var count int\n    for _, word\
    \ := range strings.Split(S, \" \") {\n        if word == \"I\" {\n           \
    \ count++\n        }\n    }\n    return count\n}\n", "    var boredoms int = 0\n\
    \    var words []string = strings.Split(S, \" \")\n    for _, word := range words\
    \ {\n        if word == \"I\" {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n", "    var boredoms int = 0\n    var is_bored bool = false\n\
    \    var i int = 0\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n\
    \            is_bored = true\n        } else if is_bored && (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms++\n            is_bored = false\n\
    \        }\n    }\n    return boredoms\n}\n", "    // Your code here\n    return\
    \ 0\n}\n", "    return 0\n}\n", "    // your code here\n    return 0\n}\n", " \
    \   var boredoms int\n    for _, word := range strings.Split(S, \" \") {\n   \
    \     if word == \"I\" {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int = 0\n    var sentences []string = strings.Split(S,\
    \ \".\")\n    for _, sentence := range sentences {\n        var words []string\
    \ = strings.Split(sentence, \" \")\n        if words[0] == \"I\" {\n         \
    \   boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int\n    for _, word := range strings.Split(S, \" \") {\n        if word ==\
    \ \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    // Your code here\n    return 0\n}\n", "    var boredoms int = 0\n    var sentences\
    \ []string = strings.Split(S, \".\")\n    for _, sentence := range sentences {\n\
    \        if strings.HasPrefix(sentence, \"I\") {\n            boredoms++\n   \
    \     }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word\
    \ := range strings.Split(S, \" \") {\n        if word == \"I\" {\n           \
    \ boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n", "  \
    \  count := 0\n    for _, word := range strings.Split(S, \" \") {\n        if\
    \ word == \"I\" {\n            count++\n        }\n    }\n    return count\n}\n",
  "    var boredoms int\n    var sentence string\n    for _, char := range S {\n \
    \       if char == '.' || char == '?' || char == '!' {\n            if sentence[0]\
    \ == 'I' {\n                boredoms++\n            }\n            sentence =\
    \ \"\"\n        } else {\n            sentence += string(char)\n        }\n  \
    \  }\n    return boredoms\n}\n", "    return 0\n}\n", "    var boredoms int\n\
    \    var sentence string\n    for _, c := range S {\n        if c == '.' || c\
    \ == '?' || c == '!' {\n            if sentence[0] == 'I' {\n                boredoms++\n\
    \            }\n            sentence = \"\"\n        } else {\n            sentence\
    \ += string(c)\n        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n",
  "    return 0\n}\n", "    count := 0\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var boredoms int = 0\n    var words []string = strings.Split(S,\
    \ \" \")\n    for _, word := range words {\n        if word == \"I\" {\n     \
    \       boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int = 0\n    var sentences []string = strings.Split(S, \".!?\")\n    for _,\
    \ sentence := range sentences {\n        if strings.HasPrefix(sentence, \"I\"\
    ) {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n", " \
    \   return 0\n}\n", "    return 0\n}\n", "    return 0\n}\n", "    return 0\n\
    }\n", "    var boredoms int = 0\n    for _, word := range strings.Split(S, \"\
    \ \") {\n        if word == \"I\" {\n            boredoms++\n        }\n    }\n\
    \    return boredoms\n}\n", "    var boredoms int = 0\n    var sentences []string\
    \ = split_sentences(S)\n    for _, sentence := range sentences {\n        if is_bored_sentence(sentence)\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n", "  \
    \  var boredoms int\n    var sentence string\n    for _, c := range S {\n    \
    \    if c == '.' || c == '?' || c == '!' {\n            if sentence[0] == 'I'\
    \ {\n                boredoms++\n            }\n            sentence = \"\"\n\
    \        } else {\n            sentence += string(c)\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var count int\n    for _, v := range S {\n        if v\
    \ == 'I' {\n            count++\n        }\n    }\n    return count\n}\n", " \
    \   var boredoms int\n    for _, word := range strings.Split(S, \" \") {\n   \
    \     if word == \"I\" {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    return 0\n}\n", "    return 0\n}\n", "    return 0\n}\n",
  "    var boredoms int = 0\n    var sentences []string = strings.Split(S, \".\")\n\
    \    for _, sentence := range sentences {\n        if strings.HasPrefix(sentence,\
    \ \"I\") {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int\n    for _, word := range strings.Split(S, \" \") {\n    \
    \    if word == \"I\" {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    var count int\n    for _, word := range\
    \ strings.Split(S, \" \") {\n        if word == \"I\" {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var boredoms int\n    for _, word\
    \ := range strings.Split(S, \" \") {\n        if word == \"I\" {\n           \
    \ boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if strings.HasPrefix(word,\
    \ \"I\") {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    return 0\n}\n", "    var boredoms int = 0\n    var sentence string = \"\"\n\
    \    for _, c := range S {\n        if c == '.' || c == '?' || c == '!' {\n  \
    \          if sentence[0] == 'I' {\n                boredoms += 1\n          \
    \  }\n            sentence = \"\"\n        } else {\n            sentence += string(c)\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int = 0\n    var\
    \ sentences []string = strings.Split(S, \".\")\n    for _, sentence := range sentences\
    \ {\n        if strings.HasPrefix(sentence, \"I\") {\n            boredoms +=\
    \ 1\n        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int = 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n", "    return\
    \ 0\n}\n", "    return 0\n}\n", "    var boredoms int\n    var words []string\n\
    \    var sentence string\n    var is_bored bool\n\n    words = strings.Split(S,\
    \ \" \")\n    for _, word := range words {\n        if word == \"I\" {\n     \
    \       is_bored = true\n        }\n        sentence += word\n        if strings.Contains(word,\
    \ \".\") || strings.Contains(word, \"?\") || strings.Contains(word, \"!\") {\n\
    \            if is_bored {\n                boredoms++\n            }\n      \
    \      is_bored = false\n            sentence = \"\"\n        }\n    }\n    return\
    \ boredoms\n}\n", "    count := 0\n    for _, word := range strings.Split(S, \"\
    \ \") {\n        if word == \"I\" {\n            count++\n        }\n    }\n \
    \   return count\n}\n", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word := range\
    \ strings.Split(S, \" \") {\n        if word == \"I\" {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", "    // Your\
    \ code here\n    return 0\n}\n", "    return 0\n}\n", "    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n", "  \
    \  var boredoms int = 0\n    var sentences []string = split_sentences(S)\n   \
    \ for _, sentence := range sentences {\n        if is_bored_sentence(sentence)\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n", "  \
    \  return 0\n}\n", "    count := 0\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var boredoms int = 0\n    var words []string = strings.Split(S,\
    \ \" \")\n    for _, word := range words {\n        if word == \"I\" {\n     \
    \       boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int\n    for _, word := range strings.Split(S, \" \") {\n        if word ==\
    \ \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    return 0\n}\n", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    var boredoms int = 0\n    var sentences\
    \ []string = strings.Split(S, \".\")\n    for _, sentence := range sentences {\n\
    \        if strings.HasPrefix(sentence, \"I\") {\n            boredoms++\n   \
    \     }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    var is_bored\
    \ bool\n    for _, c := range S {\n        if c == '.' || c == '?' || c == '!'\
    \ {\n            is_bored = false\n        } else if is_bored {\n            boredoms++\n\
    \            is_bored = false\n        } else if c == 'I' {\n            is_bored\
    \ = true\n        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", " \
    \   var boredoms int\n    for _, word := range strings.Split(S, \" \") {\n   \
    \     if word == \"I\" {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    var words []string\n    var word\
    \ string\n    var sentence string\n    var sentences []string\n    var sentence_index\
    \ int\n    var word_index int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ aa int\n    var ab int\n    var ac int\n    var ad int\n    var ae int\n   \
    \ var af int\n    var ag int\n    var ah int\n    var ai int\n    var aj int\n\
    \    var ak int\n    var al int\n    var am int\n    var an int\n    var ao int\n\
    \    var ap int\n    var aq int\n    var ar int\n    var as int\n    var at int\n\
    \    var au int\n    var av int\n    var aw int\n    var ax int\n    var ay int\n\
    \    var az int\n    var ba int\n    var bb int\n    var bc int\n    var bd int\n\
    \    var be int\n    var bf int\n    var bg int\n    var bh int\n    var bi int\n\
    \    var bj int\n    var bk int\n    var bl int\n    var bm int\n    var bn int\n\
    \    var bo int\n    var bp int\n    var bq int\n    var br int\n    var bs int\n\
    \    var bt int\n    var bu int\n    var bv int\n    var bw int\n    var bx int\n\
    \    var by int\n    var bz int\n    var ca int\n    var cb int\n    var cc int\n\
    \    var cd int\n    var ce int\n    var cf int\n    var cg int\n    var ch int\n\
    \    var ci int\n    var cj int\n    var ck int\n    var cl int\n    var cm int\n\
    \    var cn int\n    var co int\n    var cp int\n    var cq int\n    var cr int",
  "    var boredoms int = 0\n    var sentences []string = strings.Split(S, \".\")\n\
    \    for _, sentence := range sentences {\n        if strings.HasPrefix(sentence,\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    for _, word := range strings.Split(S, \" \")\
    \ {\n        if strings.HasPrefix(word, \"I\") {\n            boredoms++\n   \
    \     }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word\
    \ := range S {\n        if word == 'I' {\n            boredoms++\n        }\n\
    \    }\n    return boredoms\n}\n", "    var boredoms int = 0\n    var sentences\
    \ []string = strings.Split(S, \".\")\n    for _, sentence := range sentences {\n\
    \        if strings.HasPrefix(sentence, \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n", "    var count int\n    for _, v\
    \ := range S {\n        if v == 'I' {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word := range\
    \ strings.Split(S, \" \") {\n        if word == \"I\" {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _,\
    \ word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n      \
    \      boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var count\
    \ int = 0\n    var words []string = strings.Split(S, \" \")\n    for _, word :=\
    \ range words {\n        if word == \"I\" {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    var boredoms int\n    for _, word := range\
    \ strings.Split(S, \" \") {\n        if word == \"I\" {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", "    count\
    \ := 0\n    for _, word := range strings.Split(S, \" \") {\n        if word ==\
    \ \"I\" {\n            count++\n        }\n    }\n    return count\n}\n", "  \
    \  var boredoms int\n    var sentence string\n    for _, char := range S {\n \
    \       if char == '.' || char == '?' || char == '!' {\n            if sentence[0]\
    \ == 'I' {\n                boredoms++\n            }\n            sentence =\
    \ \"\"\n        } else {\n            sentence += string(char)\n        }\n  \
    \  }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word := range\
    \ strings.Split(S, \" \") {\n        if word == \"I\" {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    count := 0\n    for _, word\
    \ := range strings.Split(S, \" \") {\n        if strings.HasPrefix(word, \"I\"\
    ) {\n            count++\n        }\n    }\n    return count\n}\n", "    var boredoms\
    \ int = 0\n    var words []string = strings.Split(S, \" \")\n    for _, word :=\
    \ range words {\n        if word == \"I\" {\n            boredoms += 1\n     \
    \   }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word\
    \ := range strings.Split(S, \" \") {\n        if word == \"I\" {\n           \
    \ boredoms++\n        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n",
  "    return 0\n}\n", "    return 0\n}\n", "    var boredoms int = 0\n    var sentences\
    \ []string = strings.Split(S, \".\")\n    for _, sentence := range sentences {\n\
    \        if strings.HasPrefix(sentence, \"I\") {\n            boredoms++\n   \
    \     }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", "    var boredoms\
    \ int\n    for _, word := range strings.Split(S, \" \") {\n        if word ==\
    \ \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    // Your code here\n    return 0\n}\n", "    var boredoms int\n    for _, word\
    \ := range strings.Split(S, \" \") {\n        if word == \"I\" {\n           \
    \ boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n\
    \    for _, sentence := range S {\n        if sentence == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    var i\
    \ int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n          \
    \  boredoms++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i] == '!'\
    \ {\n            continue\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ count int\n    for _, word := range strings.Split(S, \" \") {\n        if word\
    \ == \"I\" {\n            count++\n        }\n    }\n    return count\n}\n", " \
    \   boredoms := 0\n    for _, sentence := range split_sentences(S) {\n       \
    \ if is_bored_sentence(sentence) {\n            boredoms++\n        }\n    }\n\
    \    return boredoms\n}\n", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    return 0\n}\n", "    var boredoms int\n\
    \    for _, sentence := range(strings.Split(S, \".\")) {\n        if strings.HasPrefix(sentence,\
    \ \"I\") {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    return 0\n}\n", "    var boredoms int = 0\n    var sentences []string = strings.Split(S,\
    \ \".\")\n    for _, sentence := range sentences {\n        if strings.HasPrefix(sentence,\
    \ \"I\") {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int\n    for _, word := range strings.Split(S, \" \") {\n    \
    \    if word == \"I\" {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    count := 0\n    for _, word := range strings.Split(S, \"\
    \ \") {\n        if strings.HasPrefix(word, \"I\") {\n            count++\n  \
    \      }\n    }\n    return count\n}\n", "    var boredoms int\n    var is_bored\
    \ bool\n    for _, c := range S {\n        if c == '.' || c == '?' || c == '!'\
    \ {\n            is_bored = false\n        } else if c == 'I' {\n            is_bored\
    \ = true\n        } else if is_bored {\n            boredoms++\n            is_bored\
    \ = false\n        }\n    }\n    return boredoms\n}\n", "    var boredoms int\
    \ = 0\n    for _, word := range strings.Split(S, \" \") {\n        if word ==\
    \ \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    return 0\n}\n", "    count := 0\n    for _, v := range S {\n        if v ==\
    \ 'I' {\n            count++\n        }\n    }\n    return count\n}\n", "    var\
    \ boredoms int\n    for _, word := range S {\n        if word == 'I' {\n     \
    \       boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int = 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int\n    var sentences []string\n    sentences = append(sentences, \"\")\n \
    \   for _, c := range S {\n        if c == '.' || c == '?' || c == '!' {\n   \
    \         sentences = append(sentences, \"\")\n        } else {\n            sentences[len(sentences)-1]\
    \ += string(c)\n        }\n    }\n    for _, sentence := range sentences {\n \
    \       if len(sentence) > 0 && sentence[0] == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var count int\n    for _, v\
    \ := range S {\n        if v == 'I' {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var boredoms int\n    var words []string\n    var\
    \ sentence string\n    var is_bored bool\n    for _, c := range S {\n        if\
    \ c == '.' || c == '?' || c == '!' {\n            words = strings.Split(sentence,\
    \ \" \")\n            if len(words) > 0 {\n                is_bored = words[0]\
    \ == \"I\"\n            }\n            if is_bored {\n                boredoms++\n\
    \            }\n            sentence = \"\"\n        } else {\n            sentence\
    \ += string(c)\n        }\n    }\n    return boredoms\n}\n", "    var count int\n\
    \    for _, v := range S {\n        if v == 'I' {\n            count++\n     \
    \   }\n    }\n    return count\n}\n", "    return 0\n}\n", "    return 0\n}\n",
  "    return 0\n}\n", "    var count int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word := range\
    \ strings.Split(S, \" \") {\n        if word == \"I\" {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int = 0\n    var\
    \ sentences []string = strings.Split(S, \".\")\n    for _, sentence := range sentences\
    \ {\n        if strings.HasPrefix(sentence, \"I\") {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    var sentence\
    \ string\n    for _, char := range S {\n        if char == '.' || char == '?'\
    \ || char == '!' {\n            if sentence[0] == 'I' {\n                boredoms++\n\
    \            }\n            sentence = \"\"\n        } else {\n            sentence\
    \ += string(char)\n        }\n    }\n    return boredoms\n}\n", "    return 0\n\
    }\n", "    var boredoms int\n    var sentence string\n    for _, char := range\
    \ S {\n        if char == '.' || char == '?' || char == '!' {\n            if\
    \ sentence[0] == 'I' {\n                boredoms++\n            }\n          \
    \  sentence = \"\"\n        } else {\n            sentence += string(char)\n \
    \       }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _,\
    \ word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n      \
    \      boredoms++\n        }\n    }\n    return boredoms\n}\n", "    return 0\n\
    }\n", "    return 0\n}\n", "    return 0\n}\n", "    var boredoms int\n    var\
    \ word string\n    var sentence string\n    for _, char := range S {\n       \
    \ if char == '.' || char == '?' || char == '!' {\n            sentence = sentence\
    \ + word\n            if sentence[0] == 'I' {\n                boredoms++\n  \
    \          }\n            sentence = \"\"\n            word = \"\"\n        }\
    \ else if char == ' ' {\n            sentence = sentence + word\n            word\
    \ = \"\"\n        } else {\n            word = word + string(char)\n        }\n\
    \    }\n    return boredoms\n}\n", "    var count int\n    var words []string\n\
    \    words = strings.Split(S, \" \")\n    for _, word := range words {\n     \
    \   if word == \"I\" {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    var boredoms int\n    for _, word := range strings.Split(S, \" \")\
    \ {\n        if word == \"I\" {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n", "    var boredoms int\n    var word string\n    var\
    \ sentence string\n    var sentences []string\n    var words []string\n\n    sentences\
    \ = strings.Split(S, \".\")\n    for _, sentence = range sentences {\n       \
    \ words = strings.Split(sentence, \" \")\n        word = words[0]\n        if\
    \ word == \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    for _, word := range strings.Split(S, \" \")\
    \ {\n        if word == \"I\" {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
