name: HumanEval_91_is_bored
language: go_test.go
prompt: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You'll be given a string of words, and your task is to count the number\n// of\
  \ boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
  \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\"\
  )\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n// 1\nfunc is_bored(S string) int {\n"
tests: "func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
  Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"),\
  \ expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
  \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
  \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
  \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var boredoms int\n    var sentences []string\n    var sentence\
    \ string\n    var word string\n    var is_bored bool\n    var is_sentence bool\n\
    \    var is_word bool\n    var is_space bool\n    var is_punctuation bool\n  \
    \  var is_quote bool\n    var is_apostrophe bool\n    var is_dash bool\n    var\
    \ is_colon bool\n    var is_semicolon bool\n    var is_comma bool\n    var is_period\
    \ bool\n    var is_question_mark bool\n    var is_exclamation_mark bool\n    var\
    \ is_newline bool\n    var is_tab bool\n    var is_carriage_return bool\n    var\
    \ is_backspace bool\n    var is_form_feed bool\n    var is_vertical_tab bool\n\
    \    var is_null bool\n    var is_escape bool\n    var is_unicode bool\n    var\
    \ is_other bool\n    var is_letter bool\n    var is_number bool\n    var is_symbol\
    \ bool\n    var is_digit bool\n    var is_lower bool\n    var is_upper bool\n\
    \    var is_title bool\n    var is_control bool\n    var is_graphic bool\n   \
    \ var is_printable bool\n    var is_punct bool\n    var is_space_unicode bool\n\
    \    var is_letter_unicode bool\n    var is_number_unicode bool\n    var is_symbol_unicode\
    \ bool\n    var is_digit_unicode bool\n    var is_lower_unicode bool\n    var\
    \ is_upper_unicode bool\n    var is_title_unicode bool\n    var is_control_unicode\
    \ bool\n    var is_graphic_unicode bool\n    var is_printable_unicode bool\n \
    \   var is_punct_unicode bool\n    var is_space_unicode_category bool\n    var\
    \ is_letter_unicode_category bool\n    var is_number_unicode_category bool\n \
    \   var is_symbol_unicode_category bool\n    var is_digit_unicode_category bool\n\
    \    var is_lower_unicode_category bool\n    var is_upper_unicode_category bool\n\
    \    var is_title", "    return 0\n}\n", "    // Your code here\n    return 0\n\
    }\n", "    var boredoms int = 0\n    var sentences []string = strings.Split(S,\
    \ \".\")\n    for _, sentence := range sentences {\n        var words []string\
    \ = strings.Split(sentence, \" \")\n        if words[0] == \"I\" {\n         \
    \   boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int\n    for _, word := range strings.Split(S, \" \") {\n        if word ==\
    \ \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    // Your code here\n    return 0\n}\n", "    var boredoms int\n    for _, word\
    \ := range strings.Split(S, \" \") {\n        if word == \"I\" {\n           \
    \ boredoms++\n        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n",
  "    var boredoms int\n    for _, word := range strings.Split(S, \" \") {\n    \
    \    if word == \"I\" {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    return 0\n}\n", "    var boredoms int = 0\n    var sentences\
    \ []string = strings.Split(S, \".\")\n    for _, sentence := range sentences {\n\
    \        if strings.HasPrefix(sentence, \"I\") {\n            boredoms++\n   \
    \     }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    var last_char\
    \ byte\n    var is_sentence bool\n    for _, char := range S {\n        if char\
    \ == '.' || char == '?' || char == '!' {\n            is_sentence = true\n   \
    \     } else if is_sentence && char == 'I' {\n            boredoms++\n       \
    \     is_sentence = false\n        } else {\n            is_sentence = false\n\
    \        }\n        last_char = byte(char)\n    }\n    if last_char == 'I' {\n\
    \        boredoms++\n    }\n    return boredoms\n}\n", "    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int = 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms += 1\n        }\n    }\n    return boredoms\n}\n", "    // Your\
    \ code here\n    return 0\n}\n", "    return 0\n}\n", "    boredoms := 0\n   \
    \ for _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    return\
    \ 0\n}\n", "    return 0\n}\n", "    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
