language: go_test.go
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_diff float64 = numbers[1] - numbers[0]\n    var closest_pair\
    \ []float64 = []float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            diff\
    \ := numbers[j] - numbers[i]\n            if diff < closest_diff {\n         \
    \       closest_diff = diff\n                closest_pair = []float64{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return []interface{}{closest_pair[0],\
    \ closest_pair[1]}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpjtz4hfcz_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpjtz4hfcz_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpjtz4hfcz_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpjtz4hfcz_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64\n    var distance float64\n    var distance_1 float64\n    var distance_2\
    \ float64\n    var distance_3 float64\n    var distance_4 float64\n    var distance_5\
    \ float64\n    var distance_6 float64\n    var distance_7 float64\n    var distance_8\
    \ float64\n    var distance_9 float64\n    var distance_10 float64\n    var distance_11\
    \ float64\n    var distance_12 float64\n    var distance_13 float64\n    var distance_14\
    \ float64\n    var distance_15 float64\n    var distance_16 float64\n    var distance_17\
    \ float64\n    var distance_18 float64\n    var distance_19 float64\n    var distance_20\
    \ float64\n    var distance_21 float64\n    var distance_22 float64\n    var distance_23\
    \ float64\n    var distance_24 float64\n    var distance_25 float64\n    var distance_26\
    \ float64\n    var distance_27 float64\n    var distance_28 float64\n    var distance_29\
    \ float64\n    var distance_30 float64\n    var distance_31 float64\n    var distance_32\
    \ float64\n    var distance_33 float64\n    var distance_34 float64\n    var distance_35\
    \ float64\n    var distance_36 float64\n    var distance_37 float64\n    var distance_38\
    \ float64\n    var distance_39 float64\n    var distance_40 float64\n    var distance_41\
    \ float64\n    var distance_42 float64\n    var distance_43 float64\n    var distance_44\
    \ float64\n    var distance_45 float64\n    var distance_46 float64\n    var distance_47\
    \ float64\n    var distance_48 float64\n    var distance_49 float64\n    var distance_50\
    \ float64\n    var distance_51 float64\n    var distance_52 float64\n    var distance_53\
    \ float64\n    var distance_54 float64\n    var distance_55 float64\n    var distance_56\
    \ float64\n    var distance_57 float64\n    var distance_58 float64\n    var distance_59\
    \ float64\n    var distance_60 float64\n    var distance_61 float\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_fhwybxs_test.go:79:6: expected ''('', found TestFind_Closest_Elements

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i, number := range numbers {\n        if i == 0 {\n       \
    \     closest_elements = []interface{}{number, number}\n            closest_diff\
    \ = numbers[i+1] - number\n        } else if i == len(numbers) - 1 {\n       \
    \     break\n        } else {\n            diff := numbers[i+1] - number\n   \
    \         if diff < closest_diff {\n                closest_elements = []interface{}{number,\
    \ numbers[i+1]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_diff float64 = numbers[1] - numbers[0]\n    var closest_pair\
    \ []float64 = []float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            diff\
    \ := numbers[j] - numbers[i]\n            if diff < closest_diff {\n         \
    \       closest_diff = diff\n                closest_pair = []float64{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return []interface{}{closest_pair[0],\
    \ closest_pair[1]}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpjtz4hfcz_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpjtz4hfcz_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpjtz4hfcz_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpjtz4hfcz_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var current_difference float64\n\n  \
    \  for i := 0; i < len(numbers) - 1; i++ {\n        current_difference = numbers[i\
    \ + 1] - numbers[i]\n        if current_difference < closest_difference {\n  \
    \          closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpb69tpn8a_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpb69tpn8a_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpb69tpn8a_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpb69tpn8a_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_distance\
    \ float64 = 0.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n\
    \            if closest_distance == 0.0 || distance < closest_distance {\n   \
    \             closest_distance = distance\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_pair\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpljq24bif_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpljq24bif_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpljq24bif_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpljq24bif_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n       \
    \     if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    var prev_num float64\n    var curr_num float64\n\
    \n    if len(numbers) > 1 {\n        closest_diff = numbers[1] - numbers[0]\n\
    \        closest_elements = []interface{}{numbers[0], numbers[1]}\n        prev_num\
    \ = numbers[0]\n        for _, curr_num = range numbers[1:] {\n            diff\
    \ = curr_num - prev_num\n            if diff < closest_diff {\n              \
    \  closest_diff = diff\n                closest_elements = []interface{}{prev_num,\
    \ curr_num}\n            }\n            prev_num = curr_num\n        }\n    }\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpuvhx25r5_test.go:54: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpuvhx25r5_test.go:54: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpuvhx25r5_test.go:54: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpuvhx25r5_test.go:54: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64\n    var distance float64\n    var distance_1 float64\n    var distance_2\
    \ float64\n    var number_1 float64\n    var number_2 float64\n\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n\
    \            distance_1 = numbers[i] - numbers[j]\n            distance_2 = numbers[j]\
    \ - numbers[i]\n            if distance_1 < 0 {\n                distance = distance_1\
    \ * -1\n            } else {\n                distance = distance_2\n        \
    \    }\n            if closest_distance == 0 || distance < closest_distance {\n\
    \                closest_distance = distance\n                if distance_1 <\
    \ 0 {\n                    number_1 = numbers[j]\n                    number_2\
    \ = numbers[i]\n                } else {\n                    number_1 = numbers[i]\n\
    \                    number_2 = numbers[j]\n                }\n            }\n\
    \        }\n    }\n    closest_elements = append(closest_elements, number_1)\n\
    \    closest_elements = append(closest_elements, number_2)\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpefxa0a39_test.go:66: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpefxa0a39_test.go:66: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpefxa0a39_test.go:66: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpefxa0a39_test.go:66: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpefxa0a39_test.go:66: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=3.1) %!s(float64=2.2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64\n    var distance float64\n    var current_element float64\n    var\
    \ next_element float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n      \
    \  current_element = numbers[i]\n        next_element = numbers[i + 1]\n     \
    \   distance = next_element - current_element\n        if i == 0 {\n         \
    \   closest_distance = distance\n            closest_elements = []interface{}{current_element,\
    \ next_element}\n        } else if distance < closest_distance {\n           \
    \ closest_distance = distance\n            closest_elements = []interface{}{current_element,\
    \ next_element}\n        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmppy122b7c_test.go:54: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmppy122b7c_test.go:54: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmppy122b7c_test.go:54: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmppy122b7c_test.go:54: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i\
    \ := 1; i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n\
    \        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    var closest_elements []interface{} = []interface{}{numbers[0], numbers[1]}\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if numbers[j] - numbers[i] < closest_difference {\n     \
    \           closest_difference = numbers[j] - numbers[i]\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx41j0xyx_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx41j0xyx_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx41j0xyx_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx41j0xyx_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_elements []interface{}\n\
    \n    for i := 0; i < len(numbers) - 1; i++ {\n        current_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        current_difference = numbers[i + 1] - numbers[i]\n\
    \        if closest_difference == 0 || current_difference < closest_difference\
    \ {\n            closest_difference = current_difference\n            closest_elements\
    \ = current_elements\n        }\n    }\n\n    return closest_elements\n}\n\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqgxzh63r_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqgxzh63r_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqgxzh63r_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqgxzh63r_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var closest_diff float64\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_diff\
    \ == 0 || diff < closest_diff {\n                closest_diff = diff\n       \
    \         closest = []interface{}{numbers[i], numbers[j]}\n            }\n   \
    \     }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i, number := range numbers {\n        if i == 0 {\n       \
    \     closest_elements = []interface{}{number, number}\n            closest_diff\
    \ = numbers[i+1] - number\n        } else if i == len(numbers) - 1 {\n       \
    \     break\n        } else {\n            diff := numbers[i+1] - number\n   \
    \         if diff < closest_diff {\n                closest_elements = []interface{}{number,\
    \ numbers[i+1]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var smallest_difference\
    \ float64\n    var difference float64\n    var smaller_number float64\n    var\
    \ larger_number float64\n\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            difference = numbers[j] - numbers[i]\n\
    \            if i == 0 && j == 1 {\n                smallest_difference = difference\n\
    \                smaller_number = numbers[i]\n                larger_number =\
    \ numbers[j]\n            } else if difference < smallest_difference {\n     \
    \           smallest_difference = difference\n                smaller_number =\
    \ numbers[i]\n                larger_number = numbers[j]\n            }\n    \
    \    }\n    }\n\n    closest_elements = append(closest_elements, smaller_number,\
    \ larger_number)\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpslwf56iu_test.go:57: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpslwf56iu_test.go:57: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpslwf56iu_test.go:57: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpslwf56iu_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_elements_indexes []int =\
    \ []int{0, 1}\n\n    for i := 0; i < len(numbers); i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements_indexes = []int{i, j}\n     \
    \       }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[0]])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[1]])\n\n    return closest_elements\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmplh2kb4e5_test.go:52: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmplh2kb4e5_test.go:52: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmplh2kb4e5_test.go:52: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmplh2kb4e5_test.go:52: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n       \
    \     if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var smallestDifference float64\n\
    \    var currentDifference float64\n    var previousNumber float64\n    var currentNumber\
    \ float64\n\n    for i, number := range numbers {\n        if i == 0 {\n     \
    \       previousNumber = number\n            continue\n        }\n\n        currentNumber\
    \ = number\n        currentDifference = currentNumber - previousNumber\n\n   \
    \     if i == 1 {\n            smallestDifference = currentDifference\n      \
    \      closest = []interface{}{previousNumber, currentNumber}\n        } else\
    \ if currentDifference < smallestDifference {\n            smallestDifference\
    \ = currentDifference\n            closest = []interface{}{previousNumber, currentNumber}\n\
    \        }\n\n        previousNumber = currentNumber\n    }\n\n    return closest\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp_q6ehpvu_test.go:61: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp_q6ehpvu_test.go:61: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp_q6ehpvu_test.go:61: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp_q6ehpvu_test.go:61: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_elements []interface{}\n\
    \n    for i := 0; i < len(numbers) - 1; i++ {\n        current_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        current_difference = numbers[i + 1] - numbers[i]\n\
    \        if closest_difference == 0 || current_difference < closest_difference\
    \ {\n            closest_difference = current_difference\n            closest_elements\
    \ = current_elements\n        }\n    }\n\n    return closest_elements\n}\n\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqgxzh63r_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqgxzh63r_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqgxzh63r_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqgxzh63r_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var smaller_number float64\n    var\
    \ larger_number float64\n\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            if numbers[i] < numbers[j]\
    \ {\n                smaller_number = numbers[i]\n                larger_number\
    \ = numbers[j]\n            } else {\n                smaller_number = numbers[j]\n\
    \                larger_number = numbers[i]\n            }\n            difference\
    \ = larger_number - smaller_number\n            if closest_difference == 0 ||\
    \ difference < closest_difference {\n                closest_difference = difference\n\
    \                closest_elements = []interface{}{smaller_number, larger_number}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp1o5y_0ap_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_elements_index int = 0\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        difference := numbers[i\
    \ + 1] - numbers[i]\n        if difference < closest_difference {\n          \
    \  closest_difference = difference\n            closest_elements_index = i\n \
    \       }\n    }\n    closest_elements = append(closest_elements, numbers[closest_elements_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpftwc76mk_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpftwc76mk_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpftwc76mk_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpftwc76mk_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_element float64\n\
    \    var next_element float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n\
    \        current_element = numbers[i]\n        next_element = numbers[i + 1]\n\
    \        current_difference = next_element - current_element\n\n        if i ==\
    \ 0 {\n            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{current_element, next_element}\n        } else if current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{current_element, next_element}\n\
    \        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    var current_difference float64 = 0.0\n    var current_elements\
    \ []interface{}\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        current_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        current_difference = numbers[i\
    \ + 1] - numbers[i]\n        if closest_difference == 0.0 || current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = current_elements\n        }\n    }\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmps488ucee_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmps488ucee_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmps488ucee_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmps488ucee_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    var closest_index int = 0\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i+1] - numbers[i]\n        if closest_difference\
    \ == 0.0 || difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index+1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpcb3cmtd1_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpcb3cmtd1_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpcb3cmtd1_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpcb3cmtd1_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var smallest_difference\
    \ float64 = -1\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if difference < smallest_difference || smallest_difference == -1\
    \ {\n                smallest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp5lqsbutc_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp5lqsbutc_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp5lqsbutc_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp5lqsbutc_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_numbers []float64 = numbers[0:2]\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_numbers = numbers[i:j+1]\n            }\n        }\n  \
    \  }\n    closest_elements = append(closest_elements, closest_numbers[0])\n  \
    \  closest_elements = append(closest_elements, closest_numbers[len(closest_numbers)-1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpksskbp5f_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpksskbp5f_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpksskbp5f_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpksskbp5f_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var first_number float64\n    var second_number\
    \ float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        first_number\
    \ = numbers[i]\n        second_number = numbers[i + 1]\n        difference = second_number\
    \ - first_number\n        if i == 0 {\n            closest_difference = difference\n\
    \            closest_elements = []interface{}{first_number, second_number}\n \
    \       } else if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_elements = []interface{}{first_number, second_number}\n\
    \        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpr2srcigp_test.go:54: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpr2srcigp_test.go:54: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpr2srcigp_test.go:54: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpr2srcigp_test.go:54: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var smallest_difference\
    \ float64\n    smallest_difference = numbers[1] - numbers[0]\n    closest_elements\
    \ = append(closest_elements, numbers[0])\n    closest_elements = append(closest_elements,\
    \ numbers[1])\n    for i := 0; i < len(numbers) - 1; i++ {\n        if numbers[i\
    \ + 1] - numbers[i] < smallest_difference {\n            smallest_difference =\
    \ numbers[i + 1] - numbers[i]\n            closest_elements[0] = numbers[i]\n\
    \            closest_elements[1] = numbers[i + 1]\n        }\n    }\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp_altfdc1_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp_altfdc1_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp_altfdc1_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp_altfdc1_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    var current_difference float64 = 0.0\n    var current_elements\
    \ []interface{}\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            current_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n            current_difference = numbers[j] - numbers[i]\n    \
    \        if closest_difference == 0.0 || current_difference < closest_difference\
    \ {\n                closest_difference = current_difference\n               \
    \ closest_elements = current_elements\n            }\n        }\n    }\n\n   \
    \ return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n\
    \  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpb1alepd3_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpb1alepd3_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpb1alepd3_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpb1alepd3_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    var closest_elements []interface{} = []interface{}{numbers[0], numbers[1]}\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6ipkgoay_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6ipkgoay_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6ipkgoay_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6ipkgoay_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_element float64\n\
    \    var previous_element float64\n\n    for i, element := range numbers {\n \
    \       if i == 0 {\n            previous_element = element\n            continue\n\
    \        }\n\n        current_element = element\n        current_difference =\
    \ current_element - previous_element\n\n        if i == 1 {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{previous_element,\
    \ current_element}\n        } else if current_difference < closest_difference\
    \ {\n            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{previous_element, current_element}\n        }\n\n        previous_element\
    \ = current_element\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpwko9lw3o_test.go:61: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpwko9lw3o_test.go:61: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpwko9lw3o_test.go:61: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpwko9lw3o_test.go:61: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64 = -1\n    var distance float64\n    var i, j int\n\n    for i = 0; i\
    \ < len(numbers) - 1; i++ {\n        for j = i + 1; j < len(numbers); j++ {\n\
    \            distance = numbers[j] - numbers[i]\n            if closest_distance\
    \ == -1 || distance < closest_distance {\n                closest_distance = distance\n\
    \                closest_elements = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp0p3eu80b_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp0p3eu80b_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp0p3eu80b_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp0p3eu80b_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_diff float64\
    \ = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff {\n\
    \            closest_diff = diff\n            closest_pair = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp24z1icwj_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp24z1icwj_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp24z1icwj_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp24z1icwj_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var minDiff float64 = numbers[1] - numbers[0]\n    var\
    \ minDiffIndex int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff\
    \ := numbers[i + 1] - numbers[i]\n        if diff < minDiff {\n            minDiff\
    \ = diff\n            minDiffIndex = i\n        }\n    }\n    return []interface{}{numbers[minDiffIndex],\
    \ numbers[minDiffIndex + 1]}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_diff float64 = numbers[1] - numbers[0]\n  \
    \  var closest_elements []interface{} = []interface{}{numbers[0], numbers[1]}\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if diff < closest_diff {\n            closest_diff = diff\n\
    \            closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n  \
    \      }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptzb6uk2n_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptzb6uk2n_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptzb6uk2n_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptzb6uk2n_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var first_number float64\n    var second_number\
    \ float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        first_number\
    \ = numbers[i]\n        second_number = numbers[i + 1]\n        difference = second_number\
    \ - first_number\n        if i == 0 {\n            closest_difference = difference\n\
    \            closest_elements = []interface{}{first_number, second_number}\n \
    \       } else if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_elements = []interface{}{first_number, second_number}\n\
    \        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpr2srcigp_test.go:54: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpr2srcigp_test.go:54: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpr2srcigp_test.go:54: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpr2srcigp_test.go:54: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_distance\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n   \
    \         if closest_distance == 0 || distance < closest_distance {\n        \
    \        closest_distance = distance\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_pair\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4wsm1qrk_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4wsm1qrk_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4wsm1qrk_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4wsm1qrk_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    var current_difference float64 = 0.0\n    var current_elements\
    \ []interface{}\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        current_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        current_difference = numbers[i\
    \ + 1] - numbers[i]\n        if closest_difference == 0.0 || current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = current_elements\n        }\n    }\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmps488ucee_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmps488ucee_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmps488ucee_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmps488ucee_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64 = 0.0\n    var current_distance float64 = 0.0\n    var current_element\
    \ float64 = 0.0\n    var previous_element float64 = 0.0\n\n    for _, current_element\
    \ = range numbers {\n        current_distance = current_element - previous_element\n\
    \        if current_distance < closest_distance || closest_distance == 0.0 {\n\
    \            closest_distance = current_distance\n            closest_elements\
    \ = []interface{}{previous_element, current_element}\n        }\n        previous_element\
    \ = current_element\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpt_epas40_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpt_epas40_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpt_epas40_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpt_epas40_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_diff float64\
    \ = numbers[1] - numbers[0]\n    var diff float64\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        diff = numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_pair = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpz5miylz0_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpz5miylz0_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpz5miylz0_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpz5miylz0_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    closest = append(closest,\
    \ numbers[0])\n    closest = append(closest, numbers[1])\n    for i := 0; i <\
    \ len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n \
    \           if abs(numbers[i] - numbers[j]) < abs(closest[0].(float64) - closest[1].(float64))\
    \ {\n                closest[0] = numbers[i]\n                closest[1] = numbers[j]\n\
    \            }\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7aa1yb4m_test.go:20:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var smallest_difference\
    \ float64 = 0.0\n    var current_difference float64 = 0.0\n    var current_pair\
    \ []interface{}\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            current_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n            current_difference = numbers[j] - numbers[i]\n    \
    \        if smallest_difference == 0.0 || current_difference < smallest_difference\
    \ {\n                smallest_difference = current_difference\n              \
    \  closest_pair = current_pair\n            }\n        }\n    }\n\n    return\
    \ closest_pair\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptjp9z3al_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptjp9z3al_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptjp9z3al_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptjp9z3al_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64 = 0.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n\
    \            if closest_distance == 0.0 || distance < closest_distance {\n   \
    \             closest_distance = distance\n                closest_elements =\
    \ []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n   \
    \ return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n\
    \  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp1d4wrhq3_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp1d4wrhq3_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp1d4wrhq3_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp1d4wrhq3_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    var diff_abs float64\n    var i int\n   \
    \ var j int\n    var length int\n    var number_1 float64\n    var number_2 float64\n\
    \n    length = len(numbers)\n    closest_diff = numbers[1] - numbers[0]\n    number_1\
    \ = numbers[0]\n    number_2 = numbers[1]\n    for i = 0; i < length - 1; i++\
    \ {\n        for j = i + 1; j < length; j++ {\n            diff = numbers[j] -\
    \ numbers[i]\n            diff_abs = diff\n            if diff < 0 {\n       \
    \         diff_abs = -diff\n            }\n            if diff_abs < closest_diff\
    \ {\n                closest_diff = diff_abs\n                number_1 = numbers[i]\n\
    \                number_2 = numbers[j]\n            }\n        }\n    }\n    closest_elements\
    \ = []interface{}{number_1, number_2}\n    return closest_elements\n}\n\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmxf7lz0o_test.go:64: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    var current_difference float64 = 0.0\n    var current_elements\
    \ []interface{}\n\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            current_difference = numbers[j] -\
    \ numbers[i]\n            if closest_difference == 0.0 || current_difference <\
    \ closest_difference {\n                closest_difference = current_difference\n\
    \                current_elements = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n\n    closest_elements = current_elements\n  \
    \  return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpfuxei96h_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpfuxei96h_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpfuxei96h_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpfuxei96h_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if difference < closest_difference || closest_difference == 0.0 {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpzlzyef2f_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpzlzyef2f_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpzlzyef2f_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpzlzyef2f_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_element float64\n\
    \    var previous_element float64\n\n    for i, element := range numbers {\n \
    \       if i == 0 {\n            previous_element = element\n            continue\n\
    \        }\n        current_element = element\n        current_difference = current_element\
    \ - previous_element\n        if i == 1 {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{previous_element, current_element}\n\
    \        } else if current_difference < closest_difference {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{previous_element,\
    \ current_element}\n        }\n        previous_element = current_element\n  \
    \  }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpgeacwa68_test.go:57: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpgeacwa68_test.go:57: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpgeacwa68_test.go:57: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpgeacwa68_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        if numbers[i+1] - numbers[i] < closest_difference {\n           \
    \ closest_difference = numbers[i+1] - numbers[i]\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i+1]}\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp3ldc8cp9_test.go:43: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp3ldc8cp9_test.go:43: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp3ldc8cp9_test.go:43: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp3ldc8cp9_test.go:43: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var minDiff float64 = numbers[1] - numbers[0]\n    var\
    \ minDiffIndex int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff\
    \ := numbers[i + 1] - numbers[i]\n        if diff < minDiff {\n            minDiff\
    \ = diff\n            minDiffIndex = i\n        }\n    }\n    return []interface{}{numbers[minDiffIndex],\
    \ numbers[minDiffIndex + 1]}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var closest_diff float64\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_diff\
    \ == 0 || diff < closest_diff {\n                closest_diff = diff\n       \
    \         closest = []interface{}{numbers[i], numbers[j]}\n            }\n   \
    \     }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i, number := range numbers {\n        for j, number2 := range\
    \ numbers {\n            if i != j {\n                difference := number - number2\n\
    \                if difference < 0 {\n                    difference = -difference\n\
    \                }\n                if closest_difference == 0 || difference <\
    \ closest_difference {\n                    closest_difference = difference\n\
    \                    closest_elements = []interface{}{number, number2}\n     \
    \           }\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpe217sh90_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpe217sh90_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=2) %!s(float64=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i\
    \ := 1; i < len(numbers) - 1; i++ {\n        if numbers[i + 1] - numbers[i] <\
    \ closest_difference {\n            closest_difference = numbers[i + 1] - numbers[i]\n\
    \            closest_index = i\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index])\n    closest_elements = append(closest_elements, numbers[closest_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpj55b277__test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpj55b277__test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpj55b277__test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpj55b277__test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_diff float64 = numbers[1] - numbers[0]\n  \
    \  var closest_elements []interface{} = []interface{}{numbers[0], numbers[1]}\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if diff < closest_diff\
    \ {\n                closest_diff = diff\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmphns876lk_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmphns876lk_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmphns876lk_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmphns876lk_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_element float64\n\
    \    var next_element float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n\
    \        current_element = numbers[i]\n        next_element = numbers[i + 1]\n\
    \        current_difference = next_element - current_element\n\n        if i ==\
    \ 0 {\n            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{current_element, next_element}\n        } else if current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{current_element, next_element}\n\
    \        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i\
    \ := 1; i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n\
    \        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var smaller_number float64\n    var\
    \ larger_number float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n     \
    \   difference = numbers[i + 1] - numbers[i]\n        if difference < closest_difference\
    \ || closest_difference == 0 {\n            closest_difference = difference\n\
    \            smaller_number = numbers[i]\n            larger_number = numbers[i\
    \ + 1]\n        }\n    }\n\n    closest_elements = append(closest_elements, smaller_number,\
    \ larger_number)\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpln2kzk5q_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpln2kzk5q_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpln2kzk5q_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpln2kzk5q_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var diff float64\n    var\
    \ min_diff float64\n    var min_diff_index int\n    var min_diff_index_found bool\n\
    \n    for i, number := range numbers {\n        if i == 0 {\n            diff\
    \ = numbers[i+1] - number\n            min_diff = diff\n            min_diff_index\
    \ = i\n            min_diff_index_found = true\n        } else if i == len(numbers)\
    \ - 1 {\n            diff = number - numbers[i-1]\n            if diff < min_diff\
    \ {\n                min_diff = diff\n                min_diff_index = i\n   \
    \         }\n        } else {\n            diff = number - numbers[i-1]\n    \
    \        if diff < min_diff {\n                min_diff = diff\n             \
    \   min_diff_index = i\n            }\n            diff = numbers[i+1] - number\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_diff_index = i\n            }\n        }\n    }\n\n    if min_diff_index_found\
    \ {\n        closest = append(closest, numbers[min_diff_index])\n        if min_diff_index\
    \ == 0 {\n            closest = append(closest, numbers[min_diff_index+1])\n \
    \       } else if min_diff_index == len(numbers) - 1 {\n            closest =\
    \ append(closest, numbers[min_diff_index-1])\n        } else {\n            if\
    \ numbers[min_diff_index+1] - numbers[min_diff_index] < numbers[min_diff_index]\
    \ - numbers[min_diff_index-1] {\n                closest = append(closest, numbers[min_diff_index+1])\n\
    \            } else {\n                closest = append(closest, numbers[min_diff_index-1])\n\
    \            }\n        }\n    }\n\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp0r3i51ti_test.go:82: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp0r3i51ti_test.go:82: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp0r3i51ti_test.go:82: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp0r3i51ti_test.go:82: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_elements_index int = 0\n\
    \    for index, _ := range numbers {\n        if index == 0 {\n            continue\n\
    \        }\n        difference := numbers[index] - numbers[index - 1]\n      \
    \  if difference < closest_difference {\n            closest_difference = difference\n\
    \            closest_elements_index = index - 1\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_elements_index])\n    closest_elements\
    \ = append(closest_elements, numbers[closest_elements_index + 1])\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmwudv0pt_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmwudv0pt_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmwudv0pt_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmwudv0pt_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var minDiff float64 = numbers[1] - numbers[0]\n    var\
    \ minDiffPair []float64 = numbers[0:2]\n    for i := 0; i < len(numbers) - 1;\
    \ i++ {\n        diff := numbers[i+1] - numbers[i]\n        if diff < minDiff\
    \ {\n            minDiff = diff\n            minDiffPair = numbers[i:i+2]\n  \
    \      }\n    }\n    return []interface{}{minDiffPair[0], minDiffPair[1]}\n}\n\
    \nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpj6xcjw6o_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpj6xcjw6o_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpj6xcjw6o_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpj6xcjw6o_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_elements []interface{}\n    var closest_diff float64 =\
    \ numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n     \
    \   diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff {\n  \
    \          closest_diff = diff\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp0a4f_vam_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp0a4f_vam_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp0a4f_vam_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp0a4f_vam_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var closest_diff float64\
    \ = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff {\n\
    \            closest_diff = diff\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpgiui6ey2_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpgiui6ey2_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpgiui6ey2_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpgiui6ey2_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64 = 0.0\n    var distance float64 = 0.0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            distance\
    \ = numbers[j] - numbers[i]\n            if closest_distance == 0.0 || distance\
    \ < closest_distance {\n                closest_distance = distance\n        \
    \        closest_elements = []interface{}{numbers[i], numbers[j]}\n          \
    \  }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp7zj9z3yr_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp7zj9z3yr_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp7zj9z3yr_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp7zj9z3yr_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    closest_elements\
    \ = append(closest_elements, numbers[0])\n    closest_elements = append(closest_elements,\
    \ numbers[1])\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[j] - numbers[i] < closest_elements[1].(float64)\
    \ - closest_elements[0].(float64) {\n                closest_elements[0] = numbers[i]\n\
    \                closest_elements[1] = numbers[j]\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4bj_vnwd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4bj_vnwd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4bj_vnwd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4bj_vnwd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_element float64\n\
    \    var next_element float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n\
    \        current_element = numbers[i]\n        next_element = numbers[i + 1]\n\
    \        current_difference = next_element - current_element\n\n        if i ==\
    \ 0 {\n            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{current_element, next_element}\n        } else if current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{current_element, next_element}\n\
    \        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n   \
    \         if closest_distance == 0 || distance < closest_distance {\n        \
    \        closest_elements = []interface{}{numbers[i], numbers[j]}\n          \
    \      closest_distance = distance\n            }\n        }\n    }\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpblm_ofa6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpblm_ofa6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpblm_ofa6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpblm_ofa6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i\
    \ := 1; i < len(numbers) - 1; i++ {\n        if numbers[i+1] - numbers[i] < closest_difference\
    \ {\n            closest_difference = numbers[i+1] - numbers[i]\n            closest_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index+1])\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp5urxlyv8_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp5urxlyv8_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp5urxlyv8_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp5urxlyv8_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var closest_diff float64\
    \ = 0.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j <\
    \ len(numbers); j++ {\n            if closest_diff == 0.0 || closest_diff > numbers[j]\
    \ - numbers[i] {\n                closest_diff = numbers[j] - numbers[i]\n   \
    \             closest = []interface{}{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp271hxt6z_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp271hxt6z_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp271hxt6z_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp271hxt6z_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i\
    \ := 1; i < len(numbers); i++ {\n        difference := numbers[i] - numbers[i-1]\n\
    \        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index-1])\n    closest_elements =\
    \ append(closest_elements, numbers[closest_index])\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpou4o2ilx_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpou4o2ilx_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpou4o2ilx_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpou4o2ilx_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var smaller_number float64\n    var\
    \ larger_number float64\n\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            difference = numbers[j] - numbers[i]\n\
    \            if difference < 0 {\n                difference = difference * -1\n\
    \            }\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                smaller_number\
    \ = numbers[i]\n                larger_number = numbers[j]\n            }\n  \
    \      }\n    }\n\n    closest_elements = append(closest_elements, smaller_number)\n\
    \    closest_elements = append(closest_elements, larger_number)\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpo58dzprz_test.go:58: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpo58dzprz_test.go:58: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i\
    \ := 1; i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n\
    \        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    for i := 0; i < len(numbers); i++ {\n\
    \        for j := i + 1; j < len(numbers); j++ {\n            difference = numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpert0se3r_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpert0se3r_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpert0se3r_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpert0se3r_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var closest_diff float64\n\
    \    for i, number := range numbers {\n        for j, number2 := range numbers\
    \ {\n            if i != j {\n                diff := number - number2\n     \
    \           if diff < 0 {\n                    diff = -diff\n                }\n\
    \                if closest_diff == 0 || diff < closest_diff {\n             \
    \       closest_diff = diff\n                    closest = []interface{}{number,\
    \ number2}\n                }\n            }\n        }\n    }\n    return closest\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpwewlrovt_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpwewlrovt_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=2) %!s(float64=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64 = 0.0\n    var closest_index int = 0\n    var diff float64 = 0.0\n \
    \   var index int = 0\n\n    for i := 0; i < len(numbers) - 1; i++ {\n       \
    \ diff = numbers[i + 1] - numbers[i]\n        if diff < closest_diff || closest_diff\
    \ == 0.0 {\n            closest_diff = diff\n            closest_index = i\n \
    \       }\n    }\n\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8ltp_5z_test.go:19:9: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    for i := 0; i < len(numbers); i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            diff = numbers[j] -\
    \ numbers[i]\n            if diff < closest_diff || closest_diff == 0 {\n    \
    \            closest_diff = diff\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpz_ho9kau_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpz_ho9kau_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpz_ho9kau_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpz_ho9kau_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64 = 0\n    var diff float64 = 0\n    var first_number float64 = 0\n  \
    \  var second_number float64 = 0\n\n    for i := 0; i < len(numbers); i++ {\n\
    \        for j := i + 1; j < len(numbers); j++ {\n            diff = numbers[j]\
    \ - numbers[i]\n            if closest_diff == 0 || diff < closest_diff {\n  \
    \              closest_diff = diff\n                first_number = numbers[i]\n\
    \                second_number = numbers[j]\n            }\n        }\n    }\n\
    \n    closest_elements = append(closest_elements, first_number, second_number)\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpv2im58hc_test.go:53: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpv2im58hc_test.go:53: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpv2im58hc_test.go:53: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpv2im58hc_test.go:53: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var smallest_difference\
    \ float64\n    smallest_difference = numbers[1] - numbers[0]\n    closest_elements\
    \ = append(closest_elements, numbers[0])\n    closest_elements = append(closest_elements,\
    \ numbers[1])\n    for i := 0; i < len(numbers) - 1; i++ {\n        difference\
    \ := numbers[i + 1] - numbers[i]\n        if difference < smallest_difference\
    \ {\n            smallest_difference = difference\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpq0mp56qn_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpq0mp56qn_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpq0mp56qn_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpq0mp56qn_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    var prev_number float64\n    var number float64\n\
    \    var first_number float64\n\n    for i, number := range numbers {\n      \
    \  if i == 0 {\n            first_number = number\n            prev_number = number\n\
    \            continue\n        }\n        diff = number - prev_number\n      \
    \  if i == 1 {\n            closest_diff = diff\n            closest_elements\
    \ = []interface{}{prev_number, number}\n        } else if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_elements = []interface{}{prev_number,\
    \ number}\n        }\n        prev_number = number\n    }\n    if first_number\
    \ - prev_number < closest_diff {\n        closest_elements = []interface{}{prev_number,\
    \ first_number}\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj2dd40gc_test.go:19:9: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    var current_difference float64 = 0.0\n    var current_smaller_number\
    \ float64 = 0.0\n    var current_larger_number float64 = 0.0\n\n    for i := 0;\
    \ i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n \
    \           current_smaller_number = numbers[i]\n            current_larger_number\
    \ = numbers[j]\n            if current_smaller_number > current_larger_number\
    \ {\n                current_smaller_number = numbers[j]\n                current_larger_number\
    \ = numbers[i]\n            }\n            current_difference = current_larger_number\
    \ - current_smaller_number\n            if closest_difference == 0.0 || current_difference\
    \ < closest_difference {\n                closest_difference = current_difference\n\
    \                closest_elements = []interface{}{current_smaller_number, current_larger_number}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6jdqdrie_test.go:56: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_distance\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n   \
    \         if closest_distance == 0 || distance < closest_distance {\n        \
    \        closest_distance = distance\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_pair\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4wsm1qrk_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4wsm1qrk_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4wsm1qrk_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4wsm1qrk_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var minDiff float64 = numbers[1] - numbers[0]\n    var\
    \ minDiffPair []float64 = []float64{numbers[0], numbers[1]}\n    for i := 0; i\
    \ < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n   \
    \     if diff < minDiff {\n            minDiff = diff\n            minDiffPair\
    \ = []float64{numbers[i], numbers[i + 1]}\n        }\n    }\n    return []interface{}{minDiffPair[0],\
    \ minDiffPair[1]}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvj9s639s_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvj9s639s_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvj9s639s_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvj9s639s_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64 = -1\n    var closest_index1 int = -1\n    var closest_index2 int =\
    \ -1\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            distance := numbers[j] - numbers[i]\n            if closest_distance\
    \ == -1 || distance < closest_distance {\n                closest_distance = distance\n\
    \                closest_index1 = i\n                closest_index2 = j\n    \
    \        }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index1])\n    closest_elements = append(closest_elements, numbers[closest_index2])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpnpivhi8d_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpnpivhi8d_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpnpivhi8d_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpnpivhi8d_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var diff float64\n    var\
    \ smallestDiff float64\n\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            diff = numbers[j] - numbers[i]\n\
    \            if diff < smallestDiff {\n                smallestDiff = diff\n \
    \               closest = []interface{}{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpsdy_g3iw_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpsdy_g3iw_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpsdy_g3iw_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpsdy_g3iw_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpsdy_g3iw_test.go:49: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074392
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i, num1 := range numbers {\n        for _, num2 := range numbers[i+1:]\
    \ {\n            diff := num2 - num1\n            if closest_diff == 0 || diff\
    \ < closest_diff {\n                closest_elements = []interface{}{num1, num2}\n\
    \                closest_diff = diff\n            }\n        }\n    }\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp171ydzr4_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp171ydzr4_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp171ydzr4_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp171ydzr4_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074392
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0.0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp5xjt29ms_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp5xjt29ms_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp5xjt29ms_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp5xjt29ms_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074392
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var smallest_difference\
    \ float64\n    smallest_difference = numbers[1] - numbers[0]\n    closest_elements\
    \ = append(closest_elements, numbers[0])\n    closest_elements = append(closest_elements,\
    \ numbers[1])\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[j] - numbers[i] < smallest_difference\
    \ {\n                smallest_difference = numbers[j] - numbers[i]\n         \
    \       closest_elements[0] = numbers[i]\n                closest_elements[1]\
    \ = numbers[j]\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpuh10a761_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpuh10a761_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpuh10a761_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpuh10a761_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074392
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_elements []interface{}\n\
    \n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            current_difference = numbers[j] - numbers[i]\n          \
    \  if closest_difference == 0 || current_difference < closest_difference {\n \
    \               closest_difference = current_difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6yaah2m_test.go:18:9: current_elements declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074392
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0\n    var closest_index int = 0\n    var current_difference float64\
    \ = 0\n    var current_index int = 0\n\n    for i := 0; i < len(numbers); i++\
    \ {\n        current_index = i\n        current_difference = numbers[i] - numbers[i\
    \ + 1]\n        if current_difference < closest_difference {\n            closest_difference\
    \ = current_difference\n            closest_index = current_index\n        }\n\
    \    }\n\n    closest_elements = append(closest_elements, numbers[closest_index],\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\npanic: runtime error: index\
    \ out of range [6] with length 6 [recovered]\n\tpanic: runtime error: index out\
    \ of range [6] with length 6\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000156000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000156000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.find_closest_elements(...)\n\t/tmp/tmpg9fwrygs_test.go:23\n\
    command-line-arguments_test.TestFind_Closest_Elements(0x0?)\n\t/tmp/tmpg9fwrygs_test.go:41\
    \ +0xd73\ntesting.tRunner(0xc000103380, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074392
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074392
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_elements []interface{}\n\
    \n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            current_difference = numbers[j] - numbers[i]\n          \
    \  if closest_difference == 0 || current_difference < closest_difference {\n \
    \               closest_difference = current_difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6yaah2m_test.go:18:9: current_elements declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074392
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_pair []interface{}\n    var closest_diff float64\n   \
    \ for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_pair\
    \ == nil || diff < closest_diff {\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4fy2jzpr_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4fy2jzpr_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4fy2jzpr_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4fy2jzpr_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074392
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_pair_distance\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n \
    \           if closest_pair_distance == 0 || distance < closest_pair_distance\
    \ {\n                closest_pair_distance = distance\n                closest_pair\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n\
    \  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqp_cn6f7_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqp_cn6f7_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqp_cn6f7_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqp_cn6f7_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_distance\
    \ float64 = 0.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            if closest_distance == 0.0 || closest_distance\
    \ > numbers[j] - numbers[i] {\n                closest_distance = numbers[j] -\
    \ numbers[i]\n                closest_pair = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptbx36xaz_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptbx36xaz_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptbx36xaz_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptbx36xaz_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var min_diff float64\
    \ = numbers[1] - numbers[0]\n    var min_diff_index int = 0\n    for i := 1; i\
    \ < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n   \
    \     if diff < min_diff {\n            min_diff = diff\n            min_diff_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[min_diff_index])\n\
    \    closest_elements = append(closest_elements, numbers[min_diff_index + 1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpb6d66r7x_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpb6d66r7x_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpb6d66r7x_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpb6d66r7x_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_elements_indexes []int =\
    \ []int{0, 1}\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements_indexes = []int{i, j}\n     \
    \       }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[0]])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[1]])\n\n    return closest_elements\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpbtxt3ec0_test.go:52: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpbtxt3ec0_test.go:52: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpbtxt3ec0_test.go:52: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpbtxt3ec0_test.go:52: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i, number := range numbers {\n        if i == 0 {\n       \
    \     closest_difference = number - numbers[i+1]\n            closest_elements\
    \ = []interface{}{number, numbers[i+1]}\n        } else if i == len(numbers) -\
    \ 1 {\n            if closest_difference > numbers[i-1] - number {\n         \
    \       closest_difference = numbers[i-1] - number\n                closest_elements\
    \ = []interface{}{numbers[i-1], number}\n            }\n        } else {\n   \
    \         if closest_difference > number - numbers[i+1] {\n                closest_difference\
    \ = number - numbers[i+1]\n                closest_elements = []interface{}{number,\
    \ numbers[i+1]}\n            }\n            if closest_difference > numbers[i-1]\
    \ - number {\n                closest_difference = numbers[i-1] - number\n   \
    \             closest_elements = []interface{}{numbers[i-1], number}\n       \
    \     }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp_4mivvye_test.go:57: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=2) %!s(float64=3.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp_4mivvye_test.go:57: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=2) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp_4mivvye_test.go:57: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp_4mivvye_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmp_4mivvye_test.go:57: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=2.2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 999999.0\n    for i := 0; i < len(numbers); i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            if numbers[j] - numbers[i] < closest_difference\
    \ {\n                closest_difference = numbers[j] - numbers[i]\n          \
    \      closest_elements = []interface{}{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpdtizwody_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpdtizwody_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpdtizwody_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpdtizwody_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_closest_elements\
    \ []interface{}\n\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            current_difference = numbers[j] -\
    \ numbers[i]\n            if closest_difference == 0 || current_difference < closest_difference\
    \ {\n                closest_difference = current_difference\n               \
    \ current_closest_elements = []interface{}{numbers[i], numbers[j]}\n         \
    \   }\n        }\n    }\n\n    closest_elements = current_closest_elements\n\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpxooffmka_test.go:52: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpxooffmka_test.go:52: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpxooffmka_test.go:52: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpxooffmka_test.go:52: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i\
    \ := 1; i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n\
    \        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpbzjnupon_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var diff float64\n    var\
    \ diff_min float64 = numbers[1] - numbers[0]\n    var i int\n    var j int\n \
    \   for i = 0; i < len(numbers) - 1; i++ {\n        for j = i + 1; j < len(numbers);\
    \ j++ {\n            diff = numbers[j] - numbers[i]\n            if diff < diff_min\
    \ {\n                diff_min = diff\n                closest = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest\n}\n\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp1jkw34g4_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp1jkw34g4_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp1jkw34g4_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp1jkw34g4_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    var i int\n    var j int\n\n    for i = 0;\
    \ i < len(numbers) - 1; i++ {\n        for j = i + 1; j < len(numbers); j++ {\n\
    \            diff = numbers[j] - numbers[i]\n            if closest_diff == 0.0\
    \ || diff < closest_diff {\n                closest_diff = diff\n            \
    \    closest_elements = []interface{}{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpyr6st_54_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpyr6st_54_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpyr6st_54_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpyr6st_54_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64\n    var distance float64\n    var i int\n    var j int\n\n    closest_distance\
    \ = numbers[1] - numbers[0]\n    closest_elements = []interface{}{numbers[0],\
    \ numbers[1]}\n\n    for i = 0; i < len(numbers); i++ {\n        for j = i + 1;\
    \ j < len(numbers); j++ {\n            distance = numbers[j] - numbers[i]\n  \
    \          if distance < closest_distance {\n                closest_distance\
    \ = distance\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp8u18ks_u_test.go:54: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8u18ks_u_test.go:54: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8u18ks_u_test.go:54: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8u18ks_u_test.go:54: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_diff float64\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_pair\
    \ == nil || diff < closest_diff {\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6a07ab0r_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6a07ab0r_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6a07ab0r_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6a07ab0r_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0.0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp645i14jd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp645i14jd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp645i14jd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp645i14jd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    var diff_abs float64\n    var first_number\
    \ float64\n    var second_number float64\n\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        first_number = numbers[i]\n        second_number = numbers[i\
    \ + 1]\n        diff = second_number - first_number\n        diff_abs = diff\n\
    \        if diff < 0 {\n            diff_abs = -diff\n        }\n        if i\
    \ == 0 || diff_abs < closest_diff {\n            closest_diff = diff_abs\n   \
    \         closest_elements = []interface{}{first_number, second_number}\n    \
    \    }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8lp_97b4_test.go:56: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8lp_97b4_test.go:56: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8lp_97b4_test.go:56: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    var closest_pair []float64 = []float64{numbers[0], numbers[1]}\n    for i\
    \ := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_pair = []float64{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n    return []interface{}{closest_pair[0], closest_pair[1]}\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp7bgic7xq_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp7bgic7xq_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp7bgic7xq_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp7bgic7xq_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    var closest_elements []interface{} = []interface{}{numbers[0], numbers[1]}\n\
    \    var difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     difference = numbers[i + 1] - numbers[i]\n        if difference < closest_difference\
    \ {\n            closest_difference = difference\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpltw6yycg_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpltw6yycg_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpltw6yycg_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpltw6yycg_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074393
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64 = -1\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == -1 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpgmo7e6xx_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpgmo7e6xx_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpgmo7e6xx_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpgmo7e6xx_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074394
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i, number := range numbers {\n        if i == 0 {\n       \
    \     closest_elements = []interface{}{number, number}\n            closest_diff\
    \ = numbers[i+1] - number\n        } else if i == len(numbers) - 1 {\n       \
    \     break\n        } else {\n            diff := numbers[i+1] - number\n   \
    \         if diff < closest_diff {\n                closest_elements = []interface{}{number,\
    \ numbers[i+1]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpifnnv2vk_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var minDiff float64 = numbers[1] - numbers[0]\n    var\
    \ minDiffIndex int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff\
    \ := numbers[i + 1] - numbers[i]\n        if diff < minDiff {\n            minDiff\
    \ = diff\n            minDiffIndex = i\n        }\n    }\n    return []interface{}{numbers[minDiffIndex],\
    \ numbers[minDiffIndex + 1]}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpccn7h50l_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n       \
    \     if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var smallest_number float64\n    var\
    \ largest_number float64\n\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            difference = numbers[j] - numbers[i]\n\
    \            if difference < 0 {\n                difference = difference * -1\n\
    \            }\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                smallest_number\
    \ = numbers[i]\n                largest_number = numbers[j]\n            }\n \
    \       }\n    }\n\n    closest_elements = append(closest_elements, smallest_number)\n\
    \    closest_elements = append(closest_elements, largest_number)\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpldmqm1bl_test.go:58: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpldmqm1bl_test.go:58: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074394
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    var closest_elements_indexes []int\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if diff < closest_diff {\n            closest_diff = diff\n\
    \            closest_elements_indexes = []int{i, i + 1}\n        }\n    }\n  \
    \  for _, i := range closest_elements_indexes {\n        closest_elements = append(closest_elements,\
    \ numbers[i])\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp2wy44tr0_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp2wy44tr0_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp2wy44tr0_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp2wy44tr0_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074394
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_distance\
    \ float64\n    var distance float64\n    var i int\n    var j int\n\n    for i\
    \ = 0; i < len(numbers); i++ {\n        for j = i + 1; j < len(numbers); j++ {\n\
    \            distance = numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0 || distance < closest_distance {\n                closest_distance = distance\n\
    \                closest_pair = []interface{}{numbers[i], numbers[j]}\n      \
    \      }\n        }\n    }\n\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpipxnqf2g_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpipxnqf2g_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpipxnqf2g_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpipxnqf2g_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074394
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n \
    \           if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i\
    \ := 1; i < len(numbers) - 1; i++ {\n        if numbers[i + 1] - numbers[i] <\
    \ closest_difference {\n            closest_difference = numbers[i + 1] - numbers[i]\n\
    \            closest_index = i\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index])\n    closest_elements = append(closest_elements, numbers[closest_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpj55b277__test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpj55b277__test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpj55b277__test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpj55b277__test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074392
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptp3721nu_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074392
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    var closest_elements []interface{} = []interface{}{numbers[0], numbers[1]}\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6ipkgoay_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6ipkgoay_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6ipkgoay_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6ipkgoay_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var smallest_difference\
    \ float64\n    var smallest_difference_index int\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if i\
    \ == 0 || difference < smallest_difference {\n            smallest_difference\
    \ = difference\n            smallest_difference_index = i\n        }\n    }\n\
    \    closest_elements = append(closest_elements, numbers[smallest_difference_index])\n\
    \    closest_elements = append(closest_elements, numbers[smallest_difference_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpufqhy_4l_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpufqhy_4l_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpufqhy_4l_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpufqhy_4l_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_diff float64\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_pair\
    \ == nil || diff < closest_diff {\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp3x17dstt_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp3x17dstt_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp3x17dstt_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp3x17dstt_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = -1\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == -1 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp8bl4f3jk_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8bl4f3jk_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8bl4f3jk_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8bl4f3jk_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var i int\n    var j int\n\n    for\
    \ i = 0; i < len(numbers) - 1; i++ {\n        for j = i + 1; j < len(numbers);\
    \ j++ {\n            difference = numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference || closest_difference == 0 {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpd9trqycp_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpd9trqycp_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpd9trqycp_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpd9trqycp_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var closest_distance float64\
    \ = -1.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j <\
    \ len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n     \
    \       if closest_distance == -1.0 || distance < closest_distance {\n       \
    \         closest_distance = distance\n                closest = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest\n}\n\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpra7q_7bi_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpra7q_7bi_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpra7q_7bi_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpra7q_7bi_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_elements_index int = 0\n\
    \    for i := 1; i < len(numbers) - 1; i++ {\n        difference := numbers[i\
    \ + 1] - numbers[i]\n        if difference < closest_difference {\n          \
    \  closest_difference = difference\n            closest_elements_index = i\n \
    \       }\n    }\n    closest_elements = append(closest_elements, numbers[closest_elements_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4a0z7yg__test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4a0z7yg__test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4a0z7yg__test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4a0z7yg__test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_pair []float64 = []float64{numbers[0],\
    \ numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_pair = []float64{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ closest_pair[0], closest_pair[1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpxuoomehp_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpxuoomehp_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpxuoomehp_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpxuoomehp_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var smaller_number float64\n    var\
    \ larger_number float64\n\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            difference = numbers[j] - numbers[i]\n\
    \            if difference < 0 {\n                difference = -difference\n \
    \           }\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                if numbers[i]\
    \ < numbers[j] {\n                    smaller_number = numbers[i]\n          \
    \          larger_number = numbers[j]\n                } else {\n            \
    \        smaller_number = numbers[j]\n                    larger_number = numbers[i]\n\
    \                }\n            }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ smaller_number)\n    closest_elements = append(closest_elements, larger_number)\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpp23rwpfu_test.go:61: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var smaller_number float64\n    var\
    \ larger_number float64\n\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            difference = numbers[j] - numbers[i]\n\
    \            if difference < 0 {\n                difference = difference * -1\n\
    \            }\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                smaller_number\
    \ = numbers[i]\n                larger_number = numbers[j]\n            }\n  \
    \      }\n    }\n\n    closest_elements = append(closest_elements, smaller_number)\n\
    \    closest_elements = append(closest_elements, larger_number)\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpo58dzprz_test.go:58: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpo58dzprz_test.go:58: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64 = 0.0\n    var current_distance float64 = 0.0\n    var current_elements\
    \ []interface{}\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        current_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        current_distance = numbers[i\
    \ + 1] - numbers[i]\n        if closest_distance == 0.0 || current_distance <\
    \ closest_distance {\n            closest_distance = current_distance\n      \
    \      closest_elements = current_elements\n        }\n    }\n\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpdngngtgf_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpdngngtgf_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpdngngtgf_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpdngngtgf_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var smallest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var smallest_difference_elements []float64\
    \ = []float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference :=\
    \ numbers[j] - numbers[i]\n            if difference < smallest_difference {\n\
    \                smallest_difference = difference\n                smallest_difference_elements\
    \ = []float64{numbers[i], numbers[j]}\n            }\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, smallest_difference_elements[0])\n    closest_elements\
    \ = append(closest_elements, smallest_difference_elements[1])\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpfhn0sznb_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpfhn0sznb_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpfhn0sznb_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpfhn0sznb_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var smallestDifference float64\
    \ = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     difference := numbers[i + 1] - numbers[i]\n        if difference < smallestDifference\
    \ {\n            smallestDifference = difference\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp1y7cbu5l_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp1y7cbu5l_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp1y7cbu5l_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp1y7cbu5l_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_distance\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n \
    \           if closest_distance == 0 || distance < closest_distance {\n      \
    \          closest_distance = distance\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_pair\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmps0zmv9bh_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmps0zmv9bh_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmps0zmv9bh_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmps0zmv9bh_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_difference float64\n    var closest_numbers\
    \ []interface{}\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_numbers\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_numbers\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp30mjtkrf_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp30mjtkrf_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp30mjtkrf_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp30mjtkrf_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var smallest_number float64\n    var\
    \ largest_number float64\n\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            difference = numbers[j] - numbers[i]\n\
    \            if difference < 0 {\n                difference = -difference\n \
    \           }\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                smallest_number\
    \ = numbers[i]\n                largest_number = numbers[j]\n            }\n \
    \       }\n    }\n\n    closest_elements = append(closest_elements, smallest_number)\n\
    \    closest_elements = append(closest_elements, largest_number)\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpzv60w3h7_test.go:58: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpzv60w3h7_test.go:58: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if diff < closest_diff || closest_diff == 0 {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpp5ys3eqb_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpp5ys3eqb_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpp5ys3eqb_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpp5ys3eqb_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n \
    \           if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_elements_index int = 0\n\
    \    for i := 1; i < len(numbers) - 1; i++ {\n        difference := numbers[i\
    \ + 1] - numbers[i]\n        if difference < closest_difference {\n          \
    \  closest_difference = difference\n            closest_elements_index = i\n \
    \       }\n    }\n    closest_elements = append(closest_elements, numbers[closest_elements_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4a0z7yg__test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4a0z7yg__test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4a0z7yg__test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4a0z7yg__test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i\
    \ := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n\
    \        if diff < closest_diff {\n            closest_diff = diff\n         \
    \   closest_index = i\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index])\n    closest_elements = append(closest_elements, numbers[closest_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpr12z5nz2_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpr12z5nz2_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpr12z5nz2_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpr12z5nz2_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6oqnkxji_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_distance\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n \
    \           if closest_distance == 0 || distance < closest_distance {\n      \
    \          closest_distance = distance\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_pair\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmps0zmv9bh_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmps0zmv9bh_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmps0zmv9bh_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmps0zmv9bh_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_element float64\n\
    \    var previous_element float64\n\n    for index, element := range numbers {\n\
    \        if index == 0 {\n            previous_element = element\n           \
    \ continue\n        }\n\n        current_element = element\n        current_difference\
    \ = current_element - previous_element\n\n        if closest_difference == 0 ||\
    \ current_difference < closest_difference {\n            closest_difference =\
    \ current_difference\n            closest_elements = []interface{}{previous_element,\
    \ current_element}\n        }\n\n        previous_element = current_element\n\
    \    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpplr0wa69_test.go:58: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpplr0wa69_test.go:58: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpplr0wa69_test.go:58: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpplr0wa69_test.go:58: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_element float64\n\
    \    var next_element float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n\
    \        current_element = numbers[i]\n        next_element = numbers[i + 1]\n\
    \        current_difference = next_element - current_element\n\n        if i ==\
    \ 0 {\n            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{current_element, next_element}\n        } else if current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{current_element, next_element}\n\
    \        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64 = -1\n    var diff float64\n    var first_number float64\n    var second_number\
    \ float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        first_number\
    \ = numbers[i]\n        second_number = numbers[i + 1]\n        diff = second_number\
    \ - first_number\n        if closest_diff == -1 || diff < closest_diff {\n   \
    \         closest_diff = diff\n            closest_elements = []interface{}{first_number,\
    \ second_number}\n        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmarlcw0z_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmarlcw0z_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmarlcw0z_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmarlcw0z_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_diff float64\n\
    \    var diff float64\n    for i, number := range numbers {\n        for j, number2\
    \ := range numbers {\n            if i != j {\n                diff = number -\
    \ number2\n                if diff < 0 {\n                    diff = diff * -1\n\
    \                }\n                if closest_diff == 0 || diff < closest_diff\
    \ {\n                    closest_diff = diff\n                    closest_pair\
    \ = []interface{}{number, number2}\n                }\n            }\n       \
    \ }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp3b3emclf_test.go:52: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp3b3emclf_test.go:52: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=2) %!s(float64=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074396
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_pair []float64 = numbers[0:2]\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if numbers[j] - numbers[i] < closest_difference {\n     \
    \           closest_difference = numbers[j] - numbers[i]\n                closest_pair\
    \ = numbers[i:j+1]\n            }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ closest_pair[0], closest_pair[len(closest_pair)-1])\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh_epnqi_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh_epnqi_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh_epnqi_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh_epnqi_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074396
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n \
    \           if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var result []interface{}\n    var minDiff float64\n   \
    \ var minDiffIndex int\n    for i := 0; i < len(numbers) - 1; i++ {\n        diff\
    \ := numbers[i + 1] - numbers[i]\n        if i == 0 || diff < minDiff {\n    \
    \        minDiff = diff\n            minDiffIndex = i\n        }\n    }\n    result\
    \ = append(result, numbers[minDiffIndex])\n    result = append(result, numbers[minDiffIndex\
    \ + 1])\n    return result\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpixts40a0_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpixts40a0_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpixts40a0_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpixts40a0_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074396
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_elements_indexes []int\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        if numbers[i + 1] - numbers[i]\
    \ < closest_difference {\n            closest_difference = numbers[i + 1] - numbers[i]\n\
    \            closest_elements_indexes = []int{i, i + 1}\n        }\n    }\n  \
    \  closest_elements = append(closest_elements, numbers[closest_elements_indexes[0]])\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_indexes[1]])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp630a5nlz_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp630a5nlz_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp630a5nlz_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp630a5nlz_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074396
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_distance\
    \ float64 = 0.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n\
    \            if closest_distance == 0.0 || distance < closest_distance {\n   \
    \             closest_distance = distance\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_pair\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpljq24bif_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpljq24bif_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpljq24bif_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpljq24bif_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var smaller_number float64\n    var\
    \ larger_number float64\n\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            difference = numbers[j] - numbers[i]\n\
    \            if difference < 0 {\n                difference = difference * -1\n\
    \            }\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                smaller_number\
    \ = numbers[i]\n                larger_number = numbers[j]\n            }\n  \
    \      }\n    }\n\n    closest_elements = append(closest_elements, smaller_number)\n\
    \    closest_elements = append(closest_elements, larger_number)\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpo58dzprz_test.go:58: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpo58dzprz_test.go:58: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    var closest_elements_indexes []int\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if diff < closest_diff {\n            closest_diff = diff\n\
    \            closest_elements_indexes = []int{i, i + 1}\n        }\n    }\n  \
    \  closest_elements = append(closest_elements, numbers[closest_elements_indexes[0]])\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_indexes[1]])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpcpyrj_zz_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpcpyrj_zz_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpcpyrj_zz_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpcpyrj_zz_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_elements []interface{}\n\
    \n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            current_difference = numbers[j] - numbers[i]\n          \
    \  if closest_difference == 0 || current_difference < closest_difference {\n \
    \               closest_difference = current_difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6yaah2m_test.go:18:9: current_elements declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074392
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var closest_diff float64\n\
    \    for i, n := range numbers {\n        if i == 0 {\n            closest = []interface{}{n,\
    \ n}\n            closest_diff = numbers[i+1] - n\n        } else if i == len(numbers)\
    \ - 1 {\n            if n - numbers[i-1] < closest_diff {\n                closest\
    \ = []interface{}{numbers[i-1], n}\n            }\n        } else {\n        \
    \    if n - numbers[i-1] < closest_diff {\n                closest = []interface{}{numbers[i-1],\
    \ n}\n                closest_diff = n - numbers[i-1]\n            }\n       \
    \     if numbers[i+1] - n < closest_diff {\n                closest = []interface{}{n,\
    \ numbers[i+1]}\n                closest_diff = numbers[i+1] - n\n           \
    \ }\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpjrky9lgk_test.go:56: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpjrky9lgk_test.go:56: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpjrky9lgk_test.go:56: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpjrky9lgk_test.go:56: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var first_number float64\n    var second_number\
    \ float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        first_number\
    \ = numbers[i]\n        second_number = numbers[i + 1]\n        difference = second_number\
    \ - first_number\n        if closest_difference == 0 || difference < closest_difference\
    \ {\n            closest_difference = difference\n            closest_elements\
    \ = []interface{}{first_number, second_number}\n        }\n    }\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp08y7cylj_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp08y7cylj_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp08y7cylj_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp08y7cylj_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_difference float64\n    var closest_elements\
    \ []interface{}\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpzraokwtq_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpzraokwtq_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpzraokwtq_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpzraokwtq_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var result []interface{}\n    var minDiff float64\n   \
    \ minDiff = numbers[1] - numbers[0]\n    result = append(result, numbers[0])\n\
    \    result = append(result, numbers[1])\n    for i := 0; i < len(numbers) - 1;\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if numbers[j]\
    \ - numbers[i] < minDiff {\n                minDiff = numbers[j] - numbers[i]\n\
    \                result[0] = numbers[i]\n                result[1] = numbers[j]\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp9hcuvv84_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp9hcuvv84_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp9hcuvv84_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp9hcuvv84_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_element float64\n\
    \    var previous_element float64\n\n    // iterate through the list of numbers\n\
    \    for i, v := range numbers {\n        // get the current element\n       \
    \ current_element = v\n\n        // if this is the first element, set the previous\
    \ element to the current element\n        if i == 0 {\n            previous_element\
    \ = current_element\n            continue\n        }\n\n        // get the difference\
    \ between the current and previous elements\n        current_difference = current_element\
    \ - previous_element\n\n        // if this is the first element, set the closest\
    \ difference to the current difference\n        if i == 1 {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{previous_element,\
    \ current_element}\n            continue\n        }\n\n        // if the current\
    \ difference is less than the closest difference, set the closest difference to\
    \ the current\n        // difference and set the closest elements to the current\
    \ and previous elements\n        if current_difference < closest_difference {\n\
    \            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{previous_element, current_element}\n        }\n\n        //\
    \ set the previous element to the current element\n        previous_element =\
    \ current_element\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptd5kqwsv_test.go:73: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptd5kqwsv_test.go:73: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptd5kqwsv_test.go:73: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptd5kqwsv_test.go:73: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmptd5kqwsv_test.go:73: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=3.1) %!s(float64=4.1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    var i int\n    var j int\n\n    for i = 0;\
    \ i < len(numbers); i++ {\n        for j = i + 1; j < len(numbers); j++ {\n  \
    \          diff = numbers[j] - numbers[i]\n            if closest_diff == 0 ||\
    \ diff < closest_diff {\n                closest_diff = diff\n               \
    \ closest_elements = []interface{}{numbers[i], numbers[j]}\n            }\n  \
    \      }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6kizvlk7_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6kizvlk7_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6kizvlk7_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6kizvlk7_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64\n    var distance float64\n    var current_element float64\n    var\
    \ next_element float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n      \
    \  current_element = numbers[i]\n        next_element = numbers[i + 1]\n     \
    \   distance = next_element - current_element\n\n        if i == 0 {\n       \
    \     closest_distance = distance\n            closest_elements = []interface{}{current_element,\
    \ next_element}\n        } else if distance < closest_distance {\n           \
    \ closest_distance = distance\n            closest_elements = []interface{}{current_element,\
    \ next_element}\n        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpy709nn2o_test.go:55: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpy709nn2o_test.go:55: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpy709nn2o_test.go:55: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpy709nn2o_test.go:55: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n \
    \           if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    closest_elements\
    \ = append(closest_elements, numbers[0])\n    closest_elements = append(closest_elements,\
    \ numbers[1])\n    for i := 0; i < len(numbers) - 1; i++ {\n        if numbers[i+1]\
    \ - numbers[i] < closest_elements[1].(float64) - closest_elements[0].(float64)\
    \ {\n            closest_elements[0] = numbers[i]\n            closest_elements[1]\
    \ = numbers[i+1]\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp380eaqp6_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp380eaqp6_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp380eaqp6_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp380eaqp6_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var smallest_difference\
    \ float64\n    var difference float64\n    var smallest_difference_index int\n\
    \    var difference_index int\n    var smallest_difference_index_found bool\n\
    \    var difference_index_found bool\n\n    for i := 0; i < len(numbers); i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference =\
    \ numbers[j] - numbers[i]\n            if difference < 0 {\n                difference\
    \ = -difference\n            }\n            if !smallest_difference_index_found\
    \ || difference < smallest_difference {\n                smallest_difference =\
    \ difference\n                smallest_difference_index = i\n                smallest_difference_index_found\
    \ = true\n            }\n            if !difference_index_found || difference\
    \ > difference {\n                difference = difference\n                difference_index\
    \ = j\n                difference_index_found = true\n            }\n        }\n\
    \    }\n\n    closest_elements = append(closest_elements, numbers[smallest_difference_index])\n\
    \    closest_elements = append(closest_elements, numbers[difference_index])\n\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpnwhljt_x_test.go:65: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=3.9) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpnwhljt_x_test.go:65: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpnwhljt_x_test.go:65: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=2) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpnwhljt_x_test.go:65: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=2.2) %!s(float64=2.2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    closest := []interface{}{numbers[0], numbers[1]}\n    for\
    \ i := 0; i < len(numbers) - 1; i++ {\n        if numbers[i+1] - numbers[i] <\
    \ closest[1].(float64) - closest[0].(float64) {\n            closest = []interface{}{numbers[i],\
    \ numbers[i+1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp9wtj9ru4_test.go:41: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp9wtj9ru4_test.go:41: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp9wtj9ru4_test.go:41: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp9wtj9ru4_test.go:41: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n       \
    \     if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpd9h883ln_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i, number := range numbers {\n        if i == 0 {\n       \
    \     closest_difference = number - numbers[i+1]\n            closest_elements\
    \ = []interface{}{number, numbers[i+1]}\n        } else if i == len(numbers) -\
    \ 1 {\n            break\n        } else {\n            difference := number -\
    \ numbers[i+1]\n            if difference < 0 {\n                difference =\
    \ difference * -1\n            }\n            if difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{number, numbers[i+1]}\n            }\n        }\n    }\n   \
    \ return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n\
    \  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpedaeh2cx_test.go:54: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpedaeh2cx_test.go:54: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpedaeh2cx_test.go:54: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpedaeh2cx_test.go:54: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpedaeh2cx_test.go:54: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=2.2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64\n    var distance float64\n    var i int\n    var j int\n\n    for i\
    \ = 0; i < len(numbers) - 1; i++ {\n        for j = i + 1; j < len(numbers); j++\
    \ {\n            distance = numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0 || distance < closest_distance {\n                closest_distance = distance\n\
    \                closest_elements = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpwtonb6yn_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpwtonb6yn_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpwtonb6yn_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpwtonb6yn_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var closest_diff float64\
    \ = numbers[1] - numbers[0]\n    var closest_pair_index int = 0\n    for i :=\
    \ 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n\
    \        if diff < closest_diff {\n            closest_diff = diff\n         \
    \   closest_pair_index = i\n        }\n    }\n    closest_pair = append(closest_pair,\
    \ numbers[closest_pair_index])\n    closest_pair = append(closest_pair, numbers[closest_pair_index\
    \ + 1])\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp0y9u8ghg_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp0y9u8ghg_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp0y9u8ghg_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp0y9u8ghg_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n \
    \           if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8eyygqc1_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074395
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_elements_indexes []int =\
    \ []int{0, 1}\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            if difference := numbers[j] - numbers[i];\
    \ difference < closest_difference {\n                closest_difference = difference\n\
    \                closest_elements_indexes = []int{i, j}\n            }\n     \
    \   }\n    }\n\n    closest_elements = append(closest_elements, numbers[closest_elements_indexes[0]])\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_indexes[1]])\n\
    \n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpbklxt7en_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpbklxt7en_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpbklxt7en_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpbklxt7en_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64 = -1.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if closest_distance == -1.0 || closest_distance\
    \ > numbers[j] - numbers[i] {\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_distance = numbers[j] - numbers[i]\n  \
    \          }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpryyd7425_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpryyd7425_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpryyd7425_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpryyd7425_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_pair []interface{}\n    var smallest_difference\
    \ float64\n    smallest_difference = numbers[1] - numbers[0]\n    closest_pair\
    \ = []interface{}{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if numbers[j]\
    \ - numbers[i] < smallest_difference {\n                smallest_difference =\
    \ numbers[j] - numbers[i]\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_pair\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpu369jqyw_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpu369jqyw_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpu369jqyw_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpu369jqyw_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    var i int\n    var j int\n\n    for i = 0;\
    \ i < len(numbers) - 1; i++ {\n        for j = i + 1; j < len(numbers); j++ {\n\
    \            diff = numbers[j] - numbers[i]\n            if closest_diff == 0\
    \ || diff < closest_diff {\n                closest_diff = diff\n            \
    \    closest_elements = []interface{}{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpohueydqf_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpohueydqf_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpohueydqf_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpohueydqf_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_element float64\n\
    \    var previous_element float64\n\n    for i, _ := range numbers {\n       \
    \ current_element = numbers[i]\n        if i == 0 {\n            previous_element\
    \ = current_element\n            continue\n        }\n        current_difference\
    \ = current_element - previous_element\n        if i == 1 {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{previous_element,\
    \ current_element}\n        } else if current_difference < closest_difference\
    \ {\n            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{previous_element, current_element}\n        }\n        previous_element\
    \ = current_element\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpasz5p1qb_test.go:57: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpasz5p1qb_test.go:57: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpasz5p1qb_test.go:57: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpasz5p1qb_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64\n    var distance float64\n    var smaller_number float64\n    var larger_number\
    \ float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            distance = numbers[j] - numbers[i]\n\
    \            if distance < 0 {\n                distance = -distance\n       \
    \     }\n            if closest_distance == 0 || distance < closest_distance {\n\
    \                closest_distance = distance\n                smaller_number =\
    \ numbers[i]\n                larger_number = numbers[j]\n            }\n    \
    \    }\n    }\n\n    closest_elements = append(closest_elements, smaller_number)\n\
    \    closest_elements = append(closest_elements, larger_number)\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpdyukadyk_test.go:58: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpdyukadyk_test.go:58: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvzrqsdhd_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0\n    var current_difference float64 = 0\n    var current_elements\
    \ []interface{}\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        current_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        current_difference = numbers[i\
    \ + 1] - numbers[i]\n        if closest_difference == 0 || current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = current_elements\n        }\n    }\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpnphcx7ei_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpnphcx7ei_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpnphcx7ei_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpnphcx7ei_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    var number_1 float64\n    var number_2 float64\n\
    \n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            number_1 = numbers[i]\n            number_2 = numbers[j]\n\
    \            diff = number_2 - number_1\n            if diff < 0 {\n         \
    \       diff = diff * -1\n            }\n            if diff < closest_diff ||\
    \ closest_diff == 0 {\n                closest_diff = diff\n                closest_elements\
    \ = []interface{}{number_1, number_2}\n            }\n        }\n    }\n\n   \
    \ return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n\
    \  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4bh6ibcr_test.go:56: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4bh6ibcr_test.go:56: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074398
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_element float64\n\
    \    var next_element float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n\
    \        current_element = numbers[i]\n        next_element = numbers[i + 1]\n\
    \        current_difference = next_element - current_element\n\n        if i ==\
    \ 0 {\n            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{current_element, next_element}\n        } else if current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{current_element, next_element}\n\
    \        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpf6wa7_zu_test.go:55: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_pair []float64 = numbers[0:2]\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_pair = numbers[i:j+1]\n            }\n        }\n    }\n\
    \    closest_elements = append(closest_elements, closest_pair[0], closest_pair[len(closest_pair)-1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpi_y0hobg_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpi_y0hobg_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpi_y0hobg_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpi_y0hobg_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074398
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var minDiff float64 = numbers[1] - numbers[0]\n    var\
    \ minDiffIndex int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        if\
    \ numbers[i+1] - numbers[i] < minDiff {\n            minDiff = numbers[i+1] -\
    \ numbers[i]\n            minDiffIndex = i\n        }\n    }\n    return []interface{}{numbers[minDiffIndex],\
    \ numbers[minDiffIndex+1]}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp7zsj3c6a_test.go:43: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp7zsj3c6a_test.go:43: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp7zsj3c6a_test.go:43: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp7zsj3c6a_test.go:43: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074398
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_distance\
    \ float64 = 0.0\n    var distance float64 = 0.0\n    var first_number float64\
    \ = 0.0\n    var second_number float64 = 0.0\n\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            distance\
    \ = numbers[j] - numbers[i]\n            if closest_distance == 0.0 || distance\
    \ < closest_distance {\n                closest_distance = distance\n        \
    \        first_number = numbers[i]\n                second_number = numbers[j]\n\
    \            }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ first_number, second_number)\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpgcds9h75_test.go:53: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpgcds9h75_test.go:53: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpgcds9h75_test.go:53: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpgcds9h75_test.go:53: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074398
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var minDiff float64\n  \
    \  minDiff = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < minDiff {\n\
    \            minDiff = diff\n            closest = []interface{}{numbers[i], numbers[i\
    \ + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp13ycct0h_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp13ycct0h_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp13ycct0h_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp13ycct0h_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074398
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var smaller_number float64\n    var\
    \ larger_number float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n     \
    \   for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] > numbers[j]\
    \ {\n                smaller_number = numbers[j]\n                larger_number\
    \ = numbers[i]\n            } else {\n                smaller_number = numbers[i]\n\
    \                larger_number = numbers[j]\n            }\n            difference\
    \ = larger_number - smaller_number\n            if closest_difference == 0 ||\
    \ difference < closest_difference {\n                closest_difference = difference\n\
    \                closest_elements = []interface{}{smaller_number, larger_number}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmphqfetdrx_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074398
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var closest_diff float64\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_diff\
    \ == 0 || diff < closest_diff {\n                closest_diff = diff\n       \
    \         closest = []interface{}{numbers[i], numbers[j]}\n            }\n   \
    \     }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpicpi5xp9_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    var diff_found bool\n\n    for i := 0; i\
    \ < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n   \
    \         diff = numbers[j] - numbers[i]\n            if diff_found {\n      \
    \          if diff < closest_diff {\n                    closest_diff = diff\n\
    \                    closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \                }\n            } else {\n                closest_diff = diff\n\
    \                closest_elements = []interface{}{numbers[i], numbers[j]}\n  \
    \              diff_found = true\n            }\n        }\n    }\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp2aa8s5_2_test.go:56: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp2aa8s5_2_test.go:56: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp2aa8s5_2_test.go:56: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp2aa8s5_2_test.go:56: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074398
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var length int = len(numbers)\n   \
    \ var i int\n    var j int\n\n    for i = 0; i < length; i++ {\n        for j\
    \ = i + 1; j < length; j++ {\n            difference = numbers[j] - numbers[i]\n\
    \            if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqqfy0se3_test.go:52: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqqfy0se3_test.go:52: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqqfy0se3_test.go:52: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqqfy0se3_test.go:52: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074398
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = -1\n    for i := 0; i < len(numbers); i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if closest_difference == -1 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp1_8tpiny_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp1_8tpiny_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp1_8tpiny_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp1_8tpiny_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074398
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunc find_closest_elements(numbers []float64)\
    \ []interface{} {\n    var closest []interface{}\n    var diff float64\n    var\
    \ minDiff float64\n\n    for i := 0; i < len(numbers); i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            diff = numbers[j] - numbers[i]\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     closest = []interface{}{numbers[i], numbers[j]}\n            }\n       \
    \ }\n    }\n\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmjtjj4u0_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmjtjj4u0_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmjtjj4u0_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmjtjj4u0_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpmjtjj4u0_test.go:49: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074398
