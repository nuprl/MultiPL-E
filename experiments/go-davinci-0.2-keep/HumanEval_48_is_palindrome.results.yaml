language: go_test.go
name: HumanEval_48_is_palindrome
results:
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if text[0] != text[len(text)-1] {\n   \
    \     return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if text[0] != text[len(text)-1] {\n   \
    \     return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if text[0] != text[len(text)-1] {\n   \
    \     return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    for i := 0; i < len(text)\
    \ / 2; i++ {\n        if text[i] != text[len(text) - i - 1] {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if len(text) == 2 {\n        return text[0]\
    \ == text[1]\n    }\n\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if len(text) == 2 {\n        return text[0]\
    \ == text[1]\n    }\n\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    return text == reverse(text)\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbof02o5y_test.go:18:20: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] != text[len(text)-1] {\n        return\
    \ false\n    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if text[0] != text[len(text)-1] {\n   \
    \     return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if len(text) == 2 {\n        return text[0]\
    \ == text[1]\n    }\n\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if len(text) == 2 {\n        return text[0]\
    \ == text[1]\n    }\n\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if text[0] != text[len(text)-1] {\n   \
    \     return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if text[0] != text[len(text)-1] {\n   \
    \     return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    for i := 0; i < len(text)\
    \ / 2; i++ {\n        if text[i] != text[len(text) - i - 1] {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if text[0] != text[len(text)-1] {\n   \
    \     return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    for i := 0; i < len(text)\
    \ / 2; i++ {\n        if text[i] != text[len(text) - i - 1] {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if len(text) == 2 {\n        return text[0]\
    \ == text[1]\n    }\n\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] != text[len(text)-1] {\n        return\
    \ false\n    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if text[0] != text[len(text)-1] {\n   \
    \     return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if text[0] != text[len(text)-1] {\n   \
    \     return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] != text[len(text)-1] {\n        return\
    \ false\n    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] != text[len(text)-1] {\n        return\
    \ false\n    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n\n    if len(text) == 1\
    \ {\n        return true\n    }\n\n    if text[0] != text[len(text)-1] {\n   \
    \     return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    var length = len(text)\n    var half = length / 2\n    for i := 0; i < half;\
    \ i++ {\n        if text[i] != text[length - i - 1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if text[0] == text[len(text)-1] {\n        return\
    \ is_palindrome(text[1:len(text)-1])\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if len(text) == 1 {\n\
    \        return true\n    }\n    if len(text) == 2 {\n        return text[0] ==\
    \ text[1]\n    }\n    if text[0] != text[len(text)-1] {\n        return false\n\
    \    }\n    return is_palindrome(text[1:len(text)-1])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
    // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n\
    // >>> is_palindrome('zbcd')\n// False\nfunc is_palindrome(text string) bool {\n\
    \    if len(text) <= 1 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073703
