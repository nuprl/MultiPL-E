language: go_test.go
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var abs_diff float64 = 0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += abs(numbers[i]\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg03bj2y7_test.go:29:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    // Calculate the mean of the dataset\n    for i = 0; i < n; i++ {\n    \
    \    sum += numbers[i]\n    }\n    mean = sum / float64(n)\n\n    // Calculate\
    \ the absolute difference between each element and the mean\n    for i = 0; i\
    \ < n; i++ {\n        abs_diff += numbers[i] - mean\n    }\n    mad = abs_diff\
    \ / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpmlbvwifz_test.go:53: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpmlbvwifz_test.go:53:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpmlbvwifz_test.go:53: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the input numbers\n    mean := mean(numbers)\n\
    \    // Calculate the absolute difference between each number and the mean\n \
    \   // and store them in a list\n    absolute_differences := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        absolute_differences[i] = absolute_difference(number,\
    \ mean)\n    }\n    // Calculate the mean of the absolute differences\n    return\
    \ mean(absolute_differences)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpogz1x_ws_test.go:17:13: undefined: mean

    /tmp/tmpogz1x_ws_test.go:22:35: undefined: absolute_difference

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_dev float64 = 0.0\n    var abs_dev_sum float64 = 0.0\n  \
    \  var abs_dev_mean float64 = 0.0\n\n    for _, number := range numbers {\n  \
    \      sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    for\
    \ _, number := range numbers {\n        abs_dev = number - mean\n        if abs_dev\
    \ < 0 {\n            abs_dev = -abs_dev\n        }\n        abs_dev_sum += abs_dev\n\
    \    }\n    abs_dev_mean = abs_dev_sum / float64(len(numbers))\n\n    return abs_dev_mean\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvgmk_m7r_test.go:18:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var abs_deviation\
    \ float64 = 0.0\n    var mean_abs_deviation float64 = 0.0\n\n    for _, number\
    \ := range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        abs_deviation += abs(number -\
    \ mean)\n    }\n    mean_abs_deviation = abs_deviation / float64(len(numbers))\n\
    \n    return mean_abs_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppts_qi_y_test.go:27:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for i = 0; i\
    \ < n; i++ {\n        abs_diff = numbers[i] - mean\n        if abs_diff < 0 {\n\
    \            abs_diff = -abs_diff\n        }\n        mad += abs_diff\n    }\n\
    \    mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the input numbers\n    mean := 0.0\n    for\
    \ _, number := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    // and sum them up\n    sum_absolute_differences := 0.0\n    for _, number\
    \ := range numbers {\n        sum_absolute_differences += math.Abs(number - mean)\n\
    \    }\n\n    // Return the mean of the absolute differences\n    return sum_absolute_differences\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa262ka0m_test.go:27:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var diff float64 = 0\n    var abs_diff float64 = 0\n    var abs_diffs\
    \ []float64 = make([]float64, len(numbers))\n\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n\
    \    for _, number := range numbers {\n        diff = number - mean\n        abs_diff\
    \ = diff\n        if diff < 0 {\n            abs_diff = -diff\n        }\n   \
    \     abs_diffs = append(abs_diffs, abs_diff)\n    }\n\n    for _, abs_diff :=\
    \ range abs_diffs {\n        mad += abs_diff\n    }\n    mad = mad / float64(len(numbers))\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += math.Abs(numbers[i]\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu4mm81f_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += numbers[i]\
    \ - mean\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp79z63p0d_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp79z63p0d_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp79z63p0d_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var deviation\
    \ float64 = 0.0\n    var abs_deviation float64 = 0.0\n    var abs_deviations []float64\
    \ = make([]float64, len(numbers))\n    var mad float64 = 0.0\n\n    for _, number\
    \ := range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        deviation = number - mean\n  \
    \      abs_deviation = deviation\n        if deviation < 0 {\n            abs_deviation\
    \ = -deviation\n        }\n        abs_deviations = append(abs_deviations, abs_deviation)\n\
    \    }\n\n    for _, abs_deviation := range abs_deviations {\n        mad += abs_deviation\n\
    \    }\n    mad = mad / float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var abs_diff_sum float64 = 0.0\n\
    \    var abs_diff_mean float64 = 0.0\n\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    for\
    \ _, number := range numbers {\n        abs_diff = number - mean\n        if abs_diff\
    \ < 0 {\n            abs_diff = -abs_diff\n        }\n        abs_diff_sum +=\
    \ abs_diff\n    }\n    abs_diff_mean = abs_diff_sum / float64(len(numbers))\n\n\
    \    return abs_diff_mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5rpip78n_test.go:18:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    var sum float64 = 0.0\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\
    \n    // Calculate absolute difference from mean\n    var sum_of_absolute_differences\
    \ float64 = 0.0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += float64(abs(number - mean))\n    }\n\n    // Return mean absolute deviation\n\
    \    return sum_of_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpve4jyt_k_test.go:26:48: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the dataset\n    var mean float64 = 0.0\n  \
    \  for _, number := range numbers {\n        mean += number\n    }\n    mean /=\
    \ float64(len(numbers))\n\n    // Calculate the absolute difference between each\
    \ element and the mean\n    var absolute_differences []float64 = make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        absolute_differences[i]\
    \ = number - mean\n        if absolute_differences[i] < 0 {\n            absolute_differences[i]\
    \ *= -1\n        }\n    }\n\n    // Calculate the mean of the absolute differences\n\
    \    var mean_absolute_deviation float64 = 0.0\n    for _, absolute_difference\
    \ := range absolute_differences {\n        mean_absolute_deviation += absolute_difference\n\
    \    }\n    mean_absolute_deviation /= float64(len(absolute_differences))\n\n\
    \    return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    //\
    \ Calculate the mean of the input numbers\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(n)\n\n    // Calculate\
    \ the absolute difference between each number and the mean\n    for _, number\
    \ := range numbers {\n        abs_diff += math.Abs(number - mean)\n    }\n\n \
    \   // Return the average absolute difference\n    mad = abs_diff / float64(n)\n\
    \    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfv3fbn7u_test.go:30:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var count float64 = 0.0\n\n    for _,\
    \ number := range numbers {\n        sum += number\n        count += 1.0\n   \
    \ }\n    mean = sum / count\n\n    for _, number := range numbers {\n        diff\
    \ += number - mean\n    }\n    mad = diff / count\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpcsa43nsh_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpcsa43nsh_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpcsa43nsh_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_dev float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_dev = numbers[i] -\
    \ mean\n        if abs_dev < 0 {\n            abs_dev = -abs_dev\n        }\n\
    \        mad += abs_dev\n    }\n    mad = mad / float64(n)\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += numbers[i]\
    \ - mean\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp79z63p0d_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp79z63p0d_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp79z63p0d_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var length int\
    \ = len(numbers)\n\n    for i = 0; i < length; i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(length)\n\n    for i = 0; i < length; i++ {\n\
    \        abs_diff += float64(int(numbers[i] - mean))\n    }\n    mad = abs_diff\
    \ / float64(length)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpvae6pe56_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpvae6pe56_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpvae6pe56_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, num := range numbers {\n        sum += num\n    }\n    mean = sum / float64(n)\n\
    \n    for _, num := range numbers {\n        abs_diff += math.Abs(num - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3zksttx_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    for _, number := range numbers {\n  \
    \      sum += number\n    }\n    mean = sum / float64(len(numbers))\n    for _,\
    \ number := range numbers {\n        diff += math.Abs(number - mean)\n    }\n\
    \    mad = diff / float64(len(numbers))\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbbs_7nms_test.go:25:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the dataset\n    mean := 0.0\n    for _, number\
    \ := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    // and sum them up\n    sum_absolute_differences := 0.0\n    for _, number\
    \ := range numbers {\n        sum_absolute_differences += math.Abs(number - mean)\n\
    \    }\n\n    // Return the average absolute difference\n    return sum_absolute_differences\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphk8d2ew_test.go:27:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var n\
    \ int = len(numbers)\n\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(n)\n\n    for _, number := range numbers {\n\
    \        diff = number - mean\n        abs_diff = diff\n        if diff < 0 {\n\
    \            abs_diff = -diff\n        }\n        mad += abs_diff\n    }\n   \
    \ mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var count float64 = 0.0\n    for _, number\
    \ := range numbers {\n        sum += number\n        count += 1.0\n    }\n   \
    \ mean := sum / count\n    var sum_of_deviations float64 = 0.0\n    for _, number\
    \ := range numbers {\n        sum_of_deviations += abs(number - mean)\n    }\n\
    \    return sum_of_deviations / count\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmlazqgxk_test.go:25:30: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var count float64 = 0.0\n\n    for\
    \ _, number := range numbers {\n        sum += number\n        count += 1.0\n\
    \    }\n    mean = sum / count\n\n    for _, number := range numbers {\n     \
    \   abs_diff += math.Abs(number - mean)\n    }\n    mad = abs_diff / count\n\n\
    \    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpektpmq1c_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += math.Abs(numbers[i]\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu4mm81f_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n float64 = float64(len(numbers))\n\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean = sum / n\n\n    for _, number\
    \ := range numbers {\n        mad += abs(number - mean)\n    }\n    mad = mad\
    \ / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphyy81o_t_test.go:27:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var abs_deviations\
    \ []float64\n    var abs_deviation float64 = 0.0\n    var mean_abs_deviation float64\
    \ = 0.0\n\n    for _, number := range numbers {\n        sum += number\n    }\n\
    \    mean = sum / float64(len(numbers))\n\n    for _, number := range numbers\
    \ {\n        abs_deviation = number - mean\n        if abs_deviation < 0 {\n \
    \           abs_deviation = -abs_deviation\n        }\n        abs_deviations\
    \ = append(abs_deviations, abs_deviation)\n    }\n\n    for _, abs_deviation :=\
    \ range abs_deviations {\n        mean_abs_deviation += abs_deviation\n    }\n\
    \    mean_abs_deviation = mean_abs_deviation / float64(len(abs_deviations))\n\n\
    \    return mean_abs_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the dataset\n    mean := mean(numbers)\n   \
    \ // Calculate the absolute difference between each element and the mean\n   \
    \ // and store it in a new list\n    absolute_differences := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        absolute_differences[i] = absolute_difference(number,\
    \ mean)\n    }\n    // Calculate the mean of the absolute differences\n    return\
    \ mean(absolute_differences)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8lwv_vsb_test.go:17:13: undefined: mean

    /tmp/tmp8lwv_vsb_test.go:22:35: undefined: absolute_difference

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    //\
    \ Calculate the mean\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(n)\n\n    // Calculate the mean absolute deviation\n\
    \    for _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuwlh7uuj_test.go:30:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var count float64 = 0.0\n\n    for _,\
    \ number := range numbers {\n        sum += number\n        count += 1.0\n   \
    \ }\n    mean = sum / count\n\n    for _, number := range numbers {\n        diff\
    \ += number - mean\n    }\n    mad = diff / count\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpcsa43nsh_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpcsa43nsh_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpcsa43nsh_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n float64 = float64(len(numbers))\n\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean = sum / n\n\n    for _, number\
    \ := range numbers {\n        mad += abs(number - mean)\n    }\n    mad = mad\
    \ / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphyy81o_t_test.go:27:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for i = 0; i\
    \ < n; i++ {\n        abs_diff = numbers[i] - mean\n        if abs_diff < 0 {\n\
    \            abs_diff = -abs_diff\n        }\n        mad += abs_diff\n    }\n\
    \    mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ int = 0\n\n    // Calculate the mean\n    for _, number := range numbers {\n\
    \        sum += number\n        count += 1\n    }\n    mean = sum / float64(count)\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    for _, number := range numbers {\n        diff = number - mean\n        abs_diff\
    \ += diff\n    }\n\n    // Calculate the mean absolute deviation\n    mad = abs_diff\
    \ / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp_g6qub27_test.go:57: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp_g6qub27_test.go:57:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp_g6qub27_test.go:57: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var abs_dev float64\
    \ = 0.0\n    var mad float64 = 0.0\n    for _, number := range numbers {\n   \
    \     sum += number\n    }\n    mean = sum / float64(len(numbers))\n    for _,\
    \ number := range numbers {\n        abs_dev += float64(abs(number - mean))\n\
    \    }\n    mad = abs_dev / float64(len(numbers))\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpveljmppp_test.go:25:28: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var abs_diff float64\
    \ = 0.0\n    var mad float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    // Calculate the mean of the input numbers\n    for i = 0; i < n; i++ {\n\
    \        sum += numbers[i]\n    }\n    mean = sum / float64(n)\n\n    // Calculate\
    \ the absolute difference between each number and the mean\n    for i = 0; i <\
    \ n; i++ {\n        abs_diff += math.Abs(numbers[i] - mean)\n    }\n\n    // Calculate\
    \ the mean absolute deviation\n    mad = abs_diff / float64(n)\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdo428hx0_test.go:31:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    // Calculate the mean of the dataset\n    for i = 0; i < n; i++ {\n    \
    \    sum += numbers[i]\n    }\n    mean = sum / float64(n)\n\n    // Calculate\
    \ the absolute difference between each element and the mean\n    for i = 0; i\
    \ < n; i++ {\n        abs_diff += abs(numbers[i] - mean)\n    }\n\n    // Calculate\
    \ the mean absolute deviation\n    mad = abs_diff / float64(n)\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2qqdtc4_test.go:31:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var count int = 0\n    for _, num := range numbers {\n        sum\
    \ += num\n        count += 1\n    }\n    mean = sum / float64(count)\n    for\
    \ _, num := range numbers {\n        mad += math.Abs(num - mean)\n    }\n    return\
    \ mad / float64(count)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpatnzntz2_test.go:26:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var abs_deviations\
    \ []float64 = make([]float64, len(numbers))\n    var mad float64 = 0.0\n\n   \
    \ for _, number := range numbers {\n        sum += number\n    }\n    mean = sum\
    \ / float64(len(numbers))\n\n    for i, number := range numbers {\n        abs_deviations[i]\
    \ = number - mean\n        if abs_deviations[i] < 0 {\n            abs_deviations[i]\
    \ = -abs_deviations[i]\n        }\n    }\n\n    for _, abs_deviation := range\
    \ abs_deviations {\n        mad += abs_deviation\n    }\n    mad = mad / float64(len(numbers))\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += numbers[i]\
    \ - mean\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp79z63p0d_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp79z63p0d_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp79z63p0d_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_dev float64 = 0.0\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(len(numbers))\n    for\
    \ _, number := range numbers {\n        abs_dev += math.Abs(number - mean)\n \
    \   }\n    mad = abs_dev / float64(len(numbers))\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpux5sspn__test.go:25:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    for _, number := range numbers {\n        sum += number\n    }\n\
    \    mean = sum / float64(len(numbers))\n    for _, number := range numbers {\n\
    \        mad += math.Abs(number - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw1rp0v67_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    var sum float64 = 0.0\n    for _, n := range numbers\
    \ {\n        sum += n\n    }\n    mean := sum / float64(len(numbers))\n\n    //\
    \ Calculate mean absolute deviation\n    var sum_of_absolute_deviations float64\
    \ = 0.0\n    for _, n := range numbers {\n        sum_of_absolute_deviations +=\
    \ abs(n - mean)\n    }\n    return sum_of_absolute_deviations / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo3ccsfgv_test.go:26:39: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var count int = 0\n\n    for _, num\
    \ := range numbers {\n        sum += num\n        count += 1\n    }\n    mean\
    \ = sum / float64(count)\n\n    for _, num := range numbers {\n        abs_diff\
    \ += math.Abs(num - mean)\n    }\n    mad = abs_diff / float64(count)\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc_7at5ta_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var deviation\
    \ float64 = 0.0\n    var mad float64 = 0.0\n    var i int = 0\n    for i = 0;\
    \ i < len(numbers); i++ {\n        sum += numbers[i]\n    }\n    mean = sum /\
    \ float64(len(numbers))\n    for i = 0; i < len(numbers); i++ {\n        deviation\
    \ += abs(numbers[i] - mean)\n    }\n    mad = deviation / float64(len(numbers))\n\
    \    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0c53_ddd_test.go:26:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    var sum float64\
    \ = 0.0\n    for _, number := range numbers {\n        sum += number\n    }\n\
    \    mean := sum / float64(len(numbers))\n    var sum_of_differences float64 =\
    \ 0.0\n    for _, number := range numbers {\n        sum_of_differences += float64(abs(number\
    \ - mean))\n    }\n    return sum_of_differences / float64(len(numbers))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8y0e8ofu_test.go:26:39: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var count float64 = 0.0\n\n    for _,\
    \ number := range numbers {\n        sum += number\n        count += 1.0\n   \
    \ }\n    mean = sum / count\n\n    for _, number := range numbers {\n        diff\
    \ += number - mean\n    }\n    mad = diff / count\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpcsa43nsh_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpcsa43nsh_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpcsa43nsh_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var count float64 = 0.0\n\n    for _,\
    \ number := range numbers {\n        sum += number\n        count += 1.0\n   \
    \ }\n    mean = sum / count\n\n    for _, number := range numbers {\n        diff\
    \ += (number - mean)\n    }\n    mad = diff / count\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpr6oyjpsy_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpr6oyjpsy_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpr6oyjpsy_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073971
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the dataset\n    mean := 0.0\n    for _, number\
    \ := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    // and sum them up\n    sum_of_absolute_differences := 0.0\n    for _, number\
    \ := range numbers {\n        sum_of_absolute_differences += math.Abs(number -\
    \ mean)\n    }\n\n    // Return the average absolute difference\n    return sum_of_absolute_differences\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgxclzjs5_test.go:27:40: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var count float64 = 0.0\n    var diff float64 = 0.0\n\n    for _,\
    \ number := range numbers {\n        sum += number\n        count += 1.0\n   \
    \ }\n    mean = sum / count\n\n    for _, number := range numbers {\n        diff\
    \ += (number - mean)\n    }\n    mad = diff / count\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpt0vcyip2_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpt0vcyip2_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpt0vcyip2_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073971
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ float64 = 0.0\n\n    for _, number := range numbers {\n        sum += number\n\
    \        count += 1.0\n    }\n    mean = sum / count\n\n    for _, number := range\
    \ numbers {\n        diff = number - mean\n        abs_diff = diff\n        if\
    \ diff < 0 {\n            abs_diff = -diff\n        }\n        mad += abs_diff\n\
    \    }\n    mad = mad / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073971
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var deviation\
    \ float64 = 0.0\n    var mad float64 = 0.0\n    var i int = 0\n    var n int =\
    \ len(numbers)\n\n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n   \
    \ }\n    mean = sum / float64(n)\n\n    for i = 0; i < n; i++ {\n        deviation\
    \ += abs(numbers[i] - mean)\n    }\n    mad = deviation / float64(n)\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprs609bjp_test.go:29:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    for _, number := range numbers {\n       \
    \ sum += number\n    }\n    mean := sum / float64(len(numbers))\n    var sum_of_deviations\
    \ float64 = 0.0\n    for _, number := range numbers {\n        sum_of_deviations\
    \ += number - mean\n    }\n    return sum_of_deviations / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpczswthmj_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpczswthmj_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpczswthmj_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO: Implement me!\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmptmx30we7_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmptmx30we7_test.go:35:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmptmx30we7_test.go:35: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ float64 = 0.0\n\n    for _, number := range numbers {\n        sum += number\n\
    \        count += 1.0\n    }\n    mean = sum / count\n\n    for _, number := range\
    \ numbers {\n        diff = number - mean\n        abs_diff = diff\n        if\
    \ diff < 0 {\n            abs_diff = -diff\n        }\n        mad += abs_diff\n\
    \    }\n    mad = mad / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073971
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n float64 = float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / n\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw82wrbg0_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    mean := 0.0\n    for _, number := range numbers\
    \ {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\n    //\
    \ Calculate absolute difference from mean\n    abs_diff := 0.0\n    for _, number\
    \ := range numbers {\n        abs_diff += math.Abs(number - mean)\n    }\n\n \
    \   // Return mean absolute difference\n    return abs_diff / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5fh881m7_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var n float64 = float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / n\n\n    for _, number := range numbers {\n        diff += (number -\
    \ mean) * (number - mean)\n    }\n    mad = diff / n\n\n    return mad\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp82p538q1_test.go:50: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp82p538q1_test.go:50:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp82p538q1_test.go:50: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ int = 0\n\n    // Calculate the mean of the input numbers\n    for _, number\
    \ := range numbers {\n        sum += number\n        count += 1\n    }\n    mean\
    \ = sum / float64(count)\n\n    // Calculate the absolute difference between each\
    \ number and the mean\n    for _, number := range numbers {\n        diff = number\
    \ - mean\n        abs_diff += diff\n    }\n\n    // Calculate the mean absolute\
    \ deviation\n    mad = abs_diff / float64(count)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpv84uvzod_test.go:57: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpv84uvzod_test.go:57:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpv84uvzod_test.go:57: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var deviation\
    \ float64 = 0.0\n    var mad float64 = 0.0\n    var n float64 = float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / n\n\n    for _, number := range numbers {\n        deviation += abs(number\
    \ - mean)\n    }\n    mad = deviation / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu1qgjp8_test.go:28:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var abs_dev float64\
    \ = 0.0\n    var abs_dev_sum float64 = 0.0\n    var mad float64 = 0.0\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(len(numbers))\n\n    for _, number := range numbers {\n        abs_dev\
    \ = number - mean\n        if abs_dev < 0 {\n            abs_dev = -abs_dev\n\
    \        }\n        abs_dev_sum += abs_dev\n    }\n    mad = abs_dev_sum / float64(len(numbers))\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    //\
    \ Calculate mean\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(n)\n\n    // Calculate absolute difference between\
    \ each element and mean\n    for _, number := range numbers {\n        abs_diff\
    \ += abs(number - mean)\n    }\n\n    // Calculate mean absolute deviation\n \
    \   mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6dmv25r_test.go:30:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var n float64 = float64(len(numbers))\n\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / n\n\n    for _, number :=\
    \ range numbers {\n        mad += abs(number - mean)\n    }\n    mad = mad / n\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7j797h7i_test.go:27:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var diff float64 = 0\n    var count float64 = 0\n\n    // Calculate the\
    \ mean\n    for _, number := range numbers {\n        sum += number\n        count\
    \ += 1\n    }\n    mean = sum / count\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    for _, number := range numbers {\n  \
    \      diff += number - mean\n    }\n\n    // Calculate the mean absolute deviation\n\
    \    mad = diff / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpf7gxcnaq_test.go:55: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpf7gxcnaq_test.go:55:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpf7gxcnaq_test.go:55: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073973
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var count float64 = 0.0\n\n    for _,\
    \ val := range numbers {\n        sum += val\n        count += 1.0\n    }\n  \
    \  mean = sum / count\n\n    for _, val := range numbers {\n        diff += (val\
    \ - mean)\n    }\n    mad = diff / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp7z4bmjos_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp7z4bmjos_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp7z4bmjos_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073973
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var abs_diff float64 = 0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += abs(numbers[i]\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg03bj2y7_test.go:29:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var n int = len(numbers)\n    for _, number := range numbers {\n    \
    \    sum += number\n    }\n    mean = sum / float64(n)\n    for _, number := range\
    \ numbers {\n        mad += math.Abs(number - mean)\n    }\n    return mad / float64(n)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7t1cysdy_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ int = 0\n\n    for _, number := range numbers {\n        sum += number\n   \
    \     count += 1\n    }\n    mean = sum / float64(count)\n\n    for _, number\
    \ := range numbers {\n        diff = number - mean\n        abs_diff = diff\n\
    \        if diff < 0 {\n            abs_diff = -diff\n        }\n        mad +=\
    \ abs_diff\n    }\n    mad = mad / float64(count)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073973
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var abs_dev float64 = 0\n    var abs_dev_sum float64 = 0\n    var abs_dev_mean\
    \ float64 = 0\n\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    for _, number := range numbers\
    \ {\n        abs_dev = number - mean\n        if abs_dev < 0 {\n            abs_dev\
    \ = -abs_dev\n        }\n        abs_dev_sum += abs_dev\n    }\n    abs_dev_mean\
    \ = abs_dev_sum / float64(len(numbers))\n\n    return abs_dev_mean\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6s1qkquh_test.go:18:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var deviation float64\
    \ = 0\n    var abs_deviation float64 = 0\n    var mean_absolute_deviation float64\
    \ = 0\n\n    for _, number := range numbers {\n        sum += number\n    }\n\
    \    mean = sum / float64(len(numbers))\n\n    for _, number := range numbers\
    \ {\n        deviation = number - mean\n        abs_deviation += deviation\n \
    \   }\n    mean_absolute_deviation = abs_deviation / float64(len(numbers))\n\n\
    \    return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpogtwm3w8_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpogtwm3w8_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpogtwm3w8_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073973
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var count int = 0\n\n    // Calculate\
    \ the mean of the dataset\n    for _, number := range numbers {\n        sum +=\
    \ number\n        count += 1\n    }\n    mean = sum / float64(count)\n\n    //\
    \ Calculate the absolute difference between each element and the mean\n    for\
    \ _, number := range numbers {\n        diff += math.Abs(number - mean)\n    }\n\
    \n    // Calculate the mean absolute deviation\n    mad = diff / float64(count)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjki2onpo_test.go:31:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    var sum float64 = 0.0\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\
    \n    // Calculate absolute difference between each element and mean\n    var\
    \ abs_differences []float64\n    for _, number := range numbers {\n        abs_differences\
    \ = append(abs_differences, number - mean)\n    }\n\n    // Calculate mean of\
    \ absolute differences\n    var abs_differences_sum float64 = 0.0\n    for _,\
    \ abs_difference := range abs_differences {\n        abs_differences_sum += abs_difference\n\
    \    }\n    mean_absolute_deviation := abs_differences_sum / float64(len(abs_differences))\n\
    \n    return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpc3n16_w4_test.go:54: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpc3n16_w4_test.go:54:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpc3n16_w4_test.go:54: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073973
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n    for _, number := range numbers {\n      \
    \  mad += (number - mean)\n    }\n    return mad / float64(len(numbers))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp9nty7i45_test.go:44: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp9nty7i45_test.go:44:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp9nty7i45_test.go:44: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073973
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var i\
    \ int = 0\n    var n int = len(numbers)\n\n    for i = 0; i < n; i++ {\n     \
    \   sum += numbers[i]\n    }\n    mean = sum / float64(n)\n\n    for i = 0; i\
    \ < n; i++ {\n        diff = numbers[i] - mean\n        abs_diff = diff\n    \
    \    if diff < 0 {\n            abs_diff = -diff\n        }\n        mad += abs_diff\n\
    \    }\n    mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073973
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    for _, number := range numbers {\n        sum += number\n    }\n\
    \    mean = sum / float64(len(numbers))\n    for _, number := range numbers {\n\
    \        mad += math.Abs(number - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw1rp0v67_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var abs_deviation\
    \ float64 = 0.0\n    var mean_abs_deviation float64 = 0.0\n\n    for _, number\
    \ := range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        abs_deviation += abs(number -\
    \ mean)\n    }\n    mean_abs_deviation = abs_deviation / float64(len(numbers))\n\
    \n    return mean_abs_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppts_qi_y_test.go:27:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ int = 0\n\n    // Calculate the mean\n    for _, number := range numbers {\n\
    \        sum += number\n        count += 1\n    }\n    mean = sum / float64(count)\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    for _, number := range numbers {\n        diff = number - mean\n        abs_diff\
    \ += diff\n    }\n\n    // Calculate the mean absolute deviation\n    mad = abs_diff\
    \ / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp_g6qub27_test.go:57: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp_g6qub27_test.go:57:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp_g6qub27_test.go:57: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    for _, number := range numbers {\n        mean += number\n\
    \    }\n    mean /= float64(len(numbers))\n\n    sum_absolute_deviation := 0.0\n\
    \    for _, number := range numbers {\n        sum_absolute_deviation += math.Abs(number\
    \ - mean)\n    }\n\n    return sum_absolute_deviation / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz0ydg_7g_test.go:24:35: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073973
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += math.Abs(numbers[i]\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu4mm81f_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var abs_diff_sum float64 = 0.0\n\
    \    var abs_diff_mean float64 = 0.0\n\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    for\
    \ _, number := range numbers {\n        abs_diff = number - mean\n        if abs_diff\
    \ < 0 {\n            abs_diff = -abs_diff\n        }\n        abs_diff_sum +=\
    \ abs_diff\n    }\n    abs_diff_mean = abs_diff_sum / float64(len(numbers))\n\n\
    \    return abs_diff_mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5rpip78n_test.go:18:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for i = 0; i\
    \ < n; i++ {\n        abs_diff = numbers[i] - mean\n        if abs_diff < 0 {\n\
    \            abs_diff = -abs_diff\n        }\n        mad += abs_diff\n    }\n\
    \    mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var abs_deviations\
    \ []float64 = make([]float64, len(numbers))\n    var mad float64 = 0.0\n\n   \
    \ // Calculate mean\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate absolute deviations\n\
    \    for index, number := range numbers {\n        abs_deviations[index] = number\
    \ - mean\n        if abs_deviations[index] < 0 {\n            abs_deviations[index]\
    \ = -abs_deviations[index]\n        }\n    }\n\n    // Calculate mean absolute\
    \ deviation\n    for _, abs_deviation := range abs_deviations {\n        mad +=\
    \ abs_deviation\n    }\n    mad = mad / float64(len(numbers))\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073973
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    mean = sum / float64(n)\n\
    \n    for _, number := range numbers {\n        abs_diff += math.Abs(number -\
    \ mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp09431byr_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    mean = sum / float64(n)\n\
    \n    for _, number := range numbers {\n        abs_diff += math.Abs(number -\
    \ mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp09431byr_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_dev float64 = 0.0\n    var abs_dev_sum float64 = 0.0\n  \
    \  var abs_dev_mean float64 = 0.0\n\n    for _, number := range numbers {\n  \
    \      sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    for\
    \ _, number := range numbers {\n        abs_dev = number - mean\n        if abs_dev\
    \ < 0 {\n            abs_dev = -abs_dev\n        }\n        abs_dev_sum += abs_dev\n\
    \    }\n    abs_dev_mean = abs_dev_sum / float64(len(numbers))\n\n    return abs_dev_mean\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvgmk_m7r_test.go:18:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the dataset\n    mean := 0.0\n    for _, number\
    \ := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    // and sum them up\n    sum_absolute_differences := 0.0\n    for _, number\
    \ := range numbers {\n        sum_absolute_differences += math.Abs(number - mean)\n\
    \    }\n\n    // Return the average absolute difference\n    return sum_absolute_differences\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphk8d2ew_test.go:27:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var count int = 0\n\n    for _, number\
    \ := range numbers {\n        sum += number\n        count += 1\n    }\n    mean\
    \ = sum / float64(count)\n\n    for _, number := range numbers {\n        diff\
    \ += math.Abs(number - mean)\n    }\n    mad = diff / float64(count)\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmuyny867_test.go:29:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    // Calculate the mean of the input numbers\n    for i = 0; i < n; i++ {\n\
    \        sum += numbers[i]\n    }\n    mean = sum / float64(n)\n\n    // Calculate\
    \ the absolute difference between each number and the mean\n    // and sum them\n\
    \    for i = 0; i < n; i++ {\n        abs_diff += math.Abs(numbers[i] - mean)\n\
    \    }\n\n    // Calculate the mean absolute deviation\n    mad = abs_diff / float64(n)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82hdrnc7_test.go:32:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var count float64 = 0.0\n    var deviation float64 = 0.0\n\n    for\
    \ _, number := range numbers {\n        sum += number\n        count += 1.0\n\
    \    }\n    mean = sum / count\n\n    for _, number := range numbers {\n     \
    \   deviation += abs(number - mean)\n    }\n    mad = deviation / count\n\n  \
    \  return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2g9j4yja_test.go:29:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var n\
    \ int = len(numbers)\n\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(n)\n\n    for _, number := range numbers {\n\
    \        diff = number - mean\n        abs_diff = diff\n        if diff < 0 {\n\
    \            abs_diff = -diff\n        }\n        mad += abs_diff\n    }\n   \
    \ mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var count int = 0\n\n    // Calculate\
    \ mean\n    for _, number := range numbers {\n        sum += number\n        count\
    \ += 1\n    }\n    mean = sum / float64(count)\n\n    // Calculate MAD\n    for\
    \ _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw37z_jpj_test.go:31:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_dev float64 = 0.0\n    var count float64 = 0.0\n\n    for\
    \ _, number := range numbers {\n        sum += number\n        count += 1.0\n\
    \    }\n    mean = sum / count\n\n    for _, number := range numbers {\n     \
    \   abs_dev += math.Abs(number - mean)\n    }\n    mad = abs_dev / count\n\n \
    \   return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6jitwsi_test.go:29:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ int = 0\n\n    for _, number := range numbers {\n        sum += number\n   \
    \     count += 1\n    }\n    mean = sum / float64(count)\n\n    for _, number\
    \ := range numbers {\n        diff = number - mean\n        abs_diff = diff\n\
    \        if diff < 0 {\n            abs_diff = -diff\n        }\n        mad +=\
    \ abs_diff\n    }\n    mad = mad / float64(count)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073973
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_dev float64 = 0.0\n    var abs_dev_sum float64 = 0.0\n  \
    \  var abs_dev_mean float64 = 0.0\n\n    for _, number := range numbers {\n  \
    \      sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    for\
    \ _, number := range numbers {\n        abs_dev = number - mean\n        if abs_dev\
    \ < 0 {\n            abs_dev = -abs_dev\n        }\n        abs_dev_sum += abs_dev\n\
    \    }\n    abs_dev_mean = abs_dev_sum / float64(len(numbers))\n\n    return abs_dev_mean\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvgmk_m7r_test.go:18:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n float64 = float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / n\n\n    for _, number := range numbers {\n        abs_diff += float64(abs(number\
    \ - mean))\n    }\n    mad = abs_diff / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpljijghas_test.go:28:29: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var count float64 = 0.0\n    var mean float64\
    \ = 0.0\n    var mad float64 = 0.0\n    for _, number := range numbers {\n   \
    \     sum += number\n        count += 1.0\n    }\n    mean = sum / count\n   \
    \ for _, number := range numbers {\n        mad += abs(number - mean)\n    }\n\
    \    return mad / count\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe7mpk85f_test.go:26:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, num := range numbers {\n        sum += num\n    }\n    mean = sum / float64(n)\n\
    \n    for _, num := range numbers {\n        abs_diff += math.Abs(num - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3zksttx_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var count float64 = 0.0\n    var diff float64 = 0.0\n\n    for _,\
    \ number := range numbers {\n        sum += number\n        count += 1.0\n   \
    \ }\n    mean = sum / count\n\n    for _, number := range numbers {\n        diff\
    \ += math.Abs(number - mean)\n    }\n    mad = diff / count\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvrzzp8ds_test.go:29:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var count float64 = 0.0\n\n    for\
    \ _, value := range numbers {\n        sum += value\n        count += 1.0\n  \
    \  }\n    mean = sum / count\n\n    for _, value := range numbers {\n        abs_diff\
    \ += math.Abs(value - mean)\n    }\n    mad = abs_diff / count\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4mcyp3bu_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n    for _, number := range numbers {\n      \
    \  mad += abs(number - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn9gg2hh4_test.go:24:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    var sum float64 = 0.0\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\
    \n    // Calculate absolute difference from mean\n    var absolute_differences\
    \ []float64\n    for _, number := range numbers {\n        absolute_differences\
    \ = append(absolute_differences, number - mean)\n    }\n\n    // Calculate mean\
    \ of absolute differences\n    var sum_absolute_differences float64 = 0.0\n  \
    \  for _, absolute_difference := range absolute_differences {\n        sum_absolute_differences\
    \ += absolute_difference\n    }\n    mean_absolute_difference := sum_absolute_differences\
    \ / float64(len(absolute_differences))\n\n    return mean_absolute_difference\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp8huh0ypj_test.go:54: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp8huh0ypj_test.go:54:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp8huh0ypj_test.go:54: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    var sum float64 = 0.0\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\
    \n    // Calculate MAD\n    var mad float64 = 0.0\n    for _, number := range\
    \ numbers {\n        mad += abs(number - mean)\n    }\n    mad /= float64(len(numbers))\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoziurss3_test.go:26:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    mean = sum / float64(n)\n\
    \n    for _, number := range numbers {\n        abs_diff += math.Abs(number -\
    \ mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp09431byr_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the dataset\n    mean := 0.0\n    for _, number\
    \ := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    // and sum them up\n    sum_absolute_differences := 0.0\n    for _, number\
    \ := range numbers {\n        sum_absolute_differences += math.Abs(number - mean)\n\
    \    }\n\n    // Return the average absolute difference\n    return sum_absolute_differences\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphk8d2ew_test.go:27:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var num_elements int = len(numbers)\n\
    \n    for _, element := range numbers {\n        sum += element\n    }\n    mean\
    \ = sum / float64(num_elements)\n\n    for _, element := range numbers {\n   \
    \     abs_diff += math.Abs(element - mean)\n    }\n    mad = abs_diff / float64(num_elements)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn79246he_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_dev float64 = 0.0\n    var abs_dev_sum float64 = 0.0\n  \
    \  var abs_dev_mean float64 = 0.0\n\n    for _, number := range numbers {\n  \
    \      sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    for\
    \ _, number := range numbers {\n        abs_dev = number - mean\n        if abs_dev\
    \ < 0 {\n            abs_dev = -abs_dev\n        }\n        abs_dev_sum += abs_dev\n\
    \    }\n    abs_dev_mean = abs_dev_sum / float64(len(numbers))\n\n    return abs_dev_mean\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvgmk_m7r_test.go:18:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp5pi9za20_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp5pi9za20_test.go:35:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp5pi9za20_test.go:35: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073975
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var diff float64 = 0\n    var abs_diff float64 = 0\n    var i int = 0\n\
    \    var length int = len(numbers)\n\n    for i = 0; i < length; i++ {\n     \
    \   sum += numbers[i]\n    }\n    mean = sum / float64(length)\n\n    for i =\
    \ 0; i < length; i++ {\n        diff = numbers[i] - mean\n        abs_diff = diff\n\
    \        if diff < 0 {\n            abs_diff = -diff\n        }\n        mad +=\
    \ abs_diff\n    }\n    mad = mad / float64(length)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    for _, number := range numbers {\n        sum += number\n    }\n\
    \    mean = sum / float64(len(numbers))\n    for _, number := range numbers {\n\
    \        mad += math.Abs(number - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw1rp0v67_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    deviations := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        deviations[i] = abs(number - mean)\n\
    \    }\n    return mean(deviations)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpepqxgx55_test.go:16:13: undefined: mean

    /tmp/tmpepqxgx55_test.go:19:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var abs_diff float64 = 0\n    var count int = 0\n\n    for _, number\
    \ := range numbers {\n        sum += number\n        count += 1\n    }\n    mean\
    \ = sum / float64(count)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += float64(abs(number - mean))\n    }\n    mad = abs_diff / float64(count)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0km7qhb_test.go:29:29: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var n int = len(numbers)\n    for _, number := range numbers {\n    \
    \    sum += number\n    }\n    mean = sum / float64(n)\n    for _, number := range\
    \ numbers {\n        mad += abs(number - mean)\n    }\n    return mad / float64(n)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oj7dvt1_test.go:25:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for i = 0; i\
    \ < n; i++ {\n        abs_diff = numbers[i] - mean\n        if abs_diff < 0 {\n\
    \            abs_diff = -abs_diff\n        }\n        mad += abs_diff\n    }\n\
    \    mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n    for _, number := range numbers {\n      \
    \  mad += abs(number - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn9gg2hh4_test.go:24:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var abs_diff float64 = 0\n    var num_elements int = len(numbers)\n\n\
    \    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(num_elements)\n\n    for _, number := range numbers {\n    \
    \    abs_diff += float64(abs(number - mean))\n    }\n    mad = abs_diff / float64(num_elements)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp224ey1l1_test.go:28:29: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var count int = 0\n    for _, number := range numbers {\n       \
    \ sum += number\n        count += 1\n    }\n    mean = sum / float64(count)\n\
    \    for _, number := range numbers {\n        mad += math.Abs(number - mean)\n\
    \    }\n    return mad / float64(count)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpayzvzcqv_test.go:26:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_dev float64 = 0.0\n    var abs_dev_sum float64 = 0.0\n  \
    \  var abs_dev_mean float64 = 0.0\n\n    // Calculate mean\n    for _, num :=\
    \ range numbers {\n        sum += num\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    // Calculate absolute deviation\n    for _, num := range numbers {\n   \
    \     abs_dev = num - mean\n        if abs_dev < 0 {\n            abs_dev = -abs_dev\n\
    \        }\n        abs_dev_sum += abs_dev\n    }\n\n    // Calculate mean absolute\
    \ deviation\n    abs_dev_mean = abs_dev_sum / float64(len(numbers))\n\n    return\
    \ abs_dev_mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp99bpqi8t_test.go:18:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_dev float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    // Calculate the mean\n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(n)\n\n    // Calculate the mean absolute deviation\n\
    \    for i = 0; i < n; i++ {\n        abs_dev = numbers[i] - mean\n        if\
    \ abs_dev < 0 {\n            abs_dev = -abs_dev\n        }\n        mad += abs_dev\n\
    \    }\n    mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var count int = 0\n    for _, number := range numbers {\n       \
    \ sum += number\n        count += 1\n    }\n    mean = sum / float64(count)\n\
    \    for _, number := range numbers {\n        mad += math.Abs(number - mean)\n\
    \    }\n    return mad / float64(count)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpayzvzcqv_test.go:26:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073975
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean := sum / float64(len(numbers))\n    sum = 0.0\n    for _, number\
    \ := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return\
    \ sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxj7qfle1_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the input numbers\n    mean := 0.0\n    for\
    \ _, number := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    // and sum them up\n    sum_absolute_differences := 0.0\n    for _, number\
    \ := range numbers {\n        sum_absolute_differences += math.Abs(number - mean)\n\
    \    }\n\n    // Calculate the average absolute difference\n    return sum_absolute_differences\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo76534u5_test.go:27:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var n\
    \ int = len(numbers)\n\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(n)\n\n    for _, number := range numbers {\n\
    \        diff = number - mean\n        abs_diff = diff\n        if diff < 0 {\n\
    \            abs_diff = -diff\n        }\n        mad += abs_diff\n    }\n   \
    \ mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var count int = 0\n\n    for _, number\
    \ := range numbers {\n        sum += number\n        count += 1\n    }\n    mean\
    \ = sum / float64(count)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += math.Abs(number - mean)\n    }\n    mad = abs_diff / float64(count)\n\n \
    \   return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2rlqdrs6_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ float64 = 0.0\n\n    for _, number := range numbers {\n        sum += number\n\
    \        count += 1.0\n    }\n    mean = sum / count\n\n    for _, number := range\
    \ numbers {\n        diff = number - mean\n        abs_diff = diff\n        if\
    \ diff < 0 {\n            abs_diff = -diff\n        }\n        mad += abs_diff\n\
    \    }\n    mad = mad / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073971
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean := sum / float64(len(numbers))\n    sum = 0.0\n    for _, number\
    \ := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return\
    \ sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxj7qfle1_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var count float64 = 0.0\n\n    for\
    \ _, number := range numbers {\n        sum += number\n        count += 1.0\n\
    \    }\n    mean = sum / count\n\n    for _, number := range numbers {\n     \
    \   abs_diff += math.Abs(number - mean)\n    }\n    mad = abs_diff / count\n\n\
    \    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpektpmq1c_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += numbers[i]\
    \ - mean\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp79z63p0d_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp79z63p0d_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp79z63p0d_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ int = 0\n\n    for _, number := range numbers {\n        sum += number\n   \
    \     count += 1\n    }\n    mean = sum / float64(count)\n\n    for _, number\
    \ := range numbers {\n        diff = number - mean\n        abs_diff = diff\n\
    \        if diff < 0 {\n            abs_diff = -diff\n        }\n        mad +=\
    \ abs_diff\n    }\n    mad = mad / float64(count)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073973
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var count int = 0\n\n    // Calculate\
    \ the mean\n    for _, number := range numbers {\n        sum += number\n    \
    \    count += 1\n    }\n    mean = sum / float64(count)\n\n    // Calculate the\
    \ MAD\n    for _, number := range numbers {\n        diff = number - mean\n  \
    \      if diff < 0 {\n            diff = -diff\n        }\n        mad += diff\n\
    \    }\n    mad = mad / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var count float64 = 0.0\n    var mean float64\
    \ = 0.0\n    var mad float64 = 0.0\n    for _, number := range numbers {\n   \
    \     sum += number\n        count += 1.0\n    }\n    mean = sum / count\n   \
    \ for _, number := range numbers {\n        mad += math.Abs(number - mean)\n \
    \   }\n    return mad / count\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2bfgjl0o_test.go:26:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var count int = 0\n\n    for _, number\
    \ := range numbers {\n        sum += number\n        count += 1\n    }\n    mean\
    \ = sum / float64(count)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += (number - mean)\n    }\n    mad = abs_diff / float64(count)\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpzyhg491h_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpzyhg491h_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpzyhg491h_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073976
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ float64 = 0.0\n\n    for _, number := range numbers {\n        sum += number\n\
    \        count += 1.0\n    }\n    mean = sum / count\n\n    for _, number := range\
    \ numbers {\n        diff = number - mean\n        abs_diff = diff\n        if\
    \ diff < 0 {\n            abs_diff = -diff\n        }\n        mad += abs_diff\n\
    \    }\n    mad = mad / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073971
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the dataset\n    var mean float64 = 0.0\n  \
    \  for _, number := range numbers {\n        mean += number\n    }\n    mean /=\
    \ float64(len(numbers))\n\n    // Calculate the absolute difference between each\
    \ element and the mean\n    var absolute_differences []float64 = make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        absolute_differences[i]\
    \ = number - mean\n        if absolute_differences[i] < 0 {\n            absolute_differences[i]\
    \ *= -1\n        }\n    }\n\n    // Calculate the mean of the absolute differences\n\
    \    var mean_absolute_deviation float64 = 0.0\n    for _, absolute_difference\
    \ := range absolute_differences {\n        mean_absolute_deviation += absolute_difference\n\
    \    }\n    mean_absolute_deviation /= float64(len(absolute_differences))\n\n\
    \    return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var n int = len(numbers)\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    return\
    \ mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpyybp5i_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var count float64 = 0.0\n\n    //\
    \ Calculate mean\n    for _, number := range numbers {\n        sum += number\n\
    \        count += 1.0\n    }\n    mean = sum / count\n\n    // Calculate MAD\n\
    \    for _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpea2jfjvv_test.go:31:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var abs_deviations\
    \ float64 = 0.0\n    var abs_deviation float64 = 0.0\n    var mean_absolute_deviation\
    \ float64 = 0.0\n\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    for _, number := range numbers\
    \ {\n        abs_deviation = number - mean\n        if abs_deviation < 0 {\n \
    \           abs_deviation = -abs_deviation\n        }\n        abs_deviations\
    \ += abs_deviation\n    }\n    mean_absolute_deviation = abs_deviations / float64(len(numbers))\n\
    \n    return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073977
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var n\
    \ int = len(numbers)\n\n    for _, num := range numbers {\n        sum += num\n\
    \    }\n    mean = sum / float64(n)\n\n    for _, num := range numbers {\n   \
    \     diff = num - mean\n        abs_diff = diff\n        if diff < 0 {\n    \
    \        abs_diff = -diff\n        }\n        mad += abs_diff\n    }\n    mad\
    \ = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += math.Abs(numbers[i]\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu4mm81f_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the input numbers\n    mean := 0.0\n    for\
    \ _, number := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each number and the mean\n\
    \    // and sum them up\n    sum_absolute_differences := 0.0\n    for _, number\
    \ := range numbers {\n        sum_absolute_differences += float64(abs(int(number\
    \ - mean)))\n    }\n\n    // Return the average absolute difference\n    return\
    \ sum_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpds4vh4k9_test.go:27:45: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var count float64 = 0.0\n\n    for\
    \ _, number := range numbers {\n        sum += number\n        count += 1.0\n\
    \    }\n    mean = sum / count\n\n    for _, number := range numbers {\n     \
    \   abs_diff += math.Abs(number - mean)\n    }\n    mad = abs_diff / count\n\n\
    \    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpektpmq1c_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    var sum float64 = 0.0\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\
    \n    // Calculate MAD\n    var sum_of_absolute_differences float64 = 0.0\n  \
    \  for _, number := range numbers {\n        sum_of_absolute_differences += abs(number\
    \ - mean)\n    }\n    return sum_of_absolute_differences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_cip2vr6_test.go:26:40: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var count float64\
    \ = 0.0\n    var mad float64 = 0.0\n\n    for _, number := range numbers {\n \
    \       sum += number\n        count += 1.0\n    }\n    mean = sum / count\n\n\
    \    for _, number := range numbers {\n        mad += math.Abs(number - mean)\n\
    \    }\n    mad = mad / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp45lxgu0_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var deviation\
    \ float64 = 0.0\n    var mad float64 = 0.0\n    var count float64 = 0.0\n\n  \
    \  for _, number := range numbers {\n        sum += number\n        count += 1.0\n\
    \    }\n    mean = sum / count\n\n    for _, number := range numbers {\n     \
    \   deviation += abs(number - mean)\n    }\n    mad = deviation / count\n\n  \
    \  return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpltwgrqp2_test.go:29:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073976
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    var sum float64 = 0.0\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\
    \n    // Calculate absolute difference from mean\n    var abs_diff_sum float64\
    \ = 0.0\n    for _, number := range numbers {\n        abs_diff_sum += abs(number\
    \ - mean)\n    }\n\n    // Return mean absolute difference\n    return abs_diff_sum\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp25fc3xj9_test.go:26:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += abs(numbers[i]\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqc65xsbw_test.go:29:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var i\
    \ int = 0\n    var n int = len(numbers)\n\n    for i = 0; i < n; i++ {\n     \
    \   sum += numbers[i]\n    }\n    mean = sum / float64(n)\n\n    for i = 0; i\
    \ < n; i++ {\n        diff = numbers[i] - mean\n        abs_diff = diff\n    \
    \    if diff < 0 {\n            abs_diff = -diff\n        }\n        mad += abs_diff\n\
    \    }\n    mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073973
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var count int = 0\n\n    for _, number\
    \ := range numbers {\n        sum += number\n        count += 1\n    }\n    mean\
    \ = sum / float64(count)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += float64(int(number - mean))\n    }\n    mad = abs_diff / float64(count)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpp3xdc79d_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpp3xdc79d_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpp3xdc79d_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the dataset\n    var sum float64 = 0.0\n   \
    \ for _, x := range numbers {\n        sum += x\n    }\n    mean := sum / float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    // and sum them up\n    var sum_abs_diff float64 = 0.0\n    for _, x := range\
    \ numbers {\n        sum_abs_diff += abs(x - mean)\n    }\n\n    // Return the\
    \ mean absolute deviation\n    return sum_abs_diff / float64(len(numbers))\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq9_um6sf_test.go:27:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var abs_diff float64 = 0\n    var abs_diff_sum float64 = 0\n    var abs_diff_mean\
    \ float64 = 0\n\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    for _, number := range numbers\
    \ {\n        abs_diff = number - mean\n        if abs_diff < 0 {\n           \
    \ abs_diff = -abs_diff\n        }\n        abs_diff_sum += abs_diff\n    }\n \
    \   abs_diff_mean = abs_diff_sum / float64(len(numbers))\n\n    return abs_diff_mean\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj1hdm_t_test.go:18:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var abs_deviations\
    \ []float64 = make([]float64, len(numbers))\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n  \
    \  for i, number := range numbers {\n        abs_deviations[i] = number - mean\n\
    \        if abs_deviations[i] < 0 {\n            abs_deviations[i] = -abs_deviations[i]\n\
    \        }\n    }\n    return mean_absolute_deviation_from_mean(abs_deviations)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp617zj_je_test.go:29:12: undefined: mean_absolute_deviation_from_mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n    for _, number := range numbers {\n      \
    \  mad += abs(number - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn9gg2hh4_test.go:24:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n float64 = float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / n\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw82wrbg0_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var abs_diff float64 = 0\n    var n float64 = float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / n\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8p25cdh6_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var abs_diff float64 = 0\n    for _, number := range numbers {\n    \
    \    sum += number\n    }\n    mean = sum / float64(len(numbers))\n    for _,\
    \ number := range numbers {\n        abs_diff += abs(number - mean)\n    }\n \
    \   mad = abs_diff / float64(len(numbers))\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmproxeozbm_test.go:25:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ int = 0\n\n    for _, number := range numbers {\n        sum += number\n   \
    \     count += 1\n    }\n    mean = sum / float64(count)\n\n    for _, number\
    \ := range numbers {\n        diff = number - mean\n        abs_diff = diff\n\
    \        if diff < 0 {\n            abs_diff = -diff\n        }\n        mad +=\
    \ abs_diff\n    }\n    mad = mad / float64(count)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073973
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    var sum float64 = 0.0\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\
    \n    // Calculate absolute difference between each element and mean\n    var\
    \ sum_of_abs_diff float64 = 0.0\n    for _, number := range numbers {\n      \
    \  sum_of_abs_diff += math.Abs(number - mean)\n    }\n\n    // Return the average\
    \ of the absolute differences\n    return sum_of_abs_diff / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdq_fzs9z_test.go:26:28: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64 = 0.0\n    for _, number := range numbers {\n      \
    \  mean += number\n    }\n    mean /= float64(len(numbers))\n\n    var sum_of_absolute_deviations\
    \ float64 = 0.0\n    for _, number := range numbers {\n        sum_of_absolute_deviations\
    \ += abs(number - mean)\n    }\n\n    return sum_of_absolute_deviations / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpduff9nuk_test.go:24:39: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    //\
    \ Calculate the mean of the input numbers\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(n)\n\n    // Calculate\
    \ the absolute difference between each element and the mean\n    for _, number\
    \ := range numbers {\n        abs_diff += math.Abs(number - mean)\n    }\n\n \
    \   // Return the mean absolute deviation\n    mad = abs_diff / float64(n)\n \
    \   return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_plxyot2_test.go:30:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    mean := 0.0\n    for _, number := range numbers {\n \
    \       sum += number\n    }\n    mean = sum / float64(len(numbers))\n    sum\
    \ = 0.0\n    for _, number := range numbers {\n        sum += (number - mean)\
    \ * (number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpj52dhz32_test.go:44: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpj52dhz32_test.go:44:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpj52dhz32_test.go:44: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var count float64 = 0.0\n\n    for\
    \ _, number := range numbers {\n        sum += number\n        count += 1.0\n\
    \    }\n    mean = sum / count\n\n    for _, number := range numbers {\n     \
    \   abs_diff += math.Abs(number - mean)\n    }\n    mad = abs_diff / count\n\n\
    \    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpektpmq1c_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var count float64 = 0.0\n    var diff float64 = 0.0\n\n    for _,\
    \ number := range numbers {\n        sum += number\n        count += 1.0\n   \
    \ }\n    mean = sum / count\n\n    for _, number := range numbers {\n        diff\
    \ += (number - mean)\n    }\n    mad = diff / count\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpt0vcyip2_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpt0vcyip2_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpt0vcyip2_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073971
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    for _, number := range numbers {\n        sum += number\n    }\n\
    \    mean = sum / float64(len(numbers))\n    for _, number := range numbers {\n\
    \        mad += math.Abs(number - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw1rp0v67_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073970
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the dataset\n    var mean float64 = 0.0\n  \
    \  for _, number := range numbers {\n        mean += number\n    }\n    mean /=\
    \ float64(len(numbers))\n\n    // Calculate the absolute difference between each\
    \ element and the mean\n    var abs_differences []float64 = make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        abs_differences[i] = number - mean\n\
    \        if abs_differences[i] < 0 {\n            abs_differences[i] *= -1\n \
    \       }\n    }\n\n    // Calculate the mean of the absolute differences\n  \
    \  var mean_absolute_deviation float64 = 0.0\n    for _, abs_difference := range\
    \ abs_differences {\n        mean_absolute_deviation += abs_difference\n    }\n\
    \    mean_absolute_deviation /= float64(len(abs_differences))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ int = 0\n\n    for _, number := range numbers {\n        sum += number\n   \
    \     count += 1\n    }\n    mean = sum / float64(count)\n\n    for _, number\
    \ := range numbers {\n        diff = number - mean\n        abs_diff = diff\n\
    \        if diff < 0 {\n            abs_diff = -diff\n        }\n        mad +=\
    \ abs_diff\n    }\n    mad = mad / float64(count)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073973
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var abs_deviations\
    \ []float64\n    var mad float64 = 0.0\n\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    for\
    \ _, number := range numbers {\n        abs_deviations = append(abs_deviations,\
    \ number - mean)\n    }\n\n    for _, abs_deviation := range abs_deviations {\n\
    \        mad += abs_deviation\n    }\n    mad = mad / float64(len(abs_deviations))\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp9yi24th1_test.go:53: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp9yi24th1_test.go:53:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp9yi24th1_test.go:53: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 =\
    \ 0\n    var diff float64 = 0\n    var count float64 = 0\n\n    for _, number\
    \ := range numbers {\n        sum += number\n        count += 1\n    }\n    mean\
    \ = sum / count\n\n    for _, number := range numbers {\n        diff += number\
    \ - mean\n    }\n    mad = diff / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmprz8gdd35_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmprz8gdd35_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmprz8gdd35_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the dataset\n    mean := 0.0\n    for _, number\
    \ := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    // and sum them up\n    sum_absolute_difference := 0.0\n    for _, number\
    \ := range numbers {\n        sum_absolute_difference += math.Abs(number - mean)\n\
    \    }\n\n    // Calculate the mean of the absolute differences\n    mean_absolute_deviation\
    \ := sum_absolute_difference / float64(len(numbers))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7cv04wns_test.go:27:36: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073977
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var abs_deviations\
    \ []float64 = make([]float64, len(numbers))\n    var mad float64 = 0.0\n\n   \
    \ // Calculate mean\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate absolute deviations\n\
    \    for i, number := range numbers {\n        abs_deviations[i] = number - mean\n\
    \        if abs_deviations[i] < 0 {\n            abs_deviations[i] = -abs_deviations[i]\n\
    \        }\n    }\n\n    // Calculate mean absolute deviation\n    for _, abs_deviation\
    \ := range abs_deviations {\n        mad += abs_deviation\n    }\n    mad = mad\
    \ / float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073978
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var count float64 = 0.0\n\n    // Calculate\
    \ the mean\n    for _, number := range numbers {\n        sum += number\n    \
    \    count += 1.0\n    }\n    mean = sum / count\n\n    // Calculate the mean\
    \ absolute deviation\n    for _, number := range numbers {\n        diff = number\
    \ - mean\n        if diff < 0 {\n            diff = -diff\n        }\n       \
    \ mad += diff\n    }\n    mad = mad / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073978
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ float64 = 0.0\n\n    for _, number := range numbers {\n        sum += number\n\
    \        count += 1.0\n    }\n    mean = sum / count\n\n    for _, number := range\
    \ numbers {\n        diff = number - mean\n        abs_diff = diff\n        if\
    \ diff < 0 {\n            abs_diff = -diff\n        }\n        mad += abs_diff\n\
    \    }\n    mad = mad / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073971
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the input numbers\n    mean := 0.0\n    for\
    \ _, number := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    // and sum them up\n    sum_of_absolute_differences := 0.0\n    for _, number\
    \ := range numbers {\n        sum_of_absolute_differences += float64(int64(number\
    \ - mean))\n    }\n\n    // Calculate the mean absolute deviation\n    return\
    \ sum_of_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmprifp8ai6_test.go:49: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmprifp8ai6_test.go:49:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmprifp8ai6_test.go:49: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean of the input numbers\n    mean := 0.0\n    for\
    \ _, number := range numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each number and the mean\n\
    \    // and sum them\n    sum_absolute_differences := 0.0\n    for _, number :=\
    \ range numbers {\n        sum_absolute_differences += abs(number - mean)\n  \
    \  }\n\n    // Return the mean absolute difference\n    return sum_absolute_differences\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsi0kz9zl_test.go:27:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var result float64\
    \ = 0.0\n    var abs_dev float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_dev += abs(numbers[i]\
    \ - mean)\n    }\n    result = abs_dev / float64(n)\n\n    return result\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnyhgejhq_test.go:29:20: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073978
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count\
    \ int = 0\n\n    for _, number := range numbers {\n        sum += number\n   \
    \     count += 1\n    }\n    mean = sum / float64(count)\n\n    for _, number\
    \ := range numbers {\n        diff = number - mean\n        abs_diff = diff\n\
    \        if (diff < 0) {\n            abs_diff = -diff\n        }\n        mad\
    \ += abs_diff\n    }\n    mad = mad / float64(count)\n\n    return mad\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073978
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n    var n int = len(numbers)\n\
    \n    for i = 0; i < n; i++ {\n        sum += numbers[i]\n    }\n    mean = sum\
    \ / float64(n)\n\n    for i = 0; i < n; i++ {\n        abs_diff += math.Abs(numbers[i]\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu4mm81f_test.go:29:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean = sum /\
    \ float64(n)\n\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_565iq_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073968
