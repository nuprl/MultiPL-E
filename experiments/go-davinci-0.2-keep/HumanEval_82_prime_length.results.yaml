language: go_test.go
name: HumanEval_82_prime_length
results:
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement this function\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp5wu69o3h_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp5wu69o3h_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp5wu69o3h_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp5wu69o3h_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp5wu69o3h_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp5wu69o3h_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp5wu69o3h_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp5wu69o3h_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp5wu69o3h_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp5wu69o3h_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    if len(myString) == 0 {\n        return false\n    }\n    if len(myString)\
    \ == 1 {\n        return true\n    }\n    for i := 2; i < len(myString); i++ {\n\
    \        if len(myString) % i == 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpmmx4pjnc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpmmx4pjnc_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var length = len(myString)\n    var isPrime = true\n    if length == 1 {\n\
    \        isPrime = false\n    } else {\n        for i := 2; i < length; i++ {\n\
    \            if length % i == 0 {\n                isPrime = false\n         \
    \       break\n            }\n        }\n    }\n    return isPrime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp91gk5mxa_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement this function\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp5wu69o3h_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp5wu69o3h_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp5wu69o3h_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp5wu69o3h_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp5wu69o3h_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp5wu69o3h_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp5wu69o3h_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp5wu69o3h_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp5wu69o3h_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp5wu69o3h_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var length = len(myString)\n    if length == 2 {\n        return true\n \
    \   }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpqm8f7p57_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpqm8f7p57_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpqm8f7p57_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var length = len(myString)\n    if length == 2 {\n        return true\n \
    \   }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpqm8f7p57_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpqm8f7p57_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpqm8f7p57_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    if len(myString) == 2 || len(myString) == 3 || len(myString) == 5 || len(myString)\
    \ == 7 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    if len(myString) == 2 || len(myString) == 3 || len(myString) == 5 || len(myString)\
    \ == 7 {\n        return true\n    }\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    if length == 1 || length % 2 == 0 {\n        return false\n    }\n    for\
    \ i := 3; i < length; i += 2 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length <= 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n \
    \ candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpswul549u_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpswul549u_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpswul549u_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpswul549u_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpswul549u_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpswul549u_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpswul549u_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpswul549u_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpswul549u_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpswul549u_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return isPrime(len(myString))\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgm7flxxk_test.go:16:12: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp2ct1jjt8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp2ct1jjt8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    if len(myString) == 1 {\n        return false\n    }\n    for i := 2; i <\
    \ len(myString); i++ {\n        if len(myString) % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpa7ycoud0_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement the function\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpx2hxy7qt_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpx2hxy7qt_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpx2hxy7qt_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpx2hxy7qt_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpx2hxy7qt_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpx2hxy7qt_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpx2hxy7qt_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpx2hxy7qt_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpx2hxy7qt_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpx2hxy7qt_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpuvqcsztg_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpuvqcsztg_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpuvqcsztg_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpuvqcsztg_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpuvqcsztg_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpuvqcsztg_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var length = len(myString)\n    if length == 1 {\n        return false\n\
    \    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp0yvongoz_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    if len(myString) == 1 {\n        return false\n    }\n    for i := 2; i <\
    \ len(myString); i++ {\n        if len(myString) % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpa7ycoud0_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    if len(myString) == 2 || len(myString) == 3 || len(myString) == 5 || len(myString)\
    \ == 7 {\n        return true\n    }\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    if length == 2 {\n        return true\n    }\n    for i := 2; i < length;\
    \ i++ {\n        if length % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp0mdz6efm_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpl_kefhnd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpl_kefhnd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpldfedy8q_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpldfedy8q_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp85n79paa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp85n79paa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    if length % 2 == 0 {\n        return false\n    }\n    for i := 3; i < length;\
    \ i += 2 {\n        if length % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpcqm5enno_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpcqm5enno_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpr8kva0h5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpr8kva0h5_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmptgoxu0ou_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmptgoxu0ou_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp2s2mut17_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp2s2mut17_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 2 {\n        return true\n    }\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp00byubmx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp00byubmx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    var isPrime bool = true\n    var length int = len(myString)\n    var i int\
    \ = 2\n    for i < length {\n        if length % i == 0 {\n            isPrime\
    \ = false\n            break\n        }\n        i++\n    }\n    return isPrime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp5jm_mw8t_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp5jm_mw8t_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp5jm_mw8t_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp7gar85e3_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7gar85e3_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// prime_length('Hello')\
    \ == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n\
    // prime_length('orange') == False\nfunc prime_length(myString string) bool {\n\
    \    length := len(myString)\n    if length == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpgcs_2p6h_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073579
