name: HumanEval_148_bf
language: go_test.go
prompt: "package bf_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// There\
  \ are eight planets in our solar system: the closerst to the Sun \n// is Mercury,\
  \ the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n\
  // Write a function that takes two planet names as strings planet1 and planet2.\
  \ \n// The function should return a tuple containing all planets whose orbits are\
  \ \n// located between the orbit of planet1 and the orbit of planet2, sorted by\
  \ \n// the proximity to the sun. \n// The function should return an empty tuple\
  \ if planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
  Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
  ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
  Mars\", \"Jupiter\", \"Saturn\")\nfunc bf(planet1 string, planet2 string) []interface{}\
  \ {\n"
tests: "func TestBf(t *testing.T) {\n  candidate := bf\n\ttype test struct {\n\t\t\
  actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     {\
  \ actual: candidate(\"Jupiter\", \"Neptune\"), expected: []interface{}{\"Saturn\"\
  , \"Uranus\"} },\n     { actual: candidate(\"Earth\", \"Mercury\"), expected: []interface{}{\"\
  Venus\"} },\n     { actual: candidate(\"Mercury\", \"Uranus\"), expected: []interface{}{\"\
  Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"} },\n     { actual: candidate(\"\
  Neptune\", \"Venus\"), expected: []interface{}{\"Earth\", \"Mars\", \"Jupiter\"\
  , \"Saturn\", \"Uranus\"} },\n     { actual: candidate(\"Earth\", \"Earth\"), expected:\
  \ []interface{}{} },\n     { actual: candidate(\"Mars\", \"Earth\"), expected: []interface{}{}\
  \ },\n     { actual: candidate(\"Jupiter\", \"Makemake\"), expected: []interface{}{}\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    planets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var result []interface{}\n\
    \    var start, end int\n    for i, v := range planets {\n        if v == planet1\
    \ {\n            start = i\n        }\n        if v == planet2 {\n           \
    \ end = i\n        }\n    }\n    if start == 0 && end == 0 {\n        return result\n\
    \    }\n    if start > end {\n        start, end = end, start\n    }\n    for\
    \ i := start + 1; i < end; i++ {\n        result = append(result, planets[i])\n\
    \    }\n    return result\n}\n", "    planets := []string{\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n   \
    \ var result []interface{}\n    var start, end int\n    for i, v := range planets\
    \ {\n        if v == planet1 {\n            start = i\n        }\n        if v\
    \ == planet2 {\n            end = i\n        }\n    }\n    if start > end {\n\
    \        start, end = end, start\n    }\n    for i := start + 1; i < end; i++\
    \ {\n        result = append(result, planets[i])\n    }\n    return result\n}\n",
  "    planets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n    var start, end int\n    for i, planet\
    \ := range planets {\n        if planet == planet1 {\n            start = i\n\
    \        }\n        if planet == planet2 {\n            end = i\n        }\n \
    \   }\n    if start == 0 && end == 0 {\n        return []interface{}{}\n    }\n\
    \    if start > end {\n        start, end = end, start\n    }\n    return planets[start+1:end]\n\
    }\n", "    planets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var result []interface{}\n\
    \    var start, end int\n    for i, planet := range planets {\n        if planet\
    \ == planet1 {\n            start = i\n        }\n        if planet == planet2\
    \ {\n            end = i\n        }\n    }\n    if start > end {\n        start,\
    \ end = end, start\n    }\n    for i := start + 1; i < end; i++ {\n        result\
    \ = append(result, planets[i])\n    }\n    return result\n}\n", "    planets :=\
    \ []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n    var result []interface{}\n    var start int\n\
    \    var end int\n    for i, planet := range planets {\n        if planet == planet1\
    \ {\n            start = i\n        }\n        if planet == planet2 {\n      \
    \      end = i\n        }\n    }\n    if start > end {\n        start, end = end,\
    \ start\n    }\n    for i := start + 1; i < end; i++ {\n        result = append(result,\
    \ planets[i])\n    }\n    return result\n}\n", "    planets := []string{\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    var p1, p2 int\n    for i, p := range planets {\n        if p == planet1\
    \ {\n            p1 = i\n        }\n        if p == planet2 {\n            p2\
    \ = i\n        }\n    }\n    if p1 == 0 || p2 == 0 {\n        return []interface{}{}\n\
    \    }\n    if p1 > p2 {\n        p1, p2 = p2, p1\n    }\n    return planets[p1+1:p2]\n\
    }\n", "    planets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var p1, p2 int\n    for i,\
    \ p := range planets {\n        if p == planet1 {\n            p1 = i\n      \
    \  }\n        if p == planet2 {\n            p2 = i\n        }\n    }\n    if\
    \ p1 == 0 || p2 == 0 {\n        return []interface{}{}\n    }\n    if p1 > p2\
    \ {\n        p1, p2 = p2, p1\n    }\n    return planets[p1+1:p2]\n}\n", "    planets\
    \ := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n    planet1Index := -1\n    planet2Index := -1\n \
    \   for i, planet := range planets {\n        if planet == planet1 {\n       \
    \     planet1Index = i\n        }\n        if planet == planet2 {\n          \
    \  planet2Index = i\n        }\n    }\n    if planet1Index == -1 || planet2Index\
    \ == -1 {\n        return []interface{}{}\n    }\n    if planet1Index > planet2Index\
    \ {\n        planet1Index, planet2Index = planet2Index, planet1Index\n    }\n\
    \    return planets[planet1Index+1:planet2Index]\n}\n", "    planets := []string{\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n    var res []interface{}\n    var i1, i2 int\n    for i, v :=\
    \ range planets {\n        if v == planet1 {\n            i1 = i\n        }\n\
    \        if v == planet2 {\n            i2 = i\n        }\n    }\n    if i1 ==\
    \ 0 || i2 == 0 {\n        return res\n    }\n    if i1 > i2 {\n        i1, i2\
    \ = i2, i1\n    }\n    for i := i1+1; i < i2; i++ {\n        res = append(res,\
    \ planets[i])\n    }\n    return res\n}\n", "    planets := []string{\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    var p1, p2 int\n    for i, p := range planets {\n        if p == planet1\
    \ {\n            p1 = i\n        }\n        if p == planet2 {\n            p2\
    \ = i\n        }\n    }\n    if p1 == 0 || p2 == 0 {\n        return []interface{}{}\n\
    \    }\n    if p1 > p2 {\n        p1, p2 = p2, p1\n    }\n    return planets[p1+1:p2]\n\
    }\n", "    var planets = []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var p1, p2 int\n    var\
    \ result []interface{}\n    for i, p := range planets {\n        if p == planet1\
    \ {\n            p1 = i\n        }\n        if p == planet2 {\n            p2\
    \ = i\n        }\n    }\n    if p1 == 0 || p2 == 0 {\n        return result\n\
    \    }\n    if p1 < p2 {\n        for i := p1 + 1; i < p2; i++ {\n           \
    \ result = append(result, planets[i])\n        }\n    } else {\n        for i\
    \ := p2 + 1; i < p1; i++ {\n            result = append(result, planets[i])\n\
    \        }\n    }\n    return result\n}\n", "    planets := []string{\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    var result []interface{}\n    var start, end int\n    for i, v := range\
    \ planets {\n        if v == planet1 {\n            start = i\n        }\n   \
    \     if v == planet2 {\n            end = i\n        }\n    }\n    if start ==\
    \ 0 && end == 0 {\n        return result\n    }\n    if start > end {\n      \
    \  start, end = end, start\n    }\n    for i := start + 1; i < end; i++ {\n  \
    \      result = append(result, planets[i])\n    }\n    return result\n}\n", " \
    \   var planets = []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n    var result []interface{}\n    var\
    \ start, end int\n    for i, planet := range planets {\n        if planet == planet1\
    \ {\n            start = i\n        }\n        if planet == planet2 {\n      \
    \      end = i\n        }\n    }\n    if start == 0 && end == 0 {\n        return\
    \ result\n    }\n    if start > end {\n        start, end = end, start\n    }\n\
    \    for i := start + 1; i < end; i++ {\n        result = append(result, planets[i])\n\
    \    }\n    return result\n}\n", "    planets := []string{\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n   \
    \ p1 := -1\n    p2 := -1\n    for i, p := range planets {\n        if p == planet1\
    \ {\n            p1 = i\n        }\n        if p == planet2 {\n            p2\
    \ = i\n        }\n    }\n    if p1 == -1 || p2 == -1 {\n        return []interface{}{}\n\
    \    }\n    if p1 > p2 {\n        p1, p2 = p2, p1\n    }\n    return planets[p1+1:p2]\n\
    }\n", "    planets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var result []interface{}\n\
    \    var start, end int\n    for i, p := range planets {\n        if p == planet1\
    \ {\n            start = i\n        }\n        if p == planet2 {\n           \
    \ end = i\n        }\n    }\n    if start > end {\n        start, end = end, start\n\
    \    }\n    for i := start + 1; i < end; i++ {\n        result = append(result,\
    \ planets[i])\n    }\n    return result\n}\n", "    planets := []string{\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    var p1, p2 int\n    for i, p := range planets {\n        if p == planet1\
    \ {\n            p1 = i\n        }\n        if p == planet2 {\n            p2\
    \ = i\n        }\n    }\n    if p1 == 0 || p2 == 0 {\n        return []interface{}{}\n\
    \    }\n    if p1 > p2 {\n        p1, p2 = p2, p1\n    }\n    return planets[p1+1:p2]\n\
    }\n", "    var planets = []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var p1, p2 int\n    for\
    \ i, p := range planets {\n        if p == planet1 {\n            p1 = i\n   \
    \     }\n        if p == planet2 {\n            p2 = i\n        }\n    }\n   \
    \ if p1 == 0 || p2 == 0 {\n        return []interface{}{}\n    }\n    var result\
    \ []interface{}\n    if p1 < p2 {\n        for i := p1 + 1; i < p2; i++ {\n  \
    \          result = append(result, planets[i])\n        }\n    } else {\n    \
    \    for i := p2 + 1; i < p1; i++ {\n            result = append(result, planets[i])\n\
    \        }\n    }\n    return result\n}\n", "    planets := []string{\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    var result []interface{}\n    var start, end int\n    for i, v := range\
    \ planets {\n        if v == planet1 {\n            start = i\n        }\n   \
    \     if v == planet2 {\n            end = i\n        }\n    }\n    if start >\
    \ end {\n        start, end = end, start\n    }\n    for i := start + 1; i < end;\
    \ i++ {\n        result = append(result, planets[i])\n    }\n    return result\n\
    }\n", "    planets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var p1, p2 int\n    for i,\
    \ v := range planets {\n        if v == planet1 {\n            p1 = i\n      \
    \  }\n        if v == planet2 {\n            p2 = i\n        }\n    }\n    if\
    \ p1 == 0 || p2 == 0 {\n        return []interface{}{}\n    }\n    if p1 > p2\
    \ {\n        p1, p2 = p2, p1\n    }\n    return planets[p1+1:p2]\n}\n", "    planets\
    \ := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n    var p1, p2 int\n    for i, v := range planets\
    \ {\n        if v == planet1 {\n            p1 = i\n        }\n        if v ==\
    \ planet2 {\n            p2 = i\n        }\n    }\n    if p1 == 0 || p2 == 0 {\n\
    \        return []interface{}{}\n    }\n    if p1 > p2 {\n        p1, p2 = p2,\
    \ p1\n    }\n    return planets[p1+1:p2]\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
