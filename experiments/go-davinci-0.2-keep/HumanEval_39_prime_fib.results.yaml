language: go_test.go
name: HumanEval_39_prime_fib
results:
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, j, k, count int\n    i, j, k = 2, 3, 5\n    count = 2\n\
    \    for count < n {\n        if is_prime(k) {\n            count += 1\n     \
    \   }\n        i, j, k = j, k, i+j\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbf4wxi__test.go:24:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_g8mvhp_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    a, b := 2, 3\n    for i := 3; i <= n; i++ {\n      \
    \  a, b = b, a + b\n        for b % 2 == 0 {\n            b += a\n        }\n\
    \    }\n    return b\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp2k34r2le_test.go:58: expected '%!s(int=89)', got '%!s(int=31)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp2k34r2le_test.go:58:\
    \ expected '%!s(int=233)', got '%!s(int=75)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp2k34r2le_test.go:58: expected '%!s(int=1597)', got '%!s(int=181)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp2k34r2le_test.go:58:\
    \ expected '%!s(int=28657)', got '%!s(int=437)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp2k34r2le_test.go:58: expected '%!s(int=514229)', got '%!s(int=1055)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp2k34r2le_test.go:58:\
    \ expected '%!s(int=433494437)', got '%!s(int=2547)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074374
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    var fib, fib1,\
    \ fib2 int = 0, 2, 3\n    var count int = 2\n    for {\n        fib = fib1 + fib2\n\
    \        fib1 = fib2\n        fib2 = fib\n        if is_prime(fib) {\n       \
    \     count++\n        }\n        if count == n {\n            break\n       \
    \ }\n    }\n    return fib\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpobjelryh_test.go:35:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // TODO: implement me\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp3jsxt_24_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp3jsxt_24_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp3jsxt_24_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp3jsxt_24_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp3jsxt_24_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp3jsxt_24_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp3jsxt_24_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp3jsxt_24_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp3jsxt_24_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp3jsxt_24_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, j, k, count int\n    for i, j, k, count = 0, 1, 0, 0;\
    \ count < n; i, j, k = j, k, i + j {\n        if is_prime(k) {\n            count++\n\
    \        }\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjmyddh03_test.go:22:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    var i int\n    for i = 0; len(fibs) < n;\
    \ i++ {\n        if is_prime(i) {\n            fibs = append(fibs, i)\n      \
    \  }\n    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n \
    \ candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9d4jzq25_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c, i int\n    a, b = 2, 3\n    for i = 3;\
    \ i <= n; i++ {\n        c = a + b\n        a = b\n        b = c\n        for\
    \ b % 2 == 0 {\n            b += a\n            c = b\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpyq6cm27s_test.go:62: expected '%!s(int=89)', got '%!s(int=31)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpyq6cm27s_test.go:62:\
    \ expected '%!s(int=233)', got '%!s(int=75)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpyq6cm27s_test.go:62: expected '%!s(int=1597)', got '%!s(int=181)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpyq6cm27s_test.go:62:\
    \ expected '%!s(int=28657)', got '%!s(int=437)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpyq6cm27s_test.go:62: expected '%!s(int=514229)', got '%!s(int=1055)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpyq6cm27s_test.go:62:\
    \ expected '%!s(int=433494437)', got '%!s(int=2547)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074374
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c int = 2, 3, 5\n    for i := 3; i <= n; i++\
    \ {\n        a, b, c = b, c, a + b\n        for c % b == 0 {\n            c +=\
    \ a\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpp1kvuj_c_test.go:58: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpp1kvuj_c_test.go:58:\
    \ expected '%!s(int=89)', got '%!s(int=21)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpp1kvuj_c_test.go:58: expected '%!s(int=233)', got '%!s(int=34)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpp1kvuj_c_test.go:58:\
    \ expected '%!s(int=1597)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpp1kvuj_c_test.go:58: expected '%!s(int=28657)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpp1kvuj_c_test.go:58:\
    \ expected '%!s(int=514229)', got '%!s(int=144)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpp1kvuj_c_test.go:58: expected '%!s(int=433494437)', got\
    \ '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074374
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_g8mvhp_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := []int{2, 3}\n    for i := 2; i < n; i++ {\n        fib\
    \ = append(fib, fib[i-1]+fib[i-2])\n    }\n    return fib[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_g8mvhp_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, j, k, count int\n    i, j, k = 2, 3, 5\n    count = 2\n\
    \    for count < n {\n        if is_prime(k) {\n            count++\n        }\n\
    \        i, j, k = j, k, i+j\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxrmvct7j_test.go:24:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := []int{2, 3}\n    for i := 2; i < n; i++ {\n        fib\
    \ = append(fib, fib[i-1]+fib[i-2])\n    }\n    return fib[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    var i, j, k\
    \ int\n    i = 2\n    j = 3\n    for k = 3; k <= n; k++ {\n        i, j = j, i\
    \ + j\n        for j % 2 == 0 {\n            i, j = j, i + j\n        }\n    }\n\
    \    return j\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmptbnsw9vy_test.go:63: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmptbnsw9vy_test.go:63:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmptbnsw9vy_test.go:63: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmptbnsw9vy_test.go:63:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmptbnsw9vy_test.go:63: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmptbnsw9vy_test.go:63:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074374
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var a, b, c int = 0, 1, 0\n    var i int = 1\n    for {\n  \
    \      c = a + b\n        a = b\n        b = c\n        if is_prime(c) {\n   \
    \         i++\n            if i == n {\n                return c\n           \
    \ }\n        }\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzb1btksq_test.go:26:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c, i int\n    a, b = 2, 3\n    for i = 3;\
    \ i <= n; i++ {\n        c = a + b\n        a = b\n        b = c\n        for\
    \ b % 2 == 0 {\n            b += a\n            c = b\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpyq6cm27s_test.go:62: expected '%!s(int=89)', got '%!s(int=31)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpyq6cm27s_test.go:62:\
    \ expected '%!s(int=233)', got '%!s(int=75)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpyq6cm27s_test.go:62: expected '%!s(int=1597)', got '%!s(int=181)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpyq6cm27s_test.go:62:\
    \ expected '%!s(int=28657)', got '%!s(int=437)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpyq6cm27s_test.go:62: expected '%!s(int=514229)', got '%!s(int=1055)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpyq6cm27s_test.go:62:\
    \ expected '%!s(int=433494437)', got '%!s(int=2547)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074374
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k, count int\n    i, j, k = 2, 3, 5\n    count\
    \ = 2\n    for {\n        if is_prime(k) {\n            count++\n        }\n \
    \       if count == n {\n            return k\n        }\n        i, j, k = j,\
    \ k, i+j\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp46ciwn3__test.go:30:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c int = 2, 3, 5\n    var i int = 3\n    for\
    \ {\n        if is_prime(c) {\n            if i == n {\n                return\
    \ c\n            }\n            i++\n        }\n        a = b\n        b = c\n\
    \        c = a + b\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdyj7y2p_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    var fib1, fib2,\
    \ fib int = 2, 3, 0\n    var count int = 2\n    for {\n        fib = fib1 + fib2\n\
    \        if is_prime(fib) {\n            count++\n            if count == n {\n\
    \                return fib\n            }\n        }\n        fib1 = fib2\n \
    \       fib2 = fib\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsxvp0x12_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    var i int\n    for i = 1; len(fibs) < n;\
    \ i++ {\n        if is_prime(fib(i)) {\n            fibs = append(fibs, fib(i))\n\
    \        }\n    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbgq2ktgc_test.go:23:12: undefined: is_prime

    /tmp/tmpbgq2ktgc_test.go:23:21: undefined: fib

    /tmp/tmpbgq2ktgc_test.go:24:33: undefined: fib

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var a, b, c int = 0, 1, 0\n    var i int = 0\n    for {\n  \
    \      c = a + b\n        a = b\n        b = c\n        if is_prime(c) {\n   \
    \         i++\n            if i == n {\n                return c\n           \
    \ }\n        }\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73r4l4st_test.go:26:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k, count int\n    i, j, k = 2, 3, 5\n    count\
    \ = 2\n    for {\n        if is_prime(k) {\n            count++\n            if\
    \ count == n {\n                return k\n            }\n        }\n        i,\
    \ j, k = j, k, i+j\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgd9lv_iz_test.go:30:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, j, k, count int\n    for i, j, k, count = 0, 1, 0, 0;\
    \ count < n; i, j, k = j, k, i + j {\n        if is_prime(k) {\n            count++\n\
    \        }\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjmyddh03_test.go:22:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib1, fib2, fib3 int = 2, 3, 5\n    var count int\
    \ = 2\n    for {\n        if is_prime(fib3) {\n            count++\n        }\n\
    \        if count == n {\n            return fib3\n        }\n        fib1 = fib2\n\
    \        fib2 = fib3\n        fib3 = fib1 + fib2\n    }\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxzzvr1vr_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpgau_old8_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpgau_old8_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpgau_old8_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpgau_old8_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpgau_old8_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpgau_old8_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpgau_old8_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpgau_old8_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpgau_old8_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpgau_old8_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074374
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := []int{2, 3}\n    for i := 2; i < n; i++ {\n        fib\
    \ = append(fib, fib[i-1]+fib[i-2])\n    }\n    return fib[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := []int{2, 3}\n    for i := 2; i < n; i++ {\n        fib\
    \ = append(fib, fib[i-1]+fib[i-2])\n    }\n    return fib[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    var i int\n    for i = 0; len(fibs) < n;\
    \ i++ {\n        if is_prime(fib(i)) {\n            fibs = append(fibs, fib(i))\n\
    \        }\n    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwov7a6i_test.go:23:12: undefined: is_prime

    /tmp/tmpfwov7a6i_test.go:23:21: undefined: fib

    /tmp/tmpfwov7a6i_test.go:24:33: undefined: fib

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var a, b, c int = 2, 3, 5\n    for i := 3; i < n; i++ {\n  \
    \      a, b, c = b, c, a + b + c\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpwi3ilt7o_test.go:49: expected '%!s(int=2)', got '%!s(int=5)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpwi3ilt7o_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmpwi3ilt7o_test.go:49: expected '%!s(int=13)', got '%!s(int=10)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpwi3ilt7o_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=18)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpwi3ilt7o_test.go:49: expected '%!s(int=233)', got '%!s(int=33)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpwi3ilt7o_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=61)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpwi3ilt7o_test.go:49: expected '%!s(int=28657)', got '%!s(int=112)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpwi3ilt7o_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=206)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpwi3ilt7o_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=379)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074374
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c int = 2, 3, 5\n    for i := 3; i <= n; i++\
    \ {\n        a, b, c = b, c, a + b\n        for b % c == 0 {\n            b, c\
    \ = c, a + b\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp61t2lxw6_test.go:58:\
    \ expected '%!s(int=89)', got '%!s(int=21)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=233)', got '%!s(int=34)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp61t2lxw6_test.go:58:\
    \ expected '%!s(int=1597)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=28657)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp61t2lxw6_test.go:58:\
    \ expected '%!s(int=514229)', got '%!s(int=144)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=433494437)', got\
    \ '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, a, b, c int\n    for i = 1; i < n; i++ {\n        c =\
    \ a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp9yudcp4d_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp9yudcp4d_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp9yudcp4d_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp9yudcp4d_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp9yudcp4d_test.go:51: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp9yudcp4d_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp9yudcp4d_test.go:51: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp9yudcp4d_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp9yudcp4d_test.go:51: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp9yudcp4d_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074374
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    var fib1, fib2,\
    \ fib3 int = 2, 3, 5\n    for i := 3; i < n; i++ {\n        fib1, fib2, fib3 =\
    \ fib2, fib3, fib1 + fib2\n    }\n    return fib3\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmpiupxe9ta_test.go:58: expected '%!s(int=13)', got '%!s(int=5)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpiupxe9ta_test.go:58:\
    \ expected '%!s(int=89)', got '%!s(int=8)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpiupxe9ta_test.go:58: expected '%!s(int=233)', got '%!s(int=10)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpiupxe9ta_test.go:58:\
    \ expected '%!s(int=1597)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpiupxe9ta_test.go:58: expected '%!s(int=28657)', got '%!s(int=18)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpiupxe9ta_test.go:58:\
    \ expected '%!s(int=514229)', got '%!s(int=23)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpiupxe9ta_test.go:58: expected '%!s(int=433494437)', got\
    \ '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074374
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    var i int\n    for i = 0; len(fibs) < n;\
    \ i++ {\n        if is_prime(fib(i)) {\n            fibs = append(fibs, fib(i))\n\
    \        }\n    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwov7a6i_test.go:23:12: undefined: is_prime

    /tmp/tmpfwov7a6i_test.go:23:21: undefined: fib

    /tmp/tmpfwov7a6i_test.go:24:33: undefined: fib

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n\n    if n == 2 {\n  \
    \      return 3\n    }\n\n    var i int\n    var fib int\n    var fib_prev int\n\
    \    var fib_prev_prev int\n    var count int\n\n    fib_prev_prev = 2\n    fib_prev\
    \ = 3\n    count = 2\n\n    for {\n        fib = fib_prev + fib_prev_prev\n  \
    \      fib_prev_prev = fib_prev\n        fib_prev = fib\n\n        if is_prime(fib)\
    \ {\n            count += 1\n        }\n\n        if count == n {\n          \
    \  break\n        }\n    }\n\n    return fib\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdmfjkxaj_test.go:28:9: i declared but not used

    /tmp/tmpdmfjkxaj_test.go:43:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    var i int\n    for i = 1; len(fibs) < n;\
    \ i++ {\n        if is_prime(i) && is_fib(i) {\n            fibs = append(fibs,\
    \ i)\n        }\n    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfmw_79qe_test.go:23:12: undefined: is_prime

    /tmp/tmpfmw_79qe_test.go:23:27: undefined: is_fib

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c int = 2, 3, 5\n    for i := 3; i <= n; i++\
    \ {\n        a, b, c = b, c, a + b\n        for c % 2 == 0 {\n            c +=\
    \ b\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpwdvivc51_test.go:58: expected '%!s(int=89)', got '%!s(int=23)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpwdvivc51_test.go:58:\
    \ expected '%!s(int=233)', got '%!s(int=41)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpwdvivc51_test.go:58: expected '%!s(int=1597)', got '%!s(int=77)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpwdvivc51_test.go:58:\
    \ expected '%!s(int=28657)', got '%!s(int=141)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpwdvivc51_test.go:58: expected '%!s(int=514229)', got '%!s(int=259)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpwdvivc51_test.go:58:\
    \ expected '%!s(int=433494437)', got '%!s(int=477)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i int\n    var fib int\n    var fib_prev int\n \
    \   var fib_prev_prev int\n    for i = 3; i <= n; i++ {\n        fib_prev_prev\
    \ = fib_prev\n        fib_prev = fib\n        fib = fib_prev + fib_prev_prev\n\
    \        for fib % 2 == 0 {\n            fib_prev_prev = fib_prev\n          \
    \  fib_prev = fib\n            fib = fib_prev + fib_prev_prev\n        }\n   \
    \     for j := 3; j < fib; j++ {\n            if fib % j == 0 {\n            \
    \    fib_prev_prev = fib_prev\n                fib_prev = fib\n              \
    \  fib = fib_prev + fib_prev_prev\n                j = 3\n            }\n    \
    \    }\n    }\n    return fib\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074385
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return -1\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67oewubn_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074373
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k int\n    i = 2\n    j = 3\n    for k = 3;\
    \ k <= n; k++ {\n        i, j = j, i + j\n        for j % 2 == 0 {\n         \
    \   j += i\n        }\n    }\n    return j\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp4zpeicm3_test.go:60: expected '%!s(int=89)', got '%!s(int=31)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp4zpeicm3_test.go:60:\
    \ expected '%!s(int=233)', got '%!s(int=75)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp4zpeicm3_test.go:60: expected '%!s(int=1597)', got '%!s(int=181)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp4zpeicm3_test.go:60:\
    \ expected '%!s(int=28657)', got '%!s(int=437)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp4zpeicm3_test.go:60: expected '%!s(int=514229)', got '%!s(int=1055)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp4zpeicm3_test.go:60:\
    \ expected '%!s(int=433494437)', got '%!s(int=2547)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib_n_1, fib_n_2, fib_n int\n    fib_n_1 = 3\n \
    \   fib_n_2 = 2\n    for i := 3; i <= n; i++ {\n        fib_n = fib_n_1 + fib_n_2\n\
    \        if is_prime(fib_n) {\n            fib_n_2 = fib_n_1\n            fib_n_1\
    \ = fib_n\n        } else {\n            i--\n            fib_n_2 = fib_n_1\n\
    \            fib_n_1 = fib_n\n        }\n    }\n    return fib_n\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0s0z6oll_test.go:31:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fib_numbers []int\n    var prime_fib_numbers []int\n   \
    \ var fib_number int\n    var prime_fib_number int\n    var i int\n    var j int\n\
    \    var k int\n    var l int\n    var m int\n    var n_prime_fib_number int\n\
    \    var prime_fib_number_found bool\n\n    fib_numbers = append(fib_numbers,\
    \ 1)\n    fib_numbers = append(fib_numbers, 2)\n    prime_fib_numbers = append(prime_fib_numbers,\
    \ 2)\n\n    for i = 2; i < n; i++ {\n        fib_number = fib_numbers[i - 1] +\
    \ fib_numbers[i - 2]\n        fib_numbers = append(fib_numbers, fib_number)\n\
    \        prime_fib_number_found = false\n        for j = 0; j < len(prime_fib_numbers);\
    \ j++ {\n            if fib_number % prime_fib_numbers[j] == 0 {\n           \
    \     prime_fib_number_found = true\n                break\n            }\n  \
    \      }\n        if !prime_fib_number_found {\n            prime_fib_numbers\
    \ = append(prime_fib_numbers, fib_number)\n        }\n    }\n\n    n_prime_fib_number\
    \ = 0\n    for k = 0; k < len(fib_numbers); k++ {\n        for l = 0; l < len(prime_fib_numbers);\
    \ l++ {\n            if fib_numbers[k] == prime_fib_numbers[l] {\n           \
    \     n_prime_fib_number++\n                if n_prime_fib_number == n {\n   \
    \                 prime_fib_number = fib_numbers[k]\n                    break\n\
    \                }\n            }\n        }\n        if n_prime_fib_number ==\
    \ n {\n            break\n        }\n    }\n\n    return prime_fib_number\n}\n\
    \nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp648klgyp_test.go:28:9: m declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    var i int\n    for i = 2; i < n; i++ {\n        fibs\
    \ = append(fibs, fibs[i-1] + fibs[i-2])\n    }\n    for i = n - 1; i >= 0; i--\
    \ {\n        if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n \
    \   }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_6cowe6p_test.go:34:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    var i int\n    for i = 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp96ot8oif_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp96ot8oif_test.go:52:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp96ot8oif_test.go:52: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp96ot8oif_test.go:52:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp96ot8oif_test.go:52: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp96ot8oif_test.go:52:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp96ot8oif_test.go:52: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp96ot8oif_test.go:52:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp96ot8oif_test.go:52: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp96ot8oif_test.go:52:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, a, b, c int\n    i = 3\n    a = 2\n    b = 3\n\
    \    for {\n        c = a + b\n        a = b\n        b = c\n        if is_prime(c)\
    \ {\n            i++\n            if i == n {\n                return c\n    \
    \        }\n        }\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz0ccusq_test.go:34:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, a, b, c int\n    for i = 1; i < n; i++ {\n        c =\
    \ a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp9yudcp4d_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp9yudcp4d_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp9yudcp4d_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp9yudcp4d_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp9yudcp4d_test.go:51: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp9yudcp4d_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp9yudcp4d_test.go:51: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp9yudcp4d_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp9yudcp4d_test.go:51: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp9yudcp4d_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074374
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs = []int{2, 3}\n    var i = 2\n    for {\n        if\
    \ i == n {\n            return fibs[i-1]\n        }\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n        if is_prime(fibs[i]) {\n            i++\n  \
    \      }\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp38t52080_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    var i, j, k int\n    for i = 2; len(fibs)\
    \ < n; i++ {\n        if is_prime(i) {\n            fibs = append(fibs, i)\n \
    \           for j = 0; j < len(fibs); j++ {\n                k = fibs[j] + i\n\
    \                if is_prime(k) {\n                    fibs = append(fibs, k)\n\
    \                }\n            }\n        }\n    }\n    return fibs[n-1]\n}\n\
    \nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3p13cae2_test.go:23:12: undefined: is_prime

    /tmp/tmp3p13cae2_test.go:27:20: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var a, b, c int\n    a, b = 1, 1\n    for i := 1; i < n; i++\
    \ {\n        c = a + b\n        a, b = b, c\n        for b % 2 == 0 {\n      \
    \      b = b / 2\n        }\n        for b % 3 == 0 {\n            b = b / 3\n\
    \        }\n        for b % 5 == 0 {\n            b = b / 5\n        }\n     \
    \   for b % 7 == 0 {\n            b = b / 7\n        }\n        for b % 11 ==\
    \ 0 {\n            b = b / 11\n        }\n        for b % 13 == 0 {\n        \
    \    b = b / 13\n        }\n        for b % 17 == 0 {\n            b = b / 17\n\
    \        }\n        for b % 19 == 0 {\n            b = b / 19\n        }\n   \
    \     for b % 23 == 0 {\n            b = b / 23\n        }\n        for b % 29\
    \ == 0 {\n            b = b / 29\n        }\n        for b % 31 == 0 {\n     \
    \       b = b / 31\n        }\n        for b % 37 == 0 {\n            b = b /\
    \ 37\n        }\n        for b % 41 == 0 {\n            b = b / 41\n        }\n\
    \        for b % 43 == 0 {\n            b = b / 43\n        }\n        for b %\
    \ 47 == 0 {\n            b = b / 47\n        }\n        for b % 53 == 0 {\n  \
    \          b = b / 53\n        }\n        for b % 59 == 0 {\n            b = b\
    \ / 59\n        }\n        for b % 61 == 0 {\n            b = b / 61\n       \
    \ }\n        for b % 67 == 0 {\n            b = b / 67\n        }\n        for\
    \ b % 71 == 0 {\n            b = b / 71\n        }\n        for b % 73 == 0 {\n\
    \            b = b / 73\n        }\n        for b % 79 == 0 {\n            b =\
    \ b / 79\n        }\n        for b % 83 == 0 {\n            b = b / 83\n     \
    \   }\n        for b % 89 == 0 {\n            b = b / 89\n        }\n        for\
    \ b % 97 == 0\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3s3_lv7l_test.go:98:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074375
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var a, b, c int = 0, 1, 1\n    var i int = 1\n    for i < n\
    \ {\n        c = a + b\n        a = b\n        b = c\n        if is_prime(c) {\n\
    \            i++\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzx1bymu8_test.go:26:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    var fibs []int\n\
    \    fibs = append(fibs, 2)\n    fibs = append(fibs, 3)\n    for i := 2; i < n;\
    \ i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n    }\n    for i\
    \ := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i]) {\n          \
    \  return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfujo6y22_test.go:36:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var a, b, c, i int\n    a, b = 1, 1\n    for i = 0; i < n; i++\
    \ {\n        c = a + b\n        a = b\n        b = c\n        if is_prime(c) {\n\
    \            i++\n            if i == n {\n                return c\n        \
    \    }\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdcx8f1vc_test.go:26:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_g8mvhp_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    i := 2\n    for {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \        i++\n        if is_prime(fibs[i-1]) {\n            n--\n            if\
    \ n == 0 {\n                return fibs[i-1]\n            }\n        }\n    }\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5v1mcrww_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k, l int\n    i = 2\n    j = 3\n    k = 5\n\
    \    l = 3\n    for {\n        if is_prime(k) {\n            l += 1\n        \
    \    if l == n {\n                return k\n            }\n        }\n       \
    \ i = j\n        j = k\n        k = i + j\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprcwsfz2__test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k int\n    i = 2\n    j = 3\n    k = 0\n \
    \   for n > 2 {\n        k = i + j\n        i = j\n        j = k\n        if is_prime(k)\
    \ {\n            n--\n        }\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqt_23tno_test.go:34:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs = []int{2, 3}\n    var i = 2\n    for {\n        var\
    \ fib = fibs[i-1] + fibs[i-2]\n        if is_prime(fib) {\n            fibs =\
    \ append(fibs, fib)\n            i++\n        }\n        if i == n {\n       \
    \     return fib\n        }\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgcslsuxs_test.go:24:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib1 int = 2\n    var fib2 int = 3\n    var fib\
    \ int = 0\n    var count int = 2\n    for {\n        fib = fib1 + fib2\n     \
    \   if is_prime(fib) {\n            count++\n        }\n        if count == n\
    \ {\n            break\n        }\n        fib1 = fib2\n        fib2 = fib\n \
    \   }\n    return fib\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9c1b97vh_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n\n    if n == 2 {\n  \
    \      return 3\n    }\n\n    var fib_n_2, fib_n_1, fib_n int = 2, 3, 5\n    var\
    \ count int = 2\n\n    for {\n        if is_prime(fib_n) {\n            count++\n\
    \        }\n\n        if count == n {\n            break\n        }\n\n      \
    \  fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n        fib_n = fib_n_1 + fib_n_2\n\
    \    }\n\n    return fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgadtbd57_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fib_nums []int\n    var prime_fib_nums []int\n    var prime_fib_num\
    \ int\n    fib_nums = append(fib_nums, 1)\n    fib_nums = append(fib_nums, 2)\n\
    \    prime_fib_nums = append(prime_fib_nums, 2)\n    for i := 2; i < n; i++ {\n\
    \        fib_nums = append(fib_nums, fib_nums[i-1] + fib_nums[i-2])\n        if\
    \ is_prime(fib_nums[i]) {\n            prime_fib_nums = append(prime_fib_nums,\
    \ fib_nums[i])\n        }\n    }\n    prime_fib_num = prime_fib_nums[len(prime_fib_nums)-1]\n\
    \    return prime_fib_num\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxw7uazz_test.go:28:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k, count int\n    i, j, k = 2, 3, 5\n    count\
    \ = 2\n    for count < n {\n        if is_prime(k) {\n            count++\n  \
    \      }\n        i, j, k = j, k, i+j\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpps4uwi52_test.go:30:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_g8mvhp_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs)-1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmparya2h1r_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    var fibs []int\n\
    \    fibs = append(fibs, 2)\n    fibs = append(fibs, 3)\n    var i int\n    for\
    \ i = 3; i <= n; i++ {\n        fibs = append(fibs, fibs[i-2] + fibs[i-3])\n \
    \       if is_prime(fibs[i-1]) {\n            break\n        }\n    }\n    return\
    \ fibs[i-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp71ezbazs_test.go:35:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_g8mvhp_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    a, b := 2, 3\n    for i := 3; i <= n; i++ {\n      \
    \  a, b = b, a + b\n        for b % 2 == 0 {\n            b += a\n        }\n\
    \    }\n    return b\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp2k34r2le_test.go:58: expected '%!s(int=89)', got '%!s(int=31)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp2k34r2le_test.go:58:\
    \ expected '%!s(int=233)', got '%!s(int=75)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp2k34r2le_test.go:58: expected '%!s(int=1597)', got '%!s(int=181)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp2k34r2le_test.go:58:\
    \ expected '%!s(int=28657)', got '%!s(int=437)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp2k34r2le_test.go:58: expected '%!s(int=514229)', got '%!s(int=1055)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp2k34r2le_test.go:58:\
    \ expected '%!s(int=433494437)', got '%!s(int=2547)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074374
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c int = 2, 3, 5\n    for i := 3; i <= n; i++\
    \ {\n        a, b, c = b, c, a + b\n        for c % 2 == 0 {\n            c +=\
    \ b\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpwdvivc51_test.go:58: expected '%!s(int=89)', got '%!s(int=23)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpwdvivc51_test.go:58:\
    \ expected '%!s(int=233)', got '%!s(int=41)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpwdvivc51_test.go:58: expected '%!s(int=1597)', got '%!s(int=77)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpwdvivc51_test.go:58:\
    \ expected '%!s(int=28657)', got '%!s(int=141)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpwdvivc51_test.go:58: expected '%!s(int=514229)', got '%!s(int=259)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpwdvivc51_test.go:58:\
    \ expected '%!s(int=433494437)', got '%!s(int=477)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k int\n    i = 2\n    j = 3\n    k = 5\n \
    \   for n > 2 {\n        i = j\n        j = k\n        k = i + j\n        if is_prime(k)\
    \ {\n            n--\n        }\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0pbdj500_test.go:34:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    var primes []int\n    for _, fib := range fibs {\n        if is_prime(fib)\
    \ {\n            primes = append(primes, fib)\n        }\n    }\n    return primes[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpux9azrpo_test.go:28:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    var primes []int\n    for _, fib := range fibs {\n        if is_prime(fib)\
    \ {\n            primes = append(primes, fib)\n        }\n    }\n    return primes[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpux9azrpo_test.go:28:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    var a, b, c,\
    \ i int\n    a, b, c = 2, 3, 5\n    for i = 3; i < n; i++ {\n        a, b, c =\
    \ b, c, a + b\n        for c % 2 == 0 {\n            a, b, c = b, c, a + b\n \
    \       }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmpyum3c4lv_test.go:62: expected '%!s(int=13)', got '%!s(int=5)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpyum3c4lv_test.go:62:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpyum3c4lv_test.go:62: expected '%!s(int=233)', got '%!s(int=23)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpyum3c4lv_test.go:62:\
    \ expected '%!s(int=1597)', got '%!s(int=31)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpyum3c4lv_test.go:62: expected '%!s(int=28657)', got '%!s(int=41)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpyum3c4lv_test.go:62:\
    \ expected '%!s(int=514229)', got '%!s(int=95)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpyum3c4lv_test.go:62: expected '%!s(int=433494437)', got\
    \ '%!s(int=167)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074376
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
