language: go_test.go
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpw7eyylpp_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpw7eyylpp_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpw7eyylpp_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for i, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpp3bvua_u_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var odd_count int\n        for _, c := range s {\n            if c %\
    \ 2 == 1 {\n                odd_count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", odd_count, odd_count, odd_count, odd_count))\n    }\n    return\
    \ result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for i, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpp3bvua_u_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var odd int\n        for _, c := range s {\n            if c % 2 == 1 {\n\
    \                odd++\n            }\n        }\n        res = append(res, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", odd, odd, odd,\
    \ odd))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var odd_count int\n        for _, c := range str {\n            if c\
    \ % 2 == 1 {\n                odd_count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", odd_count, odd_count, odd_count, odd_count))\n    }\n    return\
    \ result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for i, v := range lst {\n  \
    \      var count int\n        for _, c := range v {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpjbrefqhw_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpjbrefqhw_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpjbrefqhw_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count += 1\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd_count := 0\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                odd_count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", odd_count, odd_count, odd_count, odd_count))\n    }\n    return\
    \ result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4a6l7or8_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4a6l7or8_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4a6l7or8_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if int(c) %\
    \ 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, ch := range str {\n            if ch %\
    \ 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c - '0'\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp380g1js2_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 0n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp380g1js2_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 0n the str0ng 0 of the 0nput. the number of\
    \ odd elements 0n the str0ng 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp380g1js2_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 0n the str0ng 0 of the 0nput. the number of odd elements\
    \ 0n the str0ng 0 of the 0nput. the number of odd elements 0n the str0ng 0 of\
    \ the 0nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for i, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpp3bvua_u_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd_count := 0\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                odd_count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", odd_count, odd_count, odd_count, odd_count))\n    }\n    return\
    \ result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        odd := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n\
    \                odd += 1\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , odd, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpbprljt_h_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpbprljt_h_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpbprljt_h_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    // your code here\n    return nil\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5ar1415a_test.go:37: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp5ar1415a_test.go:37: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n  \
    \      tmp5ar1415a_test.go:37: expected '[the number of odd elements 2n the str2ng\
    \ 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the\
    \ number of odd elements 2n the str2ng 2 of the 2nput.]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd := 0\n        for _, c := range s {\n            if (c - '0') % 2\
    \ == 1 {\n                odd++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , odd, odd, odd, odd))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      var count int\n        for _, c := range v {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.016s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c%2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4a6l7or8_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4a6l7or8_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4a6l7or8_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, vv := range v {\n            if vv % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var odd int\n        for _, c := range s {\n            if c % 2 == 1 {\n\
    \                odd++\n            }\n        }\n        res = append(res, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", odd, odd, odd,\
    \ odd))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, ch := range str {\n            if (ch -\
    \ '0') % 2 == 1 {\n                count++\n            }\n        }\n       \
    \ result = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\", count, count, count, count))\n    }\n    return result\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4a6l7or8_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4a6l7or8_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4a6l7or8_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var ret []string\n    for i, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        ret = append(ret,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return ret\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmppwz42cu4_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmppwz42cu4_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmppwz42cu4_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        odd_count := 0\n        for _, c := range s {\n       \
    \     if c % 2 == 1 {\n                odd_count++\n            }\n        }\n\
    \        result[i] = fmt.Sprintf(\"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\", odd_count, i, i, i)\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpowjauane_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpowjauane_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpowjauane_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c-'0')%2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      var count int\n        for _, vv := range v {\n            if vv % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count += 1\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        odd_count := 0\n        for _, c := range s {\n       \
    \     if c % 2 == 1 {\n                odd_count++\n            }\n        }\n\
    \        result[i] = fmt.Sprintf(\"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\", odd_count, i+1, i+1, i+1)\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmphl14qosu_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str1ng\
    \ 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmphl14qosu_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of\
    \ odd elements 8n the str2ng 2 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmphl14qosu_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str1ng 1 of the 1nput. the number of odd elements\
    \ 3n the str2ng 2 of the 2nput. the number of odd elements 2n the str3ng 3 of\
    \ the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        output = append(output,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return output\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, vv := range v {\n            if (vv - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        odd_count := 0\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                odd_count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", odd_count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp7u577y06_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp7u577y06_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp7u577y06_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if int(c) %\
    \ 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if int(c)\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var odd_count int\n        for _, c := range str {\n            if c\
    \ % 2 == 1 {\n                odd_count += 1\n            }\n        }\n     \
    \   result = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\", odd_count, odd_count, odd_count, odd_count))\n    }\n \
    \   return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    // your code here\n    return nil\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5ar1415a_test.go:37: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp5ar1415a_test.go:37: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n  \
    \      tmp5ar1415a_test.go:37: expected '[the number of odd elements 2n the str2ng\
    \ 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput. the\
    \ number of odd elements 2n the str2ng 2 of the 2nput.]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for i, v := range lst {\n  \
    \      var count int\n        for _, c := range v {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpjbrefqhw_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpjbrefqhw_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpjbrefqhw_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, char := range str {\n            if char\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for i, s := range lst {\n  \
    \      res = append(res, fmt.Sprintf(\"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\",\n            odd_count_helper(s), i, i, i))\n    }\n  \
    \  return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbfce1e05_test.go:21:13: undefined: odd_count_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if int(c) % 2\
    \ == 1 {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpw7eyylpp_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpw7eyylpp_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpw7eyylpp_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpw7eyylpp_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpw7eyylpp_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpw7eyylpp_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c == '1'\
    \ || c == '3' || c == '5' || c == '7' || c == '9' {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count += 1\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var oddCount int\n        for _, char := range str {\n            if\
    \ char % 2 == 1 {\n                oddCount++\n            }\n        }\n    \
    \    result = append(result, fmt.Sprintf(\"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount))\n    }\n\
    \    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd_count := 0\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                odd_count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", odd_count, odd_count, odd_count, odd_count))\n    }\n    return\
    \ result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, v := range str {\n            if v % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count += 1\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, ch := range str {\n            if ch %\
    \ 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, char := range str {\n            if char\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        output =\
    \ append(output, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return output\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var out []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c%2 == 1 {\n\
    \                count++\n            }\n        }\n        out = append(out,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return out\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        output = append(output,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return output\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        oddCount := 0\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                oddCount++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", oddCount, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpum5bpj2j_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpum5bpj2j_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpum5bpj2j_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpw7eyylpp_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpw7eyylpp_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpw7eyylpp_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c == '1'\
    \ || c == '3' || c == '5' || c == '7' || c == '9' {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var out []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        out = append(out,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return out\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073789
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, vv := range v {\n            if vv % 2\
    \ == 1 {\n                count += 1\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d\
    \ of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073789
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for i, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i+1, i+1, i+1))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpuc3718a__test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str1ng\
    \ 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpuc3718a__test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of\
    \ odd elements 8n the str2ng 2 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpuc3718a__test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str1ng 1 of the 1nput. the number of odd elements\
    \ 3n the str2ng 2 of the 2nput. the number of odd elements 2n the str3ng 3 of\
    \ the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073789
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for i, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpp3bvua_u_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count += 1\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073789
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4a6l7or8_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4a6l7or8_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4a6l7or8_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for i, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpp3bvua_u_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, count, count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for i, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpp3bvua_u_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpp3bvua_u_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    , count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4n6df4vm_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4n6df4vm_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n\
    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"\
    11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    ,\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for i, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\", count, i, i, i))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4a6l7or8_test.go:46: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp4a6l7or8_test.go:46: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp4a6l7or8_test.go:46: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073785
