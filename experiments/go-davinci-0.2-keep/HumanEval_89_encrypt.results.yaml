language: go_test.go
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpdexorwbj_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpdexorwbj_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpdexorwbj_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpdexorwbj_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // TODO: Implement this function\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpkqt3r71m_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpkqt3r71m_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpkqt3r71m_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpkqt3r71m_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpkqt3r71m_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpdexorwbj_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpdexorwbj_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpdexorwbj_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpdexorwbj_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // TODO: Implement this function\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpkqt3r71m_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpkqt3r71m_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpkqt3r71m_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpkqt3r71m_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpkqt3r71m_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppaqb9csw_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpdexorwbj_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpdexorwbj_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpdexorwbj_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpdexorwbj_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // TODO: implement this function\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp16x6yuts_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp16x6yuts_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp16x6yuts_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp16x6yuts_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp16x6yuts_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp16x6yuts_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp16x6yuts_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp16x6yuts_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // TODO: Implement this function\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpkqt3r71m_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpkqt3r71m_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpkqt3r71m_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpkqt3r71m_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpkqt3r71m_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8oie1yd_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpdexorwbj_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpdexorwbj_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpdexorwbj_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpdexorwbj_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpdexorwbj_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpdexorwbj_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpdexorwbj_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpdexorwbj_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // TODO: Implement\n    return \"\
    \"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpcv0ukd97_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpcv0ukd97_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpcv0ukd97_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpcv0ukd97_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpcv0ukd97_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpcv0ukd97_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpcv0ukd97_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpcv0ukd97_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write code here\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqco_w0iz_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // TODO: Implement\n    return \"\
    \"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpcv0ukd97_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpcv0ukd97_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpcv0ukd97_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpcv0ukd97_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpcv0ukd97_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpcv0ukd97_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpcv0ukd97_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpcv0ukd97_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // TODO: Implement this function\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpkqt3r71m_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpkqt3r71m_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpkqt3r71m_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpkqt3r71m_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpkqt3r71m_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpkqt3r71m_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // TODO: Implement me\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpkm2707ni_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpkm2707ni_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpkm2707ni_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpkm2707ni_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpkm2707ni_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpkm2707ni_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpkm2707ni_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpkm2707ni_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpdexorwbj_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpdexorwbj_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpdexorwbj_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpdexorwbj_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppaqb9csw_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpdexorwbj_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpdexorwbj_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpdexorwbj_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpdexorwbj_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpdexorwbj_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpdexorwbj_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp87zcfb3o_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp87zcfb3o_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp87zcfb3o_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp87zcfb3o_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp87zcfb3o_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpht38g9s1_test.go:41: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpht38g9s1_test.go:41: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpht38g9s1_test.go:41: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpht38g9s1_test.go:41: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpht38g9s1_test.go:41:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpht38g9s1_test.go:41: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns\
    \ 'ix'\nfunc encrypt(s string) string {\n    // Write your code here\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpzllj2kna_test.go:42: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpzllj2kna_test.go:42: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpzllj2kna_test.go:42: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpzllj2kna_test.go:42: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpzllj2kna_test.go:42:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpzllj2kna_test.go:42: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073972
