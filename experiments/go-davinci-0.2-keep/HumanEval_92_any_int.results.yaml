language: go_test.go
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    return (x + y == z || x + z == y || y + z == x) && (x == int(x) && y == int(y)\
    \ && z == int(z))\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9yw0ow6d_test.go:17:62: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmp9yw0ow6d_test.go:17:77: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmp9yw0ow6d_test.go:17:92: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    return int(x) + int(y) == int(z) || int(x) + int(z) == int(y) || int(y) +\
    \ int(z) == int(x)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpt16i1vxi_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if (x + y == z || x + z == y || y + z == x) && (x == int(x) && y == int(y)\
    \ && z == int(z)) {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmlp57bu__test.go:17:58: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmpmlp57bu__test.go:17:73: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmpmlp57bu__test.go:17:88: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    return (x == y + z || y == x + z || z == x + y) && (x == int(x) && y == int(y)\
    \ && z == int(z))\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9uob7cdq_test.go:17:62: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmp9uob7cdq_test.go:17:77: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmp9uob7cdq_test.go:17:92: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if (x + y == z) || (x + z == y) || (y + z == x) {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp6fds5zs1_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp6fds5zs1_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x + y == z || x + z == y || y + z == x {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpf1cp06l2_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpf1cp06l2_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    return (x + y == z) || (x + z == y) || (y + z == x)\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp8rfrg6hg_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp8rfrg6hg_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    return (x == y + z || y == x + z || z == x + y) && (x == int(x) && y == int(y)\
    \ && z == int(z))\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9uob7cdq_test.go:17:62: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmp9uob7cdq_test.go:17:77: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmp9uob7cdq_test.go:17:92: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    return (x + y == z || x + z == y || y + z == x) && (x == int(x) && y == int(y)\
    \ && z == int(z))\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9yw0ow6d_test.go:17:62: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmp9yw0ow6d_test.go:17:77: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmp9yw0ow6d_test.go:17:92: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy2k0bha__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy2k0bha__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073514
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n//\
    \ any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
    \ -2.2, 2) \u279E False\nfunc any_int(x float64, y float64, z float64) bool {\n\
    \    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp7zw4zfjn_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7zw4zfjn_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073514
