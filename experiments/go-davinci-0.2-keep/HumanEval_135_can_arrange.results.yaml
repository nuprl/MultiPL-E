language: go_test.go
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  if maxIndex == 0 {\n        return -1\n    }\n    for i := maxIndex - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n            return -1\n     \
    \   }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpqsmmtn1m_test.go:58: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpqsmmtn1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpqsmmtn1m_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpqsmmtn1m_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < max\
    \ {\n            return i - 1\n        }\n        if arr[i] > max {\n        \
    \    max = arr[i]\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp587j6i9f_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp587j6i9f_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp587j6i9f_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp587j6i9f_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] >= arr[1] {\n            return 0\n        } else\
    \ {\n            return -1\n        }\n    }\n    var max int\n    for i := len(arr)\
    \ - 1; i >= 0; i-- {\n        if arr[i] >= max {\n            max = arr[i]\n \
    \       } else {\n            return i\n        }\n    }\n    return -1\n}\n\n\
    func TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpqgwjpdmm_test.go:57: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpqgwjpdmm_test.go:57:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpqgwjpdmm_test.go:57: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] >= arr[i-1] {\n            return i - 1\n        }\n  \
    \  }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpk0vkymxu_test.go:41: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk0vkymxu_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk0vkymxu_test.go:41: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    max_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n\
    \    for i := max_index - 1; i >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n\
    \            return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpqavapbog_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpqavapbog_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpqavapbog_test.go:55: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    var max int = arr[0]\n    var max_index int = 0\n    for i :=\
    \ 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \            max_index = i\n        }\n    }\n    if max_index == 0 {\n      \
    \  return -1\n    }\n    for i := max_index - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[max_index] {\n            return -1\n        }\n    }\n    return max_index\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp1th5ie2g_test.go:55: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp1th5ie2g_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp1th5ie2g_test.go:55: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp1th5ie2g_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  for i := maxIndex - 1; i >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n  \
    \          return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3z427me5_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3z427me5_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3z427me5_test.go:55: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var i int\n    for i = len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i -\
    \ 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpflpkhh0f_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpflpkhh0f_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpflpkhh0f_test.go:42: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Your code here\n    return 0\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmphmbby4a1_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmphmbby4a1_test.go:37:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmphmbby4a1_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmphmbby4a1_test.go:37:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmphmbby4a1_test.go:37: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // your code here\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpuekaha67_test.go:37: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpuekaha67_test.go:37:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpuekaha67_test.go:37: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // your code here\n    return 0\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmplqr9fslb_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmplqr9fslb_test.go:37:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmplqr9fslb_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmplqr9fslb_test.go:37:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmplqr9fslb_test.go:37: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] >= arr[i-1] {\n            continue\n \
    \       }\n        return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    maxIndex :=\
    \ 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n  \
    \          if i > maxIndex {\n                maxIndex = i\n            }\n  \
    \      }\n    }\n    if maxIndex == 0 {\n        return -1\n    }\n    return\
    \ maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    max_index := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            max_index\
    \ = i\n        }\n    }\n    if max_index == 0 {\n        return -1\n    }\n \
    \   for i := max_index - 1; i >= 0; i-- {\n        if arr[i] > arr[max_index]\
    \ {\n            return -1\n        }\n    }\n    return max_index\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpofgsvmgh_test.go:55: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpofgsvmgh_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpofgsvmgh_test.go:55: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpofgsvmgh_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // your code here\n    return 0\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmplqr9fslb_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmplqr9fslb_test.go:37:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmplqr9fslb_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmplqr9fslb_test.go:37:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmplqr9fslb_test.go:37: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  for i := 0; i < maxIndex; i++ {\n        if arr[i] > arr[i+1] {\n         \
    \   return -1\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp0gfhjptx_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp0gfhjptx_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp0gfhjptx_test.go:55: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp0gfhjptx_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  if maxIndex == 0 {\n        return -1\n    }\n    return maxIndex\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpffigx05r_test.go:53: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpffigx05r_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpffigx05r_test.go:53: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpffigx05r_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int\n    for i := len(arr)\
    \ - 1; i >= 0; i-- {\n        if arr[i] >= max {\n            max = arr[i]\n \
    \       } else {\n            return i\n        }\n    }\n    return -1\n}\n\n\
    func TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpzb7mgmy8_test.go:44: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzb7mgmy8_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzb7mgmy8_test.go:44: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // your code here\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpuekaha67_test.go:37: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpuekaha67_test.go:37:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpuekaha67_test.go:37: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int\n    for i := len(arr)\
    \ - 1; i >= 0; i-- {\n        if arr[i] >= max {\n            max = arr[i]\n \
    \       } else {\n            return i\n        }\n    }\n    return -1\n}\n\n\
    func TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpzb7mgmy8_test.go:44: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzb7mgmy8_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzb7mgmy8_test.go:44: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int\n    for i := len(arr)\
    \ - 1; i >= 0; i-- {\n        if arr[i] < max {\n            return i\n      \
    \  }\n        max = arr[i]\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpt4kuwhuf_test.go:43: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpt4kuwhuf_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpt4kuwhuf_test.go:43: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    maxIndex := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i := 0; i < maxIndex; i++ {\n        if arr[i]\
    \ > arr[maxIndex] {\n            return -1\n        }\n    }\n    return maxIndex\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpeehc_o97_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpeehc_o97_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpeehc_o97_test.go:52: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpeehc_o97_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := 0\n \
    \   for i := 1; i < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n       \
    \     if i > max {\n                max = i\n            }\n        }\n    }\n\
    \    if max == 0 {\n        return -1\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] >= arr[i-1] {\n            continue\n        }\n      \
    \  return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int\n    for i := 0; i\
    \ < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n   \
    \     }\n    }\n    var count = make([]int, max + 1)\n    for i := 0; i < len(arr);\
    \ i++ {\n        count[arr[i]]++\n    }\n    for i := 1; i < len(count); i++ {\n\
    \        count[i] += count[i - 1]\n    }\n    for i := 0; i < len(arr); i++ {\n\
    \        if count[arr[i]] - 1 == i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp1eylv2t1_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp1eylv2t1_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp1eylv2t1_test.go:54: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp1eylv2t1_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  if maxIndex == 0 {\n        return -1\n    }\n    for i := 0; i < maxIndex;\
    \ i++ {\n        if arr[i] > arr[maxIndex] {\n            return -1\n        }\n\
    \    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpoahc851m_test.go:58: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpoahc851m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpoahc851m_test.go:58: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpoahc851m_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var index int = -1\n    for i :=\
    \ 0; i < len(arr) - 1; i++ {\n        if arr[i] >= arr[i + 1] {\n            index\
    \ = i\n        }\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpsybvcs_0_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpsybvcs_0_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpsybvcs_0_test.go:42: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    max_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n\
    \    if max_index == 0 {\n        return -1\n    }\n    for i := max_index - 1;\
    \ i >= 0; i-- {\n        if arr[i] > arr[max_index] {\n            return -1\n\
    \        }\n    }\n    return max_index\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpq599hgm0_test.go:58: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpq599hgm0_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpq599hgm0_test.go:58: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpq599hgm0_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // Your code here\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp7tjf6urq_test.go:37: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp7tjf6urq_test.go:37:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp7tjf6urq_test.go:37: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    max_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n\
    \    for i := max_index - 1; i >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n\
    \            return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpqavapbog_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpqavapbog_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpqavapbog_test.go:55: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  for i := 0; i < maxIndex; i++ {\n        if arr[i] > arr[i+1] {\n         \
    \   return -1\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp0gfhjptx_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp0gfhjptx_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp0gfhjptx_test.go:55: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp0gfhjptx_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    max_index := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            max_index\
    \ = i\n        }\n    }\n    for i := 0; i < max_index; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            return -1\n        }\n    }\n    return max_index\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmps79bk2ef_test.go:52: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmps79bk2ef_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmps79bk2ef_test.go:52: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmps79bk2ef_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] <= arr[1] {\n            return 0\n        } else\
    \ {\n            return -1\n        }\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    max_index := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            max_index\
    \ = i\n        }\n    }\n    if max_index == 0 {\n        return -1\n    }\n \
    \   for i := max_index - 1; i >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n\
    \            return -1\n        }\n    }\n    return max_index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp7bfpy3ef_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp7bfpy3ef_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp7bfpy3ef_test.go:55: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp7bfpy3ef_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] >= arr[1] {\n            return 0\n        } else\
    \ {\n            return -1\n        }\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // your code here\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpuekaha67_test.go:37: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpuekaha67_test.go:37:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpuekaha67_test.go:37: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    max_index := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            max_index\
    \ = i\n        }\n    }\n    if max_index == 0 {\n        return -1\n    }\n \
    \   for i := 0; i < max_index; i++ {\n        if arr[i] >= arr[i+1] {\n      \
    \      return -1\n        }\n    }\n    return max_index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_6tlkfhg_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_6tlkfhg_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_6tlkfhg_test.go:55: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_6tlkfhg_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] >= arr[i-1] {\n            continue\n        }\n      \
    \  return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // your code here\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpuekaha67_test.go:37: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpuekaha67_test.go:37:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpuekaha67_test.go:37: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < max\
    \ {\n            return i - 1\n        }\n        if arr[i] > max {\n        \
    \    max = arr[i]\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp587j6i9f_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp587j6i9f_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp587j6i9f_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp587j6i9f_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] <= arr[1] {\n            return 0\n        } else\
    \ {\n            return -1\n        }\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] >= arr[i-1] {\n            continue\n        } else\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] <= arr[1] {\n            return 0\n        } else\
    \ {\n            return -1\n        }\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] >= arr[i-1] {\n            continue\n \
    \       }\n        return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] >= arr[i-1] {\n            continue\n \
    \       }\n        return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] >= arr[i-1] {\n            return i-1\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmp_ugu7tug_test.go:41: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp_ugu7tug_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp_ugu7tug_test.go:41: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    max_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n\
    \    for i := 0; i < max_index; i++ {\n        if arr[i] > arr[i+1] {\n      \
    \      return -1\n        }\n    }\n    return max_index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpfde441ze_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpfde441ze_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpfde441ze_test.go:55: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpfde441ze_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  for i := 0; i < maxIndex; i++ {\n        if arr[i] > arr[i+1] {\n         \
    \   return -1\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp0gfhjptx_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp0gfhjptx_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp0gfhjptx_test.go:55: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp0gfhjptx_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    max_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n\
    \    for i := max_index - 1; i >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n\
    \            return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpqavapbog_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpqavapbog_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpqavapbog_test.go:55: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    maxIndex := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i := maxIndex - 1; i >= 0; i-- {\n        if\
    \ arr[i] > arr[i + 1] {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_o8p9atb_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp_o8p9atb_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp_o8p9atb_test.go:52: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  if maxIndex == 0 {\n        return -1\n    }\n    for i := maxIndex - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n            return -1\n     \
    \   }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpqsmmtn1m_test.go:58: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpqsmmtn1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpqsmmtn1m_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpqsmmtn1m_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    max_index := 0\n    for i, v := range arr[1:]\
    \ {\n        if v > max {\n            max = v\n            max_index = i + 1\n\
    \        }\n    }\n    if max_index == 0 {\n        return -1\n    }\n    for\
    \ i := max_index - 1; i >= 0; i-- {\n        if arr[i] > arr[max_index] {\n  \
    \          return -1\n        }\n    }\n    return max_index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpy6zxoo5u_test.go:55: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpy6zxoo5u_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpy6zxoo5u_test.go:55: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpy6zxoo5u_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    var max int\n    for i := len(arr) - 1; i >= 0; i-- {\n     \
    \   if arr[i] >= max {\n            max = arr[i]\n        } else {\n         \
    \   return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpxdiy33hy_test.go:47: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpxdiy33hy_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpxdiy33hy_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  if maxIndex == 0 {\n        return -1\n    }\n    for i := 0; i < maxIndex;\
    \ i++ {\n        if arr[i] > arr[maxIndex] {\n            return -1\n        }\n\
    \    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpoahc851m_test.go:58: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpoahc851m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpoahc851m_test.go:58: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpoahc851m_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] >= arr[i-1] {\n            return i\n \
    \       }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n \
    \ candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpxvdoszod_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpxvdoszod_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpxvdoszod_test.go:47: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpxvdoszod_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    max_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n            max_index = i\n        }\n    }\n\
    \    for i := max_index - 1; i >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n\
    \            return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpqavapbog_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpqavapbog_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpqavapbog_test.go:55: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] >= arr[i-1] {\n            return i - 1\n        }\n  \
    \  }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpk0vkymxu_test.go:41: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk0vkymxu_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk0vkymxu_test.go:41: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    maxIndex := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i := maxIndex; i > 0; i-- {\n        if arr[i]\
    \ < arr[i-1] {\n            return i-1\n        }\n    }\n    return -1\n}\n\n\
    func TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp7aex5gtg_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp7aex5gtg_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp7aex5gtg_test.go:52: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    var max int = -1\n    for i :=\
    \ len(arr) - 1; i > 0; i-- {\n        if arr[i] >= arr[i-1] {\n            max\
    \ = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpn8m6cf8l_test.go:42: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpn8m6cf8l_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpn8m6cf8l_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpn8m6cf8l_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := -1\n\
    \    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] >= arr[i-1] {\n  \
    \          max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp1fcfkh4v_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp1fcfkh4v_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp1fcfkh4v_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp1fcfkh4v_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    maxIndex := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i := 0; i < maxIndex; i++ {\n        if arr[i]\
    \ > arr[maxIndex] {\n            return -1\n        }\n    }\n    return maxIndex\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpeehc_o97_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpeehc_o97_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpeehc_o97_test.go:52: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpeehc_o97_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] <= arr[i - 1] {\n            continue\n\
    \        }\n        return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp7nb3ruam_test.go:48: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp7nb3ruam_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp7nb3ruam_test.go:48: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp7nb3ruam_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073204
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] >= arr[i-1] {\n            continue\n        }\n      \
    \  return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    var max int\n    for i := len(arr) - 1; i >= 0; i-- {\n     \
    \   if arr[i] >= max {\n            max = arr[i]\n        } else {\n         \
    \   return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpxdiy33hy_test.go:47: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpxdiy33hy_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpxdiy33hy_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] >= arr[i-1] {\n            return i - 1\n        }\n  \
    \  }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpk0vkymxu_test.go:41: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk0vkymxu_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk0vkymxu_test.go:41: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    maxIndex := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i := 0; i < maxIndex; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            return -1\n        }\n    }\n    return maxIndex\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpvo3seso0_test.go:52: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpvo3seso0_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpvo3seso0_test.go:52: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpvo3seso0_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073204
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    maxIndex := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    for i := maxIndex - 1; i >= 0; i-- {\n        if\
    \ arr[i] > arr[i + 1] {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_o8p9atb_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp_o8p9atb_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp_o8p9atb_test.go:52: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    max := arr[0]\n    max_index := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            max_index\
    \ = i\n        }\n    }\n    if max_index == 0 {\n        return -1\n    }\n \
    \   for i := 0; i < max_index; i++ {\n        if arr[i] > arr[max_index] {\n \
    \           return -1\n        }\n    }\n    return max_index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp43tkkcc__test.go:55: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp43tkkcc__test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp43tkkcc__test.go:55: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp43tkkcc__test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073204
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    // your code here\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpuekaha67_test.go:37: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpuekaha67_test.go:37:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpuekaha67_test.go:37: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyad01pq6_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyad01pq6_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzyg0wngx_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzyg0wngx_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] <= arr[1] {\n            return 0\n        } else\
    \ {\n            return -1\n        }\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] >= arr[i-1] {\n            continue\n        } else\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] >= arr[1] {\n            return 0\n        } else\
    \ {\n            return -1\n        }\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  if maxIndex == 0 {\n        return -1\n    }\n    for i := maxIndex - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n            return -1\n     \
    \   }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpqsmmtn1m_test.go:58: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpqsmmtn1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpqsmmtn1m_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpqsmmtn1m_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  for i := maxIndex - 1; i >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n  \
    \          return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3z427me5_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3z427me5_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3z427me5_test.go:55: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  if maxIndex == 0 {\n        return -1\n    }\n    for i := 0; i < maxIndex;\
    \ i++ {\n        if arr[i] > arr[maxIndex] {\n            return -1\n        }\n\
    \    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpoahc851m_test.go:58: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpoahc851m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpoahc851m_test.go:58: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpoahc851m_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073203
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  for i := 0; i < maxIndex; i++ {\n        if arr[i] > arr[maxIndex] {\n    \
    \        return -1\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4e720kas_test.go:55: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4e720kas_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4e720kas_test.go:55: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4e720kas_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073204
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  if maxIndex == 0 {\n        return -1\n    }\n    for i := maxIndex - 1; i\
    \ >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n            return -1\n     \
    \   }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpqsmmtn1m_test.go:58: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpqsmmtn1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpqsmmtn1m_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpqsmmtn1m_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    max := arr[0]\n\
    \    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n  \
    \  for i := 0; i < maxIndex; i++ {\n        if arr[i] > arr[i+1] {\n         \
    \   return -1\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp0gfhjptx_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp0gfhjptx_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp0gfhjptx_test.go:55: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp0gfhjptx_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    for i := len(arr) - 1; i > 0; i--\
    \ {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk_hj95kb_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk_hj95kb_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073201
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) == 0 {\n        return\
    \ -1\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073201
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunc can_arrange(arr []int) int {\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3s7ruzuq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3s7ruzuq_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073201
