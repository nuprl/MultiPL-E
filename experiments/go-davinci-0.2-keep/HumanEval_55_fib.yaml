name: HumanEval_55_fib
language: go_test.go
prompt: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
  // 21\nfunc fib(n int) int {\n"
tests: "func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
  \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
  \  { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
  \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
  \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor\
  \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return n\n\
    \    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n   \
    \     return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n\
    \        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1\
    \ || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    if n <= 1 {\n        return n\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return n\n\
    \    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n   \
    \     return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 ||\
    \ n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", " \
    \   if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
