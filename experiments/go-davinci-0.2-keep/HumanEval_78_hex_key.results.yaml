language: go_test.go
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes = map[string]bool{\n        \"2\": true,\n        \"3\"\
    : true,\n        \"5\": true,\n        \"7\": true,\n        \"B\": true,\n  \
    \      \"D\": true,\n    }\n    var count int\n    for _, v := range num {\n \
    \       if _, ok := primes[string(v)]; ok {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        if c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes []string = []string{\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\"}\n    var count int = 0\n    for _, c := range num {\n        for _, p\
    \ := range primes {\n            if string(c) == p {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var result int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            result++\n        }\n\
    \    }\n    return result\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    var hex_map = map[string]int{\n        \"0\":\
    \ 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\":\
    \ 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\":\
    \ 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\"\
    : 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n   \
    \ for _, v := range num {\n        if hex_map[string(v)] == 2 || hex_map[string(v)]\
    \ == 3 || hex_map[string(v)] == 5 || hex_map[string(v)] == 7 || hex_map[string(v)]\
    \ == 11 || hex_map[string(v)] == 13 {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    var hex_map = map[string]int{\n        \"0\":\
    \ 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\":\
    \ 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\":\
    \ 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\"\
    : 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n   \
    \ for _, v := range num {\n        if hex_map[string(v)] == 2 || hex_map[string(v)]\
    \ == 3 || hex_map[string(v)] == 5 || hex_map[string(v)] == 7 || hex_map[string(v)]\
    \ == 11 || hex_map[string(v)] == 13 {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, char := range num {\n        switch char\
    \ {\n        case '2', '3', '5', '7', 'B', 'D':\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, ch := range num {\n        if ch == '2'\
    \ || ch == '3' || ch == '5' || ch == '7' || ch == 'B' || ch == 'D' {\n       \
    \     count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        if c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        if c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, c := range num {\n        if c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes = []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n\
    \    var count int\n    for _, v := range num {\n        if contains(primes, string(v))\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwioh_pw4_test.go:28:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, char := range num {\n        switch char\
    \ {\n        case '2', '3', '5', '7', 'B', 'D':\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes = map[byte]bool{'2': true, '3': true, '5': true, '7':\
    \ true, 'B': true, 'D': true}\n    var count int\n    for i := 0; i < len(num);\
    \ i++ {\n        if _, ok := primes[num[i]]; ok {\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, v := range num {\n        if v == '2'\
    \ || v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    count := 0\n    for _, v := range num {\n        if v == '2' || v\
    \ == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, v := range num {\n        switch v\
    \ {\n        case '2', '3', '5', '7', 'B', 'D':\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes = []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n\
    \    var count int\n    for _, v := range num {\n        for _, p := range primes\
    \ {\n            if string(v) == p {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes = map[string]bool{\n        \"2\": true,\n        \"3\"\
    : true,\n        \"5\": true,\n        \"7\": true,\n        \"B\": true,\n  \
    \      \"D\": true,\n    }\n    var count int\n    for _, v := range num {\n \
    \       if primes[string(v)] {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    var hex_map = map[string]int{\n        \"0\":\
    \ 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\":\
    \ 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\":\
    \ 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\"\
    : 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n   \
    \ for _, v := range num {\n        if hex_map[string(v)] == 2 || hex_map[string(v)]\
    \ == 3 || hex_map[string(v)] == 5 || hex_map[string(v)] == 7 || hex_map[string(v)]\
    \ == 11 || hex_map[string(v)] == 13 {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, v := range num {\n        if v == '2'\
    \ || v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, c := range num {\n        switch c\
    \ {\n        case '2', '3', '5', '7', 'B', 'D':\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes = map[string]bool{\n        \"2\": true,\n        \"3\"\
    : true,\n        \"5\": true,\n        \"7\": true,\n        \"B\": true,\n  \
    \      \"D\": true,\n    }\n    var count int\n    for _, v := range num {\n \
    \       if primes[string(v)] {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes = []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n\
    \    var count int\n    for _, n := range num {\n        for _, p := range primes\
    \ {\n            if string(n) == p {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, c := range num {\n        switch c\
    \ {\n        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, char := range num {\n        switch char\
    \ {\n        case '2', '3', '5', '7', 'B', 'D':\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var result int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            result++\n        }\n\
    \    }\n    return result\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var result int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            result++\n        }\n\
    \    }\n    return result\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var hex_key_map = map[byte]bool{\n        '2': true,\n        '3':\
    \ true,\n        '5': true,\n        '7': true,\n        'B': true,\n        'D':\
    \ true,\n    }\n    var count int\n    for i := 0; i < len(num); i++ {\n     \
    \   if hex_key_map[num[i]] {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var hex_primes = map[string]int{\n        \"2\": 2,\n        \"3\"\
    : 3,\n        \"5\": 5,\n        \"7\": 7,\n        \"B\": 11,\n        \"D\"\
    : 13,\n    }\n    var count int\n    for _, v := range num {\n        if _, ok\
    \ := hex_primes[string(v)]; ok {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, char := range num {\n        switch char\
    \ {\n        case '2', '3', '5', '7', 'B', 'D':\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, n := range num {\n        if n == '2' ||\
    \ n == '3' || n == '5' || n == '7' || n == 'B' || n == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    primes := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n  \
    \  count := 0\n    for _, v := range num {\n        if contains(primes, string(v))\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf2ebmea8_test.go:28:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    var hex_primes = map[string]bool{\n        \"\
    2\": true,\n        \"3\": true,\n        \"5\": true,\n        \"7\": true,\n\
    \        \"B\": true,\n        \"D\": true,\n    }\n    for _, v := range num\
    \ {\n        if hex_primes[string(v)] {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, v := range num {\n        if v == '2'\
    \ || v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes = []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n\
    \    var count int\n    for _, v := range num {\n        for _, p := range primes\
    \ {\n            if string(v) == p {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, v := range num {\n        switch v\
    \ {\n        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, char := range num {\n        switch char\
    \ {\n        case '2', '3', '5', '7', 'B', 'D':\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes = []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n\
    \    var count int\n    for _, n := range num {\n        for _, p := range primes\
    \ {\n            if string(n) == p {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var hex_key_count int\n    for _, char := range num {\n        switch\
    \ char {\n        case '2', '3', '5', '7', 'B', 'D':\n            hex_key_count++\n\
    \        }\n    }\n    return hex_key_count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var result int = 0\n    var hex_digits = map[string]int{\n      \
    \  \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n      \
    \  \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n      \
    \  \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n    \
    \    \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n\
    \    }\n    for _, value := range num {\n        if hex_digits[string(value)]\
    \ == 2 || hex_digits[string(value)] == 3 || hex_digits[string(value)] == 5 ||\
    \ hex_digits[string(value)] == 7 || hex_digits[string(value)] == 11 || hex_digits[string(value)]\
    \ == 13 {\n            result += 1\n        }\n    }\n    return result\n}\n\n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        if c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    primes := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n  \
    \  count := 0\n    for _, v := range num {\n        for _, p := range primes {\n\
    \            if string(v) == p {\n                count++\n            }\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpkymdec9k_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpkymdec9k_test.go:47: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes = []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n\
    \    var count int\n    for _, v := range num {\n        for _, p := range primes\
    \ {\n            if string(v) == p {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, v := range num {\n        if v == '2'\
    \ || v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    var hex_digits = map[string]int{\n        \"0\"\
    : 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\":\
    \ 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\":\
    \ 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\"\
    : 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n   \
    \ for _, v := range num {\n        if hex_digits[string(v)] == 2 || hex_digits[string(v)]\
    \ == 3 || hex_digits[string(v)] == 5 || hex_digits[string(v)] == 7 || hex_digits[string(v)]\
    \ == 11 || hex_digits[string(v)] == 13 {\n            count++\n        }\n   \
    \ }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074426
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        switch v {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var primes = []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n\
    \    var count int\n    for _, v := range num {\n        for _, p := range primes\
    \ {\n            if string(v) == p {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, c := range num {\n        switch c {\n\
    \        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int = 0\n    for _, v := range num {\n        switch v\
    \ {\n        case '2', '3', '5', '7', 'B', 'D':\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074425
- exit_code: 0
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n\
    // For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the\
    \ output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be\
    \ 6.\n// For num = \"2020\" the output should be 2.\nfunc hex_key(num string)\
    \ int {\n    var count int\n    for _, v := range num {\n        if v == '2' ||\
    \ v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074425
