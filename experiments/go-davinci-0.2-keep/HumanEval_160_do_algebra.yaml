name: HumanEval_160_do_algebra
language: go_test.go
prompt: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given two lists operator, and operand. The first list has basic algebra operations,\
  \ and \n// the second list is a list of integers. Use the two given lists to build\
  \ the algebric \n// expression and return the evaluation of this expression.\n//\
  \ The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
  \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
  \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
  // => result = 9\n// Note:\n// The length of operator list is equal to the length\
  \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
  // Operator list has at least one operator, and operand list has at least two operands.\n\
  func do_algebra(operator []string, operand []int) int {\n"
tests: "func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3,\
  \ 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"\
  }, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\"\
  , \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n\
    \    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n    if\
    \ len(operator) == 2 {\n        return do_algebra_2(operator[0], operand[0], operand[1])\n\
    \    }\n    if len(operator) == 3 {\n        return do_algebra_3(operator[0],\
    \ operand[0], operator[1], operand[1], operand[2])\n    }\n    if len(operator)\
    \ == 4 {\n        return do_algebra_4(operator[0], operand[0], operator[1], operand[1],\
    \ operator[2], operand[2], operand[3])\n    }\n    return 0\n}\n", "    var result\
    \ int\n    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n   \
    \     switch operator[i] {\n            case \"+\":\n                result +=\
    \ operand[i+1]\n            case \"-\":\n                result -= operand[i+1]\n\
    \            case \"*\":\n                result *= operand[i+1]\n           \
    \ case \"//\":\n                result /= operand[i+1]\n            case \"**\"\
    :\n                result = result ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n", "    var result int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) != len(operand) - 1 {\n        panic(\"operator and operand not\
    \ match\")\n    }\n    if len(operator) == 0 {\n        panic(\"operator is empty\"\
    )\n    }\n    if len(operand) == 0 {\n        panic(\"operand is empty\")\n  \
    \  }\n    if len(operand) == 1 {\n        return operand[0]\n    }\n    result\
    \ := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i + 1]\n        case \"\
    -\":\n            result -= operand[i + 1]\n        case \"*\":\n            result\
    \ *= operand[i + 1]\n        case \"//\":\n            result /= operand[i + 1]\n\
    \        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i\
    \ + 1])))\n        default:\n            panic(\"unknown operator\")\n       \
    \ }\n    }\n    return result\n}\n", "    var result int\n    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return result\n    }\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \        case \"+\":\n                result += operand[i+1]\n            case\
    \ \"-\":\n                result -= operand[i+1]\n            case \"*\":\n  \
    \              result *= operand[i+1]\n            case \"//\":\n            \
    \    result /= operand[i+1]\n            case \"**\":\n                result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operator) == 2 {\n    \
    \    return do_algebra_helper(operator[0], operand[0], operand[1])\n    }\n  \
    \  if len(operator) == 3 {\n        return do_algebra_helper(operator[1], do_algebra_helper(operator[0],\
    \ operand[0], operand[1]), operand[2])\n    }\n    if len(operator) == 4 {\n \
    \       return do_algebra_helper(operator[2], do_algebra_helper(operator[1], do_algebra_helper(operator[0],\
    \ operand[0], operand[1]), operand[2]), operand[3])\n    }\n    if len(operator)\
    \ == 5 {\n        return do_algebra_helper(operator[3], do_algebra_helper(operator[2],\
    \ do_algebra_helper(operator[1], do_algebra_helper(operator[0], operand[0], operand[1]),\
    \ operand[2]), operand[3]), operand[4])\n    }\n    return 0\n}\n", "    var result\
    \ int\n    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n   \
    \     switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 {\n   \
    \     return operand[0]\n    }\n    if len(operand) == 0 {\n        return 0\n\
    \    }\n    if len(operator) != len(operand) - 1 {\n        panic(\"operator and\
    \ operand length not match\")\n    }\n    result := operand[0]\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        default:\n            panic(\"unknown operator\")\n        }\n    }\n\
    \    return result\n}\n", "    var result int\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ = operand[i] + operand[i+1]\n        case \"-\":\n            result = operand[i]\
    \ - operand[i+1]\n        case \"*\":\n            result = operand[i] * operand[i+1]\n\
    \        case \"//\":\n            result = operand[i] / operand[i+1]\n      \
    \  case \"**\":\n            result = operand[i] ^ operand[i+1]\n        }\n \
    \   }\n    return result\n}\n", "    var result int\n    if len(operator) == 0\
    \ {\n        return operand[0]\n    }\n    result = operand[0]\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    result = operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    var result\
    \ int\n    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n   \
    \     switch operator[i] {\n            case \"+\":\n                result +=\
    \ operand[i+1]\n            case \"-\":\n                result -= operand[i+1]\n\
    \            case \"*\":\n                result *= operand[i+1]\n           \
    \ case \"//\":\n                result /= operand[i+1]\n            case \"**\"\
    :\n                result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return 0\n    }\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = result ^ operand[i+1]\n        }\n  \
    \  }\n    return result\n}\n", "    if len(operator) == 0 || len(operand) == 0\
    \ {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n   \
    \     return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n     \
    \   switch operator[0] {\n            case \"+\":\n                return operand[0]\
    \ + operand[1]\n            case \"-\":\n                return operand[0] - operand[1]\n\
    \            case \"*\":\n                return operand[0] * operand[1]\n   \
    \         case \"//\":\n                return operand[0] / operand[1]\n     \
    \       case \"**\":\n                return operand[0] ^ operand[1]\n       \
    \ }\n    }\n    return 0\n}\n", "    if len(operator) == 0 || len(operand) ==\
    \ 0 {\n        return 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operator) == 2 {\n        if operator[0] == \"+\" {\n     \
    \       return operand[0] + operand[1]\n        } else if operator[0] == \"-\"\
    \ {\n            return operand[0] - operand[1]\n        } else if operator[0]\
    \ == \"*\" {\n            return operand[0] * operand[1]\n        } else if operator[0]\
    \ == \"//\" {\n            return operand[0] / operand[1]\n        } else if operator[0]\
    \ == \"**\" {\n            return operand[0] ^ operand[1]\n        }\n    }\n\
    \    if len(operator) == 3 {\n        if operator[0] == \"+\" {\n            return\
    \ operand[0] + operand[1]\n        } else if operator[0] == \"-\" {\n        \
    \    return operand[0] - operand[1]\n        } else if operator[0] == \"*\" {\n\
    \            return operand[0] * operand[1]\n        } else if operator[0] ==\
    \ \"//\" {\n            return operand[0] / operand[1]\n        } else if operator[0]\
    \ == \"**\" {\n            return operand[0] ^ operand[1]\n        }\n    }\n\
    \    return 0\n}\n", "    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return result\n    }\n    result = operand[0]\n    for i :=\
    \ 0; i < len(operator); i++ {\n        switch operator[i] {\n            case\
    \ \"+\":\n                result += operand[i+1]\n            case \"-\":\n  \
    \              result -= operand[i+1]\n            case \"*\":\n             \
    \   result *= operand[i+1]\n            case \"//\":\n                result /=\
    \ operand[i+1]\n            case \"**\":\n                result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 {\n   \
    \     return operand[0]\n    }\n    if len(operand) == 0 {\n        return 0\n\
    \    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n    }\n\
    \    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        if\
    \ operator[i] == \"+\" {\n            result += operand[i+1]\n        } else if\
    \ operator[i] == \"-\" {\n            result -= operand[i+1]\n        } else if\
    \ operator[i] == \"*\" {\n            result *= operand[i+1]\n        } else if\
    \ operator[i] == \"//\" {\n            result /= operand[i+1]\n        } else\
    \ if operator[i] == \"**\" {\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
