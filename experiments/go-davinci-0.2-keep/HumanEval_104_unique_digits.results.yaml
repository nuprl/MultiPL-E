language: go_test.go
name: HumanEval_104_unique_digits
results:
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ hasEvenDigit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgiotgmer_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var ret []int\n    for _, v := range x {\n        if v %\
    \ 2 == 1 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmptsmt_200_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmptsmt_200_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmptsmt_200_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmptsmt_200_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ v % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp1thw_00o_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp1thw_00o_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp1thw_00o_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmp1thw_00o_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, n := range x {\n        if\
    \ !has_even_digit(n) {\n            result = append(result, n)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa55tk1j6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var res []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z6y3bsw_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    result := []int{}\n    for _, v := range x {\n        if\
    \ is_unique(v) {\n            result = append(result, v)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjpbfif8m_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, i := range x {\n        if\
    \ is_unique(i) {\n            result = append(result, i)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp528uh6th_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var y []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kuk534b_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var res []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        res = append(res, v)\n    }\n  \
    \  return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzomrqwv8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ check_even_digit(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpklhtas31_test.go:19:12: undefined: check_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    result := []int{}\n    for _, i := range x {\n        if\
    \ !has_even_digit(i) {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwuoi0170_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var y []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        y = append(y, v)\n    }\n    return\
    \ y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4k8ulgl_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, i := range x {\n        if\
    \ !hasEvenDigit(i) {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0etfbhvd_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, n := range x {\n        if\
    \ has_even_digit(n) {\n            continue\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7h28r5p_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var y []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kuk534b_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    // Write your code here\n    var result []int\n    for _,\
    \ v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpms_vy3xl_test.go:20:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ hasEvenDigit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgiotgmer_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    result := []int{}\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvtl58t4t_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, num := range x {\n        if\
    \ has_even_digit(num) {\n            continue\n        }\n        result = append(result,\
    \ num)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7292bz9_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, num := range x {\n        if\
    \ !hasEvenDigit(num) {\n            result = append(result, num)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkax2ryft_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, num := range x {\n        if\
    \ !hasEvenDigit(num) {\n            result = append(result, num)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkax2ryft_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, i := range x {\n        if\
    \ is_unique(i) {\n            result = append(result, i)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp528uh6th_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, n := range x {\n        if\
    \ !has_even_digit(n) {\n            result = append(result, n)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa55tk1j6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ isUnique(v) {\n            result = append(result, v)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr_jvs8jm_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, num := range x {\n        if\
    \ has_even_digit(num) {\n            continue\n        }\n        result = append(result,\
    \ num)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7292bz9_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, i := range x {\n        if\
    \ is_unique(i) {\n            result = append(result, i)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp528uh6th_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var ret []int\n    for _, v := range x {\n        if is_unique_digits(v)\
    \ {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zlp9v8j_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ hasEvenDigit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgiotgmer_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, n := range x {\n        if\
    \ has_even_digit(n) {\n            continue\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7h28r5p_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ hasEvenDigit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgiotgmer_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, num := range x {\n        if\
    \ !hasEvenDigit(num) {\n            result = append(result, num)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkax2ryft_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, value := range x {\n      \
    \  if has_even_digit(value) {\n            continue\n        }\n        result\
    \ = append(result, value)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbd36x15h_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ hasEvenDigit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgiotgmer_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var y []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kuk534b_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, num := range x {\n        if\
    \ has_even_digit(num) {\n            continue\n        }\n        result = append(result,\
    \ num)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7292bz9_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var res []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z6y3bsw_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ v < 10 {\n            result = append(result, v)\n        } else {\n       \
    \     if !hasEvenDigit(v) {\n                result = append(result, v)\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewu9xc91_test.go:22:17: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var y []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        y = append(y, v)\n    }\n    return\
    \ y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4k8ulgl_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var res []int\n    for _, v := range x {\n        if is_unique(v)\
    \ {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa9hozyr7_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, n := range x {\n        if\
    \ !has_even_digit(n) {\n            result = append(result, n)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa55tk1j6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ is_unique_digits(v) {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2zhsrij_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ v % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp1thw_00o_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp1thw_00o_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp1thw_00o_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmp1thw_00o_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8iepdx8_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunc unique_digits(x\
    \ []int) []int {\n    var result []int\n    for _, v := range x {\n        if\
    \ !hasEvenDigit(v) {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80haq4gc_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073183
