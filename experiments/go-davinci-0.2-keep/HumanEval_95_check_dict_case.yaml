name: HumanEval_95_check_dict_case
language: go_test.go
prompt: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a dictionary, return True if all keys are strings in lower \n// case\
  \ or all keys are strings in upper case, else return False.\n// The function should\
  \ return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
  a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\"\
  :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
  a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
  Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n//\
  \ check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
  func check_dict_case(dict map[string]string) bool {\n"
tests: "func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
  , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
  , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
  }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
  Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
  \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(dict) == 0 {\n        return false\n    }\n    upper :=\
    \ true\n    lower := true\n    for key, _ := range dict {\n        if key != strings.ToUpper(key)\
    \ {\n            upper = false\n        }\n        if key != strings.ToLower(key)\
    \ {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var all_upper\
    \ bool = true\n    var all_lower bool = true\n    for key, _ := range dict {\n\
    \        if key == strings.ToUpper(key) {\n            all_lower = false\n   \
    \     } else if key == strings.ToLower(key) {\n            all_upper = false\n\
    \        } else {\n            return false\n        }\n    }\n    return all_upper\
    \ || all_lower\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    is_upper := false\n    is_lower := false\n    for k, _ := range dict {\n\
    \        if k == strings.ToUpper(k) {\n            is_upper = true\n        }\
    \ else if k == strings.ToLower(k) {\n            is_lower = true\n        } else\
    \ {\n            return false\n        }\n    }\n    return is_upper || is_lower\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var upper bool\n\
    \    for k, _ := range dict {\n        if k[0] >= 'A' && k[0] <= 'Z' {\n     \
    \       upper = true\n            break\n        }\n    }\n    for k, _ := range\
    \ dict {\n        if upper {\n            if k[0] >= 'a' && k[0] <= 'z' {\n  \
    \              return false\n            }\n        } else {\n            if k[0]\
    \ >= 'A' && k[0] <= 'Z' {\n                return false\n            }\n     \
    \   }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    lower := true\n    upper := true\n    for k, _ := range dict\
    \ {\n        if k != strings.ToLower(k) {\n            lower = false\n       \
    \ }\n        if k != strings.ToUpper(k) {\n            upper = false\n       \
    \ }\n    }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n      \
    \  return false\n    }\n    var upper bool\n    var lower bool\n    for key, _\
    \ := range dict {\n        if key == strings.ToUpper(key) {\n            upper\
    \ = true\n        } else if key == strings.ToLower(key) {\n            lower =\
    \ true\n        } else {\n            return false\n        }\n    }\n    return\
    \ upper != lower\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    for k, _ := range dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    is_lower := false\n    is_upper\
    \ := false\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n\
    \            is_lower = true\n        } else if k == strings.ToUpper(k) {\n  \
    \          is_upper = true\n        } else {\n            return false\n     \
    \   }\n    }\n    return is_lower || is_upper\n}\n", "    if len(dict) == 0 {\n\
    \        return false\n    }\n    lower := true\n    upper := true\n    for key,\
    \ _ := range dict {\n        if key != strings.ToLower(key) {\n            lower\
    \ = false\n        }\n        if key != strings.ToUpper(key) {\n            upper\
    \ = false\n        }\n    }\n    return lower || upper\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    lower := true\n    upper := true\n\
    \    for key, _ := range dict {\n        if key != strings.ToLower(key) {\n  \
    \          lower = false\n        }\n        if key != strings.ToUpper(key) {\n\
    \            upper = false\n        }\n    }\n    return lower || upper\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    var isLower bool\n  \
    \  for k, _ := range dict {\n        if isLower == false && k == strings.ToLower(k)\
    \ {\n            isLower = true\n        } else if isLower == true && k == strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var upper bool\n    var lower\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToUpper(key)\
    \ {\n            upper = true\n        } else if key == strings.ToLower(key) {\n\
    \            lower = true\n        } else {\n            return false\n      \
    \  }\n    }\n    return upper || lower\n}\n", "    if len(dict) == 0 {\n     \
    \   return false\n    }\n    var is_upper bool\n    var is_lower bool\n    for\
    \ k, _ := range dict {\n        if k == strings.ToUpper(k) {\n            is_upper\
    \ = true\n        } else if k == strings.ToLower(k) {\n            is_lower =\
    \ true\n        } else {\n            return false\n        }\n    }\n    return\
    \ is_upper || is_lower\n}\n", "    var is_lower, is_upper bool\n    for k, _ :=\
    \ range dict {\n        if k == strings.ToLower(k) {\n            is_lower = true\n\
    \        } else if k == strings.ToUpper(k) {\n            is_upper = true\n  \
    \      } else {\n            return false\n        }\n    }\n    return is_lower\
    \ || is_upper\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n \
    \   lower := true\n    upper := true\n    for k, _ := range dict {\n        if\
    \ k != strings.ToLower(k) {\n            lower = false\n        }\n        if\
    \ k != strings.ToUpper(k) {\n            upper = false\n        }\n    }\n   \
    \ return lower || upper\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var lower_case_keys bool\n    for key, _ := range dict {\n       \
    \ if key == strings.ToLower(key) {\n            lower_case_keys = true\n     \
    \       break\n        }\n    }\n    for key, _ := range dict {\n        if lower_case_keys\
    \ {\n            if key != strings.ToLower(key) {\n                return false\n\
    \            }\n        } else {\n            if key != strings.ToUpper(key) {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for key, _ := range dict {\n        if key != strings.ToLower(key)\
    \ {\n            lower = false\n        }\n        if key != strings.ToUpper(key)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var upper, lower\
    \ bool\n    for k, _ := range dict {\n        if k == k {\n            upper =\
    \ true\n        } else {\n            lower = true\n        }\n    }\n    return\
    \ upper != lower\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    var lowerCase bool\n    var upperCase bool\n    for k, _ := range dict {\n\
    \        if k == strings.ToLower(k) {\n            lowerCase = true\n        }\
    \ else if k == strings.ToUpper(k) {\n            upperCase = true\n        } else\
    \ {\n            return false\n        }\n    }\n    return lowerCase != upperCase\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower, upper\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else if k == strings.ToUpper(k) {\n      \
    \      upper = true\n        } else {\n            return false\n        }\n \
    \   }\n    return lower || upper\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
