name: HumanEval_120_maximum
language: go_test.go
prompt: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ an array arr of integers and a positive integer k, return a sorted list \n// of\
  \ length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3,\
  \ -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4,\
  \ 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1,\
  \ -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be\
  \ in the range of [1, 1000].\n// 2. The elements in the array will be in the range\
  \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
  \ {\n"
tests: "func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
  \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n     {\
  \ actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n \
  \    { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
  \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
  \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8, 0},\
  \ 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
  \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
  \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4}, 2),\
  \ expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2), expected:\
  \ []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243, -400, 0},\
  \ 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n \
    \   if k == len(arr) {\n        return arr\n    }\n    var result []int\n    for\
    \ i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) <=\
    \ k {\n        return arr\n    }\n    var res []int\n    for _, v := range arr\
    \ {\n        if len(res) < k {\n            res = append(res, v)\n           \
    \ continue\n        }\n        for i := 0; i < k; i++ {\n            if v > res[i]\
    \ {\n                res = append(res[:i], append([]int{v}, res[i:k-1]...)...)\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > res[j] {\n                for m := k - 1;\
    \ m > j; m-- {\n                    res[m] = res[m - 1]\n                }\n \
    \               res[j] = arr[i]\n                break\n            }\n      \
    \  }\n    }\n    return res\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    // use a min heap to store the k largest numbers\n\
    \    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    // build the min heap\n    for i := k / 2 - 1; i >= 0; i-- {\n   \
    \     heapify(heap, i, k)\n    }\n    for i := k; i < len(arr); i++ {\n      \
    \  if arr[i] > heap[0] {\n            heap[0] = arr[i]\n            heapify(heap,\
    \ 0, k)\n        }\n    }\n    return heap\n}\n", "    if len(arr) == 0 || k ==\
    \ 0 {\n        return []int{}\n    }\n    // \u521D\u59CB\u5316\u4E00\u4E2A\u6700\
    \u5927\u5806\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n     \
    \   heap[i] = arr[i]\n    }\n    // \u5806\u5316\n    for i := k / 2 - 1; i >=\
    \ 0; i-- {\n        heapify(heap, i, k)\n    }\n    // \u5C06\u5269\u4F59\u5143\
    \u7D20\u63D2\u5165\u5806\u4E2D\n    for i := k; i < len(arr); i++ {\n        if\
    \ arr[i] > heap[0] {\n            heap[0] = arr[i]\n            heapify(heap,\
    \ 0, k)\n        }\n    }\n    return heap\n}\n", "    if len(arr) == 0 || k ==\
    \ 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res = append(res[:j],\
    \ append([]int{arr[i]}, res[j:]...)...)\n                res = res[:k]\n     \
    \           break\n            }\n        }\n    }\n    return res\n}\n", "  \
    \  if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) <= k {\n        return\
    \ arr\n    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n      \
    \  res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j\
    \ := 0; j < k; j++ {\n            if arr[i] > res[j] {\n                for m\
    \ := k - 1; m > j; m-- {\n                    res[m] = res[m - 1]\n          \
    \      }\n                res[j] = arr[i]\n                break\n           \
    \ }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res = append(res[:j],\
    \ append([]int{arr[i]}, res[j:]...)...)\n                res = res[:k]\n     \
    \           break\n            }\n        }\n    }\n    return res\n}\n", "  \
    \  if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for m := k - 1; m > j; m-- {\n                    result[m] =\
    \ result[m - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n", " \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n", "    if len(arr) <= k {\n        return arr\n    }\n  \
    \  var res []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n  \
    \          res[0] = arr[i]\n            for j := 1; j < k; j++ {\n           \
    \     if res[j] > res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    if len(arr)\
    \ == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n  \
    \      return arr\n    }\n    // \u5229\u7528\u6700\u5927\u5806\n    heap := make([]int,\
    \ 0)\n    for i := 0; i < len(arr); i++ {\n        if len(heap) < k {\n      \
    \      heap = append(heap, arr[i])\n            if len(heap) == k {\n        \
    \        buildMaxHeap(heap)\n            }\n        } else {\n            if arr[i]\
    \ > heap[0] {\n                heap[0] = arr[i]\n                maxHeapify(heap,\
    \ 0)\n            }\n        }\n    }\n    return heap\n}\n", "    if len(arr)\
    \ == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n  \
    \      return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               for l := k - 1; l > j; l-- {\n                    result[l] =\
    \ result[l - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n", " \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n \
    \       max := arr[0]\n        for _, v := range arr {\n            if v > max\
    \ {\n                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if res[j] < res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                for m := k\
    \ - 1; m > j; m-- {\n                    result[m] = result[m - 1]\n         \
    \       }\n                result[j] = arr[i]\n                break\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   if arr[i] > result[0] {\n            result[0] = arr[i]\n            for j\
    \ := 1; j < k; j++ {\n                if result[j] > result[j - 1] {\n       \
    \             result[j], result[j - 1] = result[j - 1], result[j]\n          \
    \      } else {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    // \u521B\u5EFA\u4E00\u4E2A\u5927\u5C0F\u4E3Ak\u7684\u6700\u5C0F\u5806\
    \n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] =\
    \ arr[i]\n    }\n    // \u5806\u5316\n    for i := k / 2 - 1; i >= 0; i-- {\n\
    \        heapify(heap, i, k)\n    }\n    // \u5806\u6392\u5E8F\n    for i := k;\
    \ i < len(arr); i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n\
    \            heapify(heap, 0, k)\n        }\n    }\n    return heap\n}\n", " \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for l := k - 1; l > j; l-- {\n                    result[l] =\
    \ result[l - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n", " \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var stack []int\n    for i := 0; i < len(arr);\
    \ i++ {\n        for len(stack) > 0 && len(stack) + len(arr) - i > k && stack[len(stack)\
    \ - 1] < arr[i] {\n            stack = stack[:len(stack) - 1]\n        }\n   \
    \     if len(stack) < k {\n            stack = append(stack, arr[i])\n       \
    \ }\n    }\n    return stack\n}\n", "    if len(arr) == 0 || k == 0 {\n      \
    \  return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n\
    \    var result []int\n    for _, v := range arr {\n        for len(result) >\
    \ 0 && v > result[len(result) - 1] && len(result) + len(arr) - i > k {\n     \
    \       result = result[:len(result) - 1]\n        }\n        if len(result) <\
    \ k {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if\
    \ k >= len(arr) {\n        return arr\n    }\n    var res []int\n    for i :=\
    \ 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] >\
    \ res[j] {\n                res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n\
    \                res = res[:k]\n                break\n            }\n       \
    \ }\n    }\n    return res\n}\n", "    var res []int\n    for i := 0; i < k; i++\
    \ {\n        max := -1\n        maxIndex := -1\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] > max {\n                max = arr[j]\n       \
    \         maxIndex = j\n            }\n        }\n        res = append(res, max)\n\
    \        arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n    }\n    return\
    \ res\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n   \
    \             res = res[:k]\n                break\n            }\n        }\n\
    \    }\n    return res\n}\n", "    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for l := 0; l < j; l++ {\n           \
    \         result[l] = result[l+1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 ||\
    \ k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   if arr[i] > result[0] {\n            result[0] = arr[i]\n            for j\
    \ := 1; j < k; j++ {\n                if result[j] > result[j - 1] {\n       \
    \             result[j], result[j - 1] = result[j - 1], result[j]\n          \
    \      } else {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    // use a max heap\
    \ to store the k largest elements\n    heap := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        heap[i] = arr[i]\n    }\n    buildMaxHeap(heap)\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n            heap[0]\
    \ = arr[i]\n            maxHeapify(heap, 0)\n        }\n    }\n    return heap\n\
    }\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    // \u521B\u5EFA\u4E00\u4E2A\u6700\
    \u5927\u5806\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n     \
    \   heap[i] = arr[i]\n    }\n    for i := k/2 - 1; i >= 0; i-- {\n        heapify(heap,\
    \ i, k)\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0]\
    \ {\n            heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n\
    \    }\n    return heap\n}\n", "    if len(arr) == 0 || k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var max\
    \ []int\n    for i := 0; i < k; i++ {\n        max = append(max, arr[i])\n   \
    \ }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > max[0] {\n     \
    \       max[0] = arr[i]\n            for j := 1; j < k; j++ {\n              \
    \  if max[j] < max[j-1] {\n                    max[j], max[j-1] = max[j-1], max[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return max\n}\n", "    if len(arr) == 0 || k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    // \u521D\u59CB\u5316\u7ED3\u679C\u6570\u7EC4\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    // \u5806\
    \u6392\u5E8F\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(res, i, k)\n\
    \    }\n    // \u6BD4\u8F83\u5269\u4F59\u5143\u7D20\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n         \
    \   heapify(res, 0, k)\n        }\n    }\n    return res\n}\n", "    if len(arr)\
    \ == k {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k;\
    \ i++ {\n        max := -1001\n        maxIndex := -1\n        for j := 0; j <\
    \ len(arr); j++ {\n            if arr[j] > max {\n                max = arr[j]\n\
    \                maxIndex = j\n            }\n        }\n        res = append(res,\
    \ max)\n        arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n    }\n   \
    \ return res\n}\n", "    if len(arr) == k {\n        return arr\n    }\n    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        return []int{max}\n    }\n    if k ==\
    \ 2 {\n        if arr[0] > arr[1] {\n            arr[0], arr[1] = arr[1], arr[0]\n\
    \        }\n        for i := 2; i < len(arr); i++ {\n            if arr[i] > arr[1]\
    \ {\n                arr[1] = arr[i]\n                if arr[0] > arr[1] {\n \
    \                   arr[0], arr[1] = arr[1], arr[0]\n                }\n     \
    \       }\n        }\n        return arr[:2]\n    }\n    if k == 3 {\n       \
    \ if arr[0] > arr[1] {\n            arr[0], arr[1] = arr[1], arr[0]\n        }\n\
    \        if arr[1] > arr[2] {\n            arr[1], arr[2] = arr[2], arr[1]\n \
    \       }\n        if arr[0] > arr[1] {\n            arr[0], arr[1] = arr[1],\
    \ arr[0]\n        }\n        for i := 3; i < len(arr); i++ {\n            if arr[i]\
    \ > arr[2] {\n                arr[2] = arr[i]\n                if arr[1] > arr[2]\
    \ {\n                    arr[1], arr[2] = arr[2], arr[1]\n                }\n\
    \                if arr[0] > arr[1] {\n                    arr[0], arr[1] = arr[1],\
    \ arr[0]\n                }\n            }\n        }\n        return arr[:3]\n\
    \    }\n    if k == 4 {\n        if arr[0] > arr[1] {\n            arr[0], arr[1]\
    \ = arr[1], arr[0]\n        }\n        if arr[1] > arr", "    if len(arr) == 0\
    \ || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n       \
    \ return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n    \
    \    result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) <= k {\n        return\
    \ arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res = append(res[:j],\
    \ append([]int{arr[i]}, res[j:]...)...)\n                res = res[:k]\n     \
    \           break\n            }\n        }\n    }\n    return res\n}\n", "  \
    \  if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result[j] = arr[i]\n                break\n            }\n  \
    \      }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    if k > len(arr) {\n        return []int{}\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j - 1] {\n                    result[j], result[j -\
    \ 1] = result[j - 1], result[j]\n                } else {\n                  \
    \  break\n                }\n            }\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    result := make([]int, k)\n \
    \   for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i :=\
    \ k / 2 - 1; i >= 0; i-- {\n        heapify(result, i, k)\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            heapify(result, 0, k)\n        }\n    }\n    return result\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n        \
    \        for m := k - 1; m > j; m-- {\n                    res[m] = res[m - 1]\n\
    \                }\n                res[j] = arr[i]\n                break\n \
    \           }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 ||\
    \ k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    // \u5229\u7528\u5FEB\u6392\u7684\u601D\u60F3\uFF0C\u627E\u5230\
    \u7B2Ck\u5927\u7684\u6570\uFF0C\u7136\u540E\u628A\u524Dk\u4E2A\u6570\u653E\u5230\
    \u4E00\u4E2A\u6570\u7EC4\u4E2D\n    // \u5229\u7528\u5FEB\u6392\u7684\u601D\u60F3\
    \uFF0C\u627E\u5230\u7B2Ck\u5927\u7684\u6570\uFF0C\u7136\u540E\u628A\u524Dk\u4E2A\
    \u6570\u653E\u5230\u4E00\u4E2A\u6570\u7EC4\u4E2D\n    // \u5229\u7528\u5FEB\u6392\
    \u7684\u601D\u60F3\uFF0C\u627E\u5230\u7B2Ck\u5927\u7684\u6570\uFF0C\u7136\u540E\
    \u628A\u524Dk\u4E2A\u6570\u653E\u5230\u4E00\u4E2A\u6570\u7EC4\u4E2D\n    // \u5229\
    \u7528\u5FEB\u6392\u7684\u601D\u60F3\uFF0C\u627E\u5230\u7B2Ck\u5927\u7684\u6570\
    \uFF0C\u7136\u540E\u628A\u524Dk\u4E2A\u6570\u653E\u5230\u4E00\u4E2A\u6570\u7EC4\
    \u4E2D\n    // \u5229\u7528\u5FEB\u6392\u7684\u601D\u60F3\uFF0C\u627E\u5230\u7B2C\
    k\u5927\u7684\u6570\uFF0C\u7136\u540E\u628A\u524Dk\u4E2A\u6570\u653E\u5230\u4E00\
    \u4E2A\u6570\u7EC4\u4E2D\n    // \u5229\u7528\u5FEB\u6392\u7684\u601D\u60F3\uFF0C\
    \u627E\u5230\u7B2Ck\u5927\u7684\u6570\uFF0C\u7136\u540E\u628A\u524Dk\u4E2A\u6570\
    \u653E\u5230\u4E00\u4E2A\u6570\u7EC4\u4E2D\n    // \u5229\u7528\u5FEB\u6392\u7684\
    \u601D\u60F3\uFF0C\u627E\u5230\u7B2Ck\u5927\u7684\u6570\uFF0C\u7136\u540E\u628A\
    \u524Dk\u4E2A\u6570\u653E\u5230\u4E00\u4E2A\u6570\u7EC4\u4E2D\n    // \u5229\u7528\
    \u5FEB\u6392\u7684\u601D\u60F3\uFF0C\u627E", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n \
    \   }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j - 1] {\n                    result[j],\
    \ result[j - 1] = result[j - 1], result[j]\n                } else {\n       \
    \             break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    // use a min heap\
    \ to store the maximum k numbers\n    heap := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >=\
    \ 0; i-- {\n        minHeapify(heap, i, k)\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n       \
    \     minHeapify(heap, 0, k)\n        }\n    }\n    return heap\n}\n", "    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   if arr[i] > result[0] {\n            result[0] = arr[i]\n            for j\
    \ := 1; j < k; j++ {\n                if result[j] > result[j - 1] {\n       \
    \             result[j], result[j - 1] = result[j - 1], result[j]\n          \
    \      } else {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n \
    \   }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > res[j] {\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    var res []int\n    for i := 0; i < k; i++ {\n        max := -1 << 31\n    \
    \    maxIndex := -1\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ > max {\n                max = arr[j]\n                maxIndex = j\n      \
    \      }\n        }\n        res = append(res, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return res\n}\n", "    n := len(arr)\n    if\
    \ n == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == n {\n        return arr\n    }\n    if k > n {\n        return\
    \ []int{}\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        result[i] = arr[i]\n    }\n    for i := k; i < n; i++ {\n        for\
    \ j := k - 1; j >= 0; j-- {\n            if result[j] < arr[i] {\n           \
    \     result[j] = arr[i]\n                break\n            }\n        }\n  \
    \  }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n        max\
    \ := arr[0]\n        for _, v := range arr {\n            if v > max {\n     \
    \           max = v\n            }\n        }\n        return []int{max}\n   \
    \ }\n    if k == 2 {\n        if arr[0] > arr[1] {\n            arr[0], arr[1]\
    \ = arr[1], arr[0]\n        }\n        for i := 2; i < len(arr); i++ {\n     \
    \       if arr[i] > arr[1] {\n                arr[1] = arr[i]\n              \
    \  if arr[0] > arr[1] {\n                    arr[0], arr[1] = arr[1], arr[0]\n\
    \                }\n            }\n        }\n        return arr[:2]\n    }\n\
    \    if k == 3 {\n        if arr[0] > arr[1] {\n            arr[0], arr[1] = arr[1],\
    \ arr[0]\n        }\n        if arr[1] > arr[2] {\n            arr[1], arr[2]\
    \ = arr[2], arr[1]\n        }\n        if arr[0] > arr[1] {\n            arr[0],\
    \ arr[1] = arr[1], arr[0]\n        }\n        for i := 3; i < len(arr); i++ {\n\
    \            if arr[i] > arr[2] {\n                arr[2] = arr[i]\n         \
    \       if arr[1] > arr[2] {\n                    arr[1], arr[2] = arr[2], arr[1]\n\
    \                }\n                if arr[0] > arr[1] {\n                   \
    \ arr[0], arr[1] = arr[1], arr[0]\n                }\n            }\n        }\n\
    \        return arr[:3]\n    }\n    if k == 4 {\n        if arr[0] > arr[1] {\n\
    \            arr[0], arr[1] = arr[1], arr[0]\n        }\n        if arr[1] > arr",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // use quick sort to get the kth largest number\n\
    \    kth := quickSelect(arr, k)\n    // get the result\n    res := []int{}\n \
    \   for _, v := range arr {\n        if v >= kth {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 || k == 0\
    \ {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    // heap\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        heap[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >= 0; i-- {\n    \
    \    heapify(heap, i, k)\n    }\n    for i := k; i < len(arr); i++ {\n       \
    \ if arr[i] > heap[0] {\n            heap[0] = arr[i]\n            heapify(heap,\
    \ 0, k)\n        }\n    }\n    return heap\n}\n", "    if len(arr) == 0 || k ==\
    \ 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if res[j] < res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var res []int\n    for i := 0; i < k; i++ {\n        max := -1\n  \
    \      maxIndex := -1\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] > max {\n                max = arr[j]\n                maxIndex = j\n\
    \            }\n        }\n        res = append(res, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return res\n}\n", "    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > res[j] {\n                for m := k - 1; m > j; m--\
    \ {\n                    res[m] = res[m - 1]\n                }\n            \
    \    res[j] = arr[i]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j - 1] {\n                    result[j], result[j -\
    \ 1] = result[j - 1], result[j]\n                } else {\n                  \
    \  break\n                }\n            }\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    result := make([]int, k)\n \
    \   for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > result[j] {\n                for l := k - 1; l > j; l-- {\n              \
    \      result[l] = result[l - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n            for\
    \ j := 1; j < k; j++ {\n                if res[j] > res[j-1] {\n             \
    \       res[j], res[j-1] = res[j-1], res[j]\n                } else {\n      \
    \              break\n                }\n            }\n        }\n    }\n   \
    \ return res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var res []int\n\
    \    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        var max int\n    \
    \    var maxIndex int\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] > max {\n                max = arr[j]\n                maxIndex = j\n\
    \            }\n        }\n        result = append(result, max)\n        arr =\
    \ append(arr[:maxIndex], arr[maxIndex+1:]...)\n    }\n    return result\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result[j] = arr[i]\n                break\n            }\n  \
    \      }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // \u5148\u6392\u5E8F\uFF0C\u7136\u540E\u53D6\
    \u524Dk\u4E2A\n    // \u5FEB\u6392\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6O(nlogn)\n\
    \    quickSort(arr, 0, len(arr) - 1)\n    return arr[:k]\n}\n", "    if len(arr)\
    \ == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n  \
    \      return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        j := k - 1\n        for ; j >= 0; j-- {\n            if arr[i] >\
    \ result[j] {\n                result[j+1] = result[j]\n            } else {\n\
    \                break\n            }\n        }\n        result[j+1] = arr[i]\n\
    \    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n\
    \            if v > max {\n                max = v\n            }\n        }\n\
    \        return []int{max}\n    }\n    result := make([]int, k)\n    for i :=\
    \ 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for m := k - 1; m > j; m-- {\n                    result[m] =\
    \ result[m - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n", " \
    \   if len(arr) == k {\n        return arr\n    }\n    res := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k;\
    \ i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > res[j] {\n                for t := k - 1; t > j; t-- {\n                 \
    \   res[t] = res[t - 1]\n                }\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k == 1 {\n        max := arr[0]\n     \
    \   for _, v := range arr {\n            if v > max {\n                max = v\n\
    \            }\n        }\n        return []int{max}\n    }\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i\
    \ := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                for l := k - 1; l > j; l-- {\n          \
    \          res[l] = res[l - 1]\n                }\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    n := len(arr)\n    if n == 0 {\n        return []int{}\n    }\n    if k ==\
    \ 0 {\n        return []int{}\n    }\n    if k == n {\n        return arr\n  \
    \  }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(res,\
    \ i, k)\n    }\n    for i := k; i < n; i++ {\n        if arr[i] > res[0] {\n \
    \           res[0] = arr[i]\n            heapify(res, 0, k)\n        }\n    }\n\
    \    return res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    // max heap\n \
    \   heap := make([]int, 0)\n    for i := 0; i < len(arr); i++ {\n        if len(heap)\
    \ < k {\n            heap = append(heap, arr[i])\n            if len(heap) ==\
    \ k {\n                for j := k / 2 - 1; j >= 0; j-- {\n                   \
    \ heapify(heap, j)\n                }\n            }\n        } else {\n     \
    \       if arr[i] > heap[0] {\n                heap[0] = arr[i]\n            \
    \    heapify(heap, 0)\n            }\n        }\n    }\n    return heap\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k == 1 {\n        max := arr[0]\n     \
    \   for _, v := range arr {\n            if v > max {\n                max = v\n\
    \            }\n        }\n        return []int{max}\n    }\n    // \u5148\u6392\
    \u5E8F\uFF0C\u518D\u53D6\u524Dk\u4E2A\n    // sort.Ints(arr)\n    // return arr[len(arr)-k:]\n\
    \    // \u5806\u6392\u5E8F\n    heap := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        heap[i] = arr[i]\n    }\n    buildHeap(heap)\n    for i := k;\
    \ i < len(arr); i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n\
    \            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n", "    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   if arr[i] > result[0] {\n            result[0] = arr[i]\n            for j\
    \ := 1; j < k; j++ {\n                if result[j] > result[j - 1] {\n       \
    \             result[j], result[j - 1] = result[j - 1], result[j]\n          \
    \      } else {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i\
    \ := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                for m := 0; m < j; m++ {\n              \
    \      res[m] = res[m+1]\n                }\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // \u5148\u6392\u5E8F\uFF0C\u518D\u53D6\u524D\
    k\u4E2A\n    // sort.Ints(arr)\n    // return arr[len(arr)-k:]\n    // \u5806\u6392\
    \u5E8F\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i]\
    \ = arr[i]\n    }\n    for i := k/2 - 1; i >= 0; i-- {\n        heapify(heap,\
    \ i, k)\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0]\
    \ {\n            heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n\
    \    }\n    return heap\n}\n", "    if len(arr) == 0 || k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n      \
    \  res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n   \
    \     for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n           \
    \     res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n          \
    \      res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ > result[j - 1] {\n                    result[j], result[j - 1] = result[j -\
    \ 1], result[j]\n                } else {\n                    break\n       \
    \         }\n            }\n        }\n    }\n    return result\n}\n", "    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n          \
    \      result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(res,\
    \ i, k)\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            heapify(res, 0, k)\n        }\n\
    \    }\n    return res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n\
    \            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n      \
    \          if result[j] > result[j - 1] {\n                    result[j], result[j\
    \ - 1] = result[j - 1], result[j]\n                } else {\n                \
    \    break\n                }\n            }\n        }\n    }\n    return result\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    // \u521B\u5EFA\u4E00\u4E2A\u6700\u5927\u5806\n\
    \    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n  \
    \          heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n\
    \    return heap\n}\n", "    if len(arr) == 0 || k <= 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j - 1] {\n                    result[j], result[j -\
    \ 1] = result[j - 1], result[j]\n                } else {\n                  \
    \  break\n                }\n            }\n        }\n    }\n    return result\n\
    }\n", "    var res []int\n    for i := 0; i < k; i++ {\n        max := -1\n  \
    \      maxIndex := -1\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] > max {\n                max = arr[j]\n                maxIndex = j\n\
    \            }\n        }\n        res = append(res, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return res\n}\n", "    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] < result[j - 1] {\n                    result[j],\
    \ result[j - 1] = result[j - 1], result[j]\n                } else {\n       \
    \             break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n  \
    \  }\n    if k >= len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var res []int\n\
    \    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 || k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n          \
    \      result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res = append(res[:j],\
    \ append([]int{arr[i]}, res[j:]...)...)\n                res = res[:k]\n     \
    \           break\n            }\n        }\n    }\n    return res\n}\n", "  \
    \  if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for _, v := range arr {\n    \
    \    if len(result) < k {\n            result = append(result, v)\n          \
    \  continue\n        }\n        if v > result[0] {\n            result[0] = v\n\
    \        }\n        for i := 1; i < k; i++ {\n            if result[i] < result[i\
    \ - 1] {\n                result[i], result[i - 1] = result[i - 1], result[i]\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var res []int\n\
    \    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if res[j] >\
    \ res[j-1] {\n                    res[j], res[j-1] = res[j-1], res[j]\n      \
    \          } else {\n                    break\n                }\n          \
    \  }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var res\
    \ []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n   \
    \ }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n \
    \           if arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   var result []int\n    for _, v := range arr {\n        if len(result) < k\
    \ {\n            result = append(result, v)\n            continue\n        }\n\
    \        if v > result[0] {\n            result[0] = v\n        }\n        for\
    \ i := 1; i < k; i++ {\n            if result[i] < result[i - 1] {\n         \
    \       result[i], result[i - 1] = result[i - 1], result[i]\n            } else\
    \ {\n                break\n            }\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if\
    \ k >= len(arr) {\n        return arr\n    }\n    res := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n\
    \                for m := k - 1; m > j; m-- {\n                    res[m] = res[m\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n", "    // TODO:\n    return\
    \ nil\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // \u5148\u6392\u5E8F\uFF0C\u7136\u540E\u53D6\
    \u524Dk\u4E2A\n    quickSort(arr, 0, len(arr) - 1)\n    return arr[:k]\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for p := k - 1; p > j; p-- {\n                    res[p] = res[p\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0\
    \ || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n       \
    \ return arr\n    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n       \
    \ for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n               \
    \ for m := 0; m < j; m++ {\n                    res[m] = res[m+1]\n          \
    \      }\n                res[j] = arr[i]\n                break\n           \
    \ }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    // \u5148\u6392\u5E8F\uFF0C\u7136\u540E\u53D6\u524Dk\u4E2A\n    //\
    \ \u5FEB\u6392\n    quickSort(arr, 0, len(arr) - 1)\n    return arr[:k]\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for m := k - 1; m > j; m-- {\n                    res[m] = res[m\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0\
    \ || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n       \
    \ return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n     \
    \           for t := k - 1; t > j; t-- {\n                    result[t] = result[t\
    \ - 1]\n                }\n                result[j] = arr[i]\n              \
    \  break\n            }\n        }\n    }\n    return result\n}\n", "    if len(arr)\
    \ == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n  \
    \      return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               for l := 0; l < j; l++ {\n                    result[l] = result[l+1]\n\
    \                }\n                result[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n \
    \   }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                result[j] =\
    \ arr[i]\n                break\n            }\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n     \
    \   return arr\n    }\n    // \u5229\u7528\u5FEB\u6392\u7684\u601D\u60F3\uFF0C\
    \u6BCF\u6B21\u627E\u5230\u4E00\u4E2A\u57FA\u51C6\u70B9\uFF0C\u7136\u540E\u628A\
    \u6BD4\u57FA\u51C6\u70B9\u5C0F\u7684\u653E\u5728\u5DE6\u8FB9\uFF0C\u6BD4\u57FA\
    \u51C6\u70B9\u5927\u7684\u653E\u5728\u53F3\u8FB9\n    // \u5982\u679C\u57FA\u51C6\
    \u70B9\u7684\u4F4D\u7F6E\u7B49\u4E8Ek\uFF0C\u5219\u8FD4\u56DE\uFF0C\u5982\u679C\
    \u57FA\u51C6\u70B9\u7684\u4F4D\u7F6E\u5C0F\u4E8Ek\uFF0C\u5219\u5728\u53F3\u8FB9\
    \u7EE7\u7EED\u627E\uFF0C\u5982\u679C\u57FA\u51C6\u70B9\u7684\u4F4D\u7F6E\u5927\
    \u4E8Ek\uFF0C\u5219\u5728\u5DE6\u8FB9\u7EE7\u7EED\u627E\n    var partition func([]int,\
    \ int, int) int\n    partition = func(arr []int, start, end int) int {\n     \
    \   if start >= end {\n            return start\n        }\n        pivot := arr[start]\n\
    \        i, j := start, end\n        for i < j {\n            for i < j && arr[j]\
    \ <= pivot {\n                j--\n            }\n            arr[i] = arr[j]\n\
    \            for i < j && arr[i] >= pivot {\n                i++\n           \
    \ }\n            arr[j] = arr[i]\n        }\n        arr[i] = pivot\n        return\
    \ i\n    }\n    start, end := 0, len(arr) - 1\n    for {\n        index := partition(arr,\
    \ start, end)\n        if index == k - 1 {\n            return arr[:k]\n     \
    \   } else if index < k - 1 {\n            start = index + 1\n        } else {\n\
    \            end = index - 1\n        }\n    }\n}\n\n", "    if len(arr) == 0\
    \ || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n       \
    \ return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > result[0] {\n            result[0] = arr[i]\n           \
    \ for j := 1; j < k; j++ {\n                if result[j] < result[j - 1] {\n \
    \                   result[j], result[j - 1] = result[j - 1], result[j]\n    \
    \            } else {\n                    break\n                }\n        \
    \    }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >= 0; i--\
    \ {\n        heapify(res, i, k)\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > res[0] {\n            res[0] = arr[i]\n            heapify(res,\
    \ 0, k)\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 || k ==\
    \ 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > result[0] {\n            result[0] = arr[i]\n           \
    \ for j := 1; j < k; j++ {\n                if result[j] < result[j - 1] {\n \
    \                   result[j], result[j - 1] = result[j - 1], result[j]\n    \
    \            } else {\n                    break\n                }\n        \
    \    }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var res\
    \ []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n   \
    \ }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n \
    \           if arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 || k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n          \
    \      result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    // \u521B\u5EFA\u4E00\u4E2A\u6700\u5927\u5806\n    heap := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    buildMaxHeap(heap)\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n        \
    \    heap[0] = arr[i]\n            maxHeapify(heap, 0)\n        }\n    }\n   \
    \ return heap\n}\n", "    var res []int\n    for i := 0; i < k; i++ {\n      \
    \  max := -1 << 31\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ > max {\n                max = arr[j]\n            }\n        }\n        res\
    \ = append(res, max)\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] == max {\n                arr = append(arr[:j], arr[j+1:]...)\n     \
    \           break\n            }\n        }\n    }\n    return res\n}\n", "  \
    \  var result []int\n    for i := 0; i < k; i++ {\n        max := -1001\n    \
    \    maxIndex := -1\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ > max {\n                max = arr[j]\n                maxIndex = j\n      \
    \      }\n        }\n        result = append(result, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n       \
    \ return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    buildHeap(result)\n    for i := k;\
    \ i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            heapify(result, 0)\n        }\n    }\n    return result\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n\
    \        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j - 1] {\n                    result[j], result[j -\
    \ 1] = result[j - 1], result[j]\n                } else {\n                  \
    \  break\n                }\n            }\n        }\n    }\n    return result\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n\
    \        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res = append(res[:j],\
    \ append([]int{arr[i]}, res[j:]...)...)\n                res = res[:k]\n     \
    \           break\n            }\n        }\n    }\n    return res\n}\n", "  \
    \  if len(arr) <= k {\n        return arr\n    }\n    var result []int\n    for\
    \ i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > result[0] {\n            result[0] = arr[i]\n           \
    \ for j := 1; j < k; j++ {\n                if result[j] < result[j - 1] {\n \
    \                   result[j], result[j - 1] = result[j - 1], result[j]\n    \
    \            } else {\n                    break\n                }\n        \
    \    }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res = append(res[:j],\
    \ append([]int{arr[i]}, res[j:]...)...)\n                res = res[:k]\n     \
    \           break\n            }\n        }\n    }\n    return res\n}\n", "  \
    \  if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 ||\
    \ k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n   \
    \     result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n       \
    \ if arr[i] > result[0] {\n            result[0] = arr[i]\n            maxHeapify(result,\
    \ 0)\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k ==\
    \ 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    // \u53CC\u6307\u9488\u6CD5\n    // \u5DE6\u6307\u9488\u6307\u5411\
    \u7B2C\u4E00\u4E2A\u5143\u7D20\uFF0C\u53F3\u6307\u9488\u6307\u5411\u7B2Ck+1\u4E2A\
    \u5143\u7D20\n    // \u5982\u679C\u53F3\u6307\u9488\u7684\u5143\u7D20\u5927\u4E8E\
    \u5DE6\u6307\u9488\u7684\u5143\u7D20\uFF0C\u5219\u5DE6\u6307\u9488\u5411\u53F3\
    \u79FB\u52A8\u4E00\u4F4D\uFF0C\u5E76\u4E14\u5C06\u5DE6\u6307\u9488\u7684\u5143\
    \u7D20\u653E\u5230\u7ED3\u679C\u6570\u7EC4\u4E2D\n    // \u5982\u679C\u53F3\u6307\
    \u9488\u7684\u5143\u7D20\u5C0F\u4E8E\u7B49\u4E8E\u5DE6\u6307\u9488\u7684\u5143\
    \u7D20\uFF0C\u5219\u53F3\u6307\u9488\u5411\u53F3\u79FB\u52A8\u4E00\u4F4D\n   \
    \ // \u5F53\u53F3\u6307\u9488\u5230\u8FBE\u6570\u7EC4\u672B\u5C3E\u65F6\uFF0C\u7ED3\
    \u675F\u5FAA\u73AF\n    // \u65F6\u95F4\u590D\u6742\u5EA6\uFF1AO(n)\n    // \u7A7A\
    \u95F4\u590D\u6742\u5EA6\uFF1AO(k)\n    res := make([]int, k)\n    for i, j :=\
    \ 0, k; j < len(arr); i, j = i + 1, j + 1 {\n        if arr[j] > arr[i] {\n  \
    \          res[i] = arr[j]\n        } else {\n            res[i] = arr[i]\n  \
    \          j--\n        }\n    }\n    for i := len(arr) - k; i < len(arr); i++\
    \ {\n        res[i - len(arr) + k] = arr[i]\n    }\n    return res\n}\n\n", " \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j - 1] {\n\
    \                    result[j], result[j - 1] = result[j - 1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n   \
    \     result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n       \
    \ for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n            \
    \    for m := k - 1; m > j; m-- {\n                    result[m] = result[m -\
    \ 1]\n                }\n                result[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   max := -1\n        maxIndex := -1\n        for j := 0; j < len(arr); j++ {\n\
    \            if arr[j] > max {\n                max = arr[j]\n               \
    \ maxIndex = j\n            }\n        }\n        res = append(res, max)\n   \
    \     arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n    }\n    return res\n\
    }\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    var res []int\n    for i :=\
    \ 0; i < k; i++ {\n        max := arr[0]\n        maxIndex := 0\n        for j\
    \ := 1; j < len(arr); j++ {\n            if arr[j] > max {\n                max\
    \ = arr[j]\n                maxIndex = j\n            }\n        }\n        res\
    \ = append(res, max)\n        arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n\
    \    }\n    return res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    result\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result[j] = arr[i]\n   \
    \             break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k == 1 {\n        max := arr[0]\n     \
    \   for _, v := range arr {\n            if v > max {\n                max = v\n\
    \            }\n        }\n        return []int{max}\n    }\n    // k > 1\n  \
    \  res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n  \
    \          res[0] = arr[i]\n            for j := 1; j < k; j++ {\n           \
    \     if res[j] < res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    var result []int\n\
    \    for _, v := range arr {\n        for i := 0; i < len(result); i++ {\n   \
    \         if v > result[i] {\n                result = append(result, 0)\n   \
    \             copy(result[i+1:], result[i:])\n                result[i] = v\n\
    \                break\n            }\n        }\n        if len(result) < k {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if\
    \ k >= len(arr) {\n        return arr\n    }\n    result := make([]int, k)\n \
    \   for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ > result[j - 1] {\n                    result[j], result[j - 1] = result[j -\
    \ 1], result[j]\n                } else {\n                    break\n       \
    \         }\n            }\n        }\n    }\n    return result\n}\n", "    if\
    \ len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    buildHeap(res)\n    for i := k;\
    \ i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n\
    \            heapify(res, 0)\n        }\n    }\n    return res\n}\n", "    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   if arr[i] > result[0] {\n            result[0] = arr[i]\n            for j\
    \ := 1; j < k; j++ {\n                if result[j] > result[j - 1] {\n       \
    \             result[j], result[j - 1] = result[j - 1], result[j]\n          \
    \      } else {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res = append(res[:j],\
    \ append([]int{arr[i]}, res[j:]...)...)\n                res = res[:k]\n     \
    \           break\n            }\n        }\n    }\n    return res\n}\n", "  \
    \  if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for m := k - 1; m > j; m-- {\n                    res[m] = res[m\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n   \
    \     return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   var result []int\n    var index int\n    for i := 0; i < k; i++ {\n      \
    \  index = 0\n        for j := 1; j < len(arr); j++ {\n            if arr[j] >\
    \ arr[index] {\n                index = j\n            }\n        }\n        result\
    \ = append(result, arr[index])\n        arr = append(arr[:index], arr[index+1:]...)\n\
    \    }\n    return result\n}\n", "    var res []int\n    for i := 0; i < k; i++\
    \ {\n        max := -1001\n        maxIndex := -1\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] > max {\n                max = arr[j]\n       \
    \         maxIndex = j\n            }\n        }\n        res = append(res, max)\n\
    \        arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n    }\n    return\
    \ res\n}\n", "    if len(arr) == k {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        max := -1 << 31\n        maxIndex\
    \ := -1\n        for j := 0; j < len(arr); j++ {\n            if arr[j] > max\
    \ {\n                max = arr[j]\n                maxIndex = j\n            }\n\
    \        }\n        result = append(result, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return result\n}\n", "    var res []int\n \
    \   for _, v := range arr {\n        for len(res) > 0 && v > res[len(res)-1] &&\
    \ len(res) + len(arr) - i > k {\n            res = res[:len(res)-1]\n        }\n\
    \        if len(res) < k {\n            res = append(res, v)\n        }\n    }\n\
    \    return res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    // heap\n    heap\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n  \
    \          heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n\
    \    return heap\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    // \u521B\u5EFA\
    \u4E00\u4E2A\u5927\u5C0F\u4E3Ak\u7684\u6570\u7EC4\uFF0C\u7528\u4E8E\u5B58\u50A8\
    \u6700\u5927\u7684k\u4E2A\u6570\n    max := make([]int, k)\n    // \u521D\u59CB\
    \u5316max\u6570\u7EC4\n    for i := 0; i < k; i++ {\n        max[i] = arr[i]\n\
    \    }\n    // \u5BF9max\u6570\u7EC4\u8FDB\u884C\u5806\u6392\u5E8F\n    for i\
    \ := k/2 - 1; i >= 0; i-- {\n        heapify(max, i, k)\n    }\n    // \u5BF9\
    arr\u6570\u7EC4\u8FDB\u884C\u904D\u5386\uFF0C\u5982\u679Carr[i]\u5927\u4E8Emax[0]\uFF0C\
    \u5219\u5C06arr[i]\u63D2\u5165\u5230max\u6570\u7EC4\u4E2D\n    for i := k; i <\
    \ len(arr); i++ {\n        if arr[i] > max[0] {\n            max[0] = arr[i]\n\
    \            heapify(max, 0, k)\n        }\n    }\n    return max\n}\n", "   \
    \ if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n       \
    \ return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n    \
    \    result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j - 1] {\n\
    \                    result[j], result[j - 1] = result[j - 1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n   \
    \     result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n       \
    \ if arr[i] > result[0] {\n            result[0] = arr[i]\n            for j :=\
    \ 1; j < k; j++ {\n                if result[j] < result[j - 1] {\n          \
    \          result[j], result[j - 1] = result[j - 1], result[j]\n             \
    \   } else {\n                    break\n                }\n            }\n  \
    \      }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] < result[j - 1] {\n                    result[j],\
    \ result[j - 1] = result[j - 1], result[j]\n                } else {\n       \
    \             break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n   \
    \             res = res[:k]\n                break\n            }\n        }\n\
    \    }\n    return res\n}\n", "    var result []int\n    if k == 0 {\n       \
    \ return result\n    }\n    if k == len(arr) {\n        return arr\n    }\n  \
    \  for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    // \u5148\u6392\
    \u5E8F\uFF0C\u7136\u540E\u53D6\u524Dk\u4E2A\n    quickSort(arr, 0, len(arr) -\
    \ 1)\n    return arr[:k]\n}\n", "    if k == 0 {\n        return []int{}\n   \
    \ }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for _, v := range arr {\n        if len(result)\
    \ == 0 {\n            result = append(result, v)\n            continue\n     \
    \   }\n        if len(result) < k {\n            result = append(result, v)\n\
    \            for i := len(result) - 1; i > 0; i-- {\n                if result[i]\
    \ > result[i - 1] {\n                    result[i], result[i - 1] = result[i -\
    \ 1], result[i]\n                } else {\n                    break\n       \
    \         }\n            }\n        } else {\n            if v > result[0] {\n\
    \                result[0] = v\n                for i := 1; i < len(result); i++\
    \ {\n                    if result[i] > result[i - 1] {\n                    \
    \    result[i], result[i - 1] = result[i - 1], result[i]\n                   \
    \ } else {\n                        break\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n", "    if len(arr)\
    \ == 0 || k == 0 {\n        return nil\n    }\n    if k >= len(arr) {\n      \
    \  return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n      \
    \  res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n   \
    \     for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n           \
    \     res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n          \
    \      res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      max := arr[0]\n        maxIndex := 0\n        for j := 1; j < len(arr);\
    \ j++ {\n            if arr[j] > max {\n                max = arr[j]\n       \
    \         maxIndex = j\n            }\n        }\n        result = append(result,\
    \ max)\n        arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n    }\n   \
    \ return result\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for l := k - 1; l > j; l-- {\n       \
    \             result[l] = result[l - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i\
    \ := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if res[j] <\
    \ res[j-1] {\n                    res[j], res[j-1] = res[j-1], res[j]\n      \
    \          } else {\n                    break\n                }\n          \
    \  }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 || k == 0\
    \ {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    result := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i <\
    \ len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j]\
    \ {\n                for l := k - 1; l > j; l-- {\n                    result[l]\
    \ = result[l - 1]\n                }\n                result[j] = arr[i]\n   \
    \             break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n \
    \   }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res = append(res[:j],\
    \ append([]int{arr[i]}, res[j:]...)...)\n                res = res[:k]\n     \
    \           break\n            }\n        }\n    }\n    return res\n}\n", "  \
    \  // return maximum1(arr, k)\n    return maximum2(arr, k)\n}\n", "    if k ==\
    \ 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j - 1] {\n                    result[j],\
    \ result[j - 1] = result[j - 1], result[j]\n                } else {\n       \
    \             break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO:\n    return []int{}\n}\n", "    if len(arr) == 0\
    \ || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n       \
    \ return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n    \
    \    result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               for m := k - 1; m > j; m-- {\n                    result[m] =\
    \ result[m - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n", " \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    // use a min heap to store the maximum k numbers\n    // the heap size\
    \ is k\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i]\
    \ = arr[i]\n    }\n    buildMinHeap(heap)\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n            minHeapify(heap,\
    \ 0)\n        }\n    }\n    return heap\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var res\
    \ []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n   \
    \ }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n     \
    \       res[0] = arr[i]\n            for j := 1; j < k; j++ {\n              \
    \  if res[j] > res[j-1] {\n                    res[j], res[j-1] = res[j-1], res[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 || k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n      \
    \  res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j\
    \ := 0; j < k; j++ {\n            if arr[i] > res[j] {\n                res[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    // use a max heap to store\
    \ the k largest numbers\n    heap := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        heap[i] = arr[i]\n    }\n    // build the max heap\n    for i :=\
    \ k / 2 - 1; i >= 0; i-- {\n        maxHeapify(heap, i, k)\n    }\n    // iterate\
    \ the rest of the array\n    for i := k; i < len(arr); i++ {\n        if arr[i]\
    \ > heap[0] {\n            heap[0] = arr[i]\n            maxHeapify(heap, 0, k)\n\
    \        }\n    }\n    return heap\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j - 1] {\n                    result[j],\
    \ result[j - 1] = result[j - 1], result[j]\n                } else {\n       \
    \             break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var res []int\n    for _, v := range arr {\n        for len(res)\
    \ > 0 && v > res[len(res)-1] && len(res) + len(arr) - i > k {\n            res\
    \ = res[:len(res)-1]\n        }\n        if len(res) < k {\n            res =\
    \ append(res, v)\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n \
    \       return []int{}\n    }\n    if k == len(arr) {\n        return arr\n  \
    \  }\n    var stack []int\n    for _, v := range arr {\n        for len(stack)\
    \ > 0 && stack[len(stack)-1] < v && len(stack) + len(arr) - i > k {\n        \
    \    stack = stack[:len(stack)-1]\n        }\n        if len(stack) < k {\n  \
    \          stack = append(stack, v)\n        }\n    }\n    return stack\n}\n",
  "    // return maximum1(arr, k)\n    return maximum2(arr, k)\n}\n", "    if len(arr)\
    \ == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n  \
    \      return arr\n    }\n    // Use a min heap to store the maximum k numbers.\n\
    \    // The heap size is k.\n    heap := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        heap[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >= 0; i--\
    \ {\n        heapify(heap, i, k)\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n            heapify(heap,\
    \ 0, k)\n        }\n    }\n    return heap\n}\n", "    var res []int\n    for\
    \ i := 0; i < k; i++ {\n        max := -1001\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] > max {\n                max = arr[j]\n       \
    \     }\n        }\n        res = append(res, max)\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] == max {\n                arr = append(arr[:j],\
    \ arr[j+1:]...)\n                break\n            }\n        }\n    }\n    return\
    \ res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    // use a max heap to store\
    \ k largest elements\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        heap[i] = arr[i]\n    }\n    // build max heap\n    for i := k / 2 -\
    \ 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n       \
    \     heapify(heap, 0, k)\n        }\n    }\n    return heap\n}\n", "    if len(arr)\
    \ == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n  \
    \      return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n\
    \        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n    \
    \    return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    if k > len(arr) {\n        return []int{}\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j - 1] {\n                    result[j], result[j -\
    \ 1] = result[j - 1], result[j]\n                } else {\n                  \
    \  break\n                }\n            }\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ > result[j - 1] {\n                    result[j], result[j - 1] = result[j -\
    \ 1], result[j]\n                } else {\n                    break\n       \
    \         }\n            }\n        }\n    }\n    return result\n}\n", "    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   if arr[i] > result[0] {\n            result[0] = arr[i]\n            for j\
    \ := 1; j < k; j++ {\n                if result[j] > result[j - 1] {\n       \
    \             result[j], result[j - 1] = result[j - 1], result[j]\n          \
    \      } else {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if len(arr) == 0 || k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // find the maximum k numbers in arr\n   \
    \ // use a min heap to store the k numbers\n    // the heap size is k\n    //\
    \ the heap root is the minimum number\n    // the heap is a min heap\n    // the\
    \ heap is a complete binary tree\n    // the heap is stored in an array\n    //\
    \ the heap is a balanced binary tree\n    // the heap is a full binary tree\n\
    \    // the heap is a complete binary tree\n    // the heap is a balanced binary\
    \ tree\n    // the heap is a full binary tree\n    // the heap is a complete binary\
    \ tree\n    // the heap is a balanced binary tree\n    // the heap is a full binary\
    \ tree\n    // the heap is a complete binary tree\n    // the heap is a balanced\
    \ binary tree\n    // the heap is a full binary tree\n    // the heap is a complete\
    \ binary tree\n    // the heap is a balanced binary tree\n    // the heap is a\
    \ full binary tree\n    // the heap is a complete binary tree\n    // the heap\
    \ is a balanced binary tree\n    // the heap is a full binary tree\n    // the\
    \ heap is a complete binary tree\n    // the heap is a balanced binary tree\n\
    \    // the heap is a full binary tree\n    // the heap is a complete binary tree\n\
    \    // the heap is a balanced binary tree\n    // the heap is a full binary tree\n\
    \    // the heap is a complete binary tree\n    // the heap is a balanced binary\
    \ tree\n    // the heap is a full binary tree\n    // the heap is a complete binary\
    \ tree\n    // the heap is a balanced binary tree\n    // the heap is a full binary\
    \ tree\n    // the heap is a complete binary tree\n    // the heap is a balanced\
    \ binary tree\n    // the heap is a full binary tree\n    // the heap is a complete\
    \ binary tree\n    // the heap is a balanced binary tree\n    // the heap is a\
    \ full binary tree\n    // the heap is a complete binary tree\n    // the heap\
    \ is a balanced binary tree\n    // the heap is a full binary tree\n    // the\
    \ heap is a complete binary tree\n    // the heap is a balanced binary tree\n\
    \   ", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    // use a min heap to store the\
    \ first k elements\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        heap[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >= 0; i-- {\n    \
    \    heapify(heap, i, k)\n    }\n    for i := k; i < len(arr); i++ {\n       \
    \ if arr[i] > heap[0] {\n            heap[0] = arr[i]\n            heapify(heap,\
    \ 0, k)\n        }\n    }\n    return heap\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // \u4F7F\u7528\u6700\u5927\u5806\n    //\
    \ \u5806\u9876\u5143\u7D20\u662F\u6700\u5927\u7684\u5143\u7D20\n    // \u5806\u9876\
    \u5143\u7D20\u4E0E\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u4EA4\u6362\uFF0C\u7136\
    \u540E\u5220\u9664\u6700\u540E\u4E00\u4E2A\u5143\u7D20\n    // \u5806\u9876\u5143\
    \u7D20\u4E0B\u6C89\uFF0C\u76F4\u5230\u5806\u9876\u5143\u7D20\u5927\u4E8E\u5DE6\
    \u53F3\u5B50\u8282\u70B9\n    // \u91CD\u590D\u4E0A\u8FF0\u8FC7\u7A0B\uFF0C\u76F4\
    \u5230\u5806\u4E2D\u5143\u7D20\u4E2A\u6570\u4E3Ak\n    // \u5806\u4E2D\u5143\u7D20\
    \u4E2A\u6570\u4E3Ak\u65F6\uFF0C\u5806\u9876\u5143\u7D20\u5C31\u662F\u7B2Ck\u5927\
    \u7684\u5143\u7D20\n    // \u5806\u4E2D\u5143\u7D20\u4E2A\u6570\u5C0F\u4E8Ek\u65F6\
    \uFF0C\u5806\u9876\u5143\u7D20\u5C31\u662F\u7B2Clen(arr)\u5927\u7684\u5143\u7D20\
    \n    // \u5806\u4E2D\u5143\u7D20\u4E2A\u6570\u5927\u4E8Ek\u65F6\uFF0C\u5806\u9876\
    \u5143\u7D20\u5C31\u662F\u7B2Ck\u5927\u7684\u5143\u7D20\n    // \u5806\u4E2D\u5143\
    \u7D20\u4E2A\u6570\u4E3Ak\u65F6\uFF0C\u5806\u9876\u5143\u7D20\u4E0E\u6700\u540E\
    \u4E00\u4E2A\u5143\u7D20\u4EA4\u6362\uFF0C\u7136\u540E\u5220\u9664\u6700\u540E\
    \u4E00\u4E2A\u5143\u7D20\n    // \u5806\u4E2D\u5143\u7D20\u4E2A\u6570\u5C0F\u4E8E\
    k\u65F6\uFF0C\u5806\u9876\u5143\u7D20\u4E0E\u6700\u540E\u4E00\u4E2A\u5143\u7D20\
    \u4EA4\u6362", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        j := k - 1\n        for ; j >= 0; j-- {\n            if arr[i] >\
    \ res[j] {\n                res[j+1] = res[j]\n            } else {\n        \
    \        break\n            }\n        }\n        res[j+1] = arr[i]\n    }\n \
    \   return res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      j := k - 1\n        for ; j >= 0; j-- {\n            if arr[i] > res[j]\
    \ {\n                res[j+1] = res[j]\n            } else {\n               \
    \ break\n            }\n        }\n        res[j+1] = arr[i]\n    }\n    return\
    \ res\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 ||\
    \ k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    // \u5229\u7528\u6700\u5927\u5806\n    heap := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i := k\
    \ / 2 - 1; i >= 0; i-- {\n        maxHeapify(heap, i, k)\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n            heap[0] =\
    \ arr[i]\n            maxHeapify(heap, 0, k)\n        }\n    }\n    return heap\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n\
    \        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n        \
    \        res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n       \
    \         res = res[:k]\n                break\n            }\n        }\n   \
    \ }\n    return res\n}\n", "    if len(arr) == 0 || k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    // \u5148\u6392\
    \u5E8F\uFF0C\u7136\u540E\u53D6\u524Dk\u4E2A\n    quickSort(arr, 0, len(arr) -\
    \ 1)\n    return arr[:k]\n}\n", "    if len(arr) == 0 || k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var res\
    \ []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n   \
    \ }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n \
    \           if arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
