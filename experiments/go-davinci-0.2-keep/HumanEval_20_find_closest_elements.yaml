name: HumanEval_20_find_closest_elements
language: go_test.go
prompt: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ (2.0, 2.0)\nfunc find_closest_elements(numbers []float64) []interface{} {\n"
tests: "func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
  \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
  \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
  \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(numbers) < 2 {\n        return []interface{}{}\n    }\n\
    \    var closest_diff float64 = numbers[1] - numbers[0]\n    var closest_pair\
    \ []float64 = []float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            diff\
    \ := numbers[j] - numbers[i]\n            if diff < closest_diff {\n         \
    \       closest_diff = diff\n                closest_pair = []float64{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return []interface{}{closest_pair[0],\
    \ closest_pair[1]}\n}\n", "    var closest_elements []interface{}\n    var closest_distance\
    \ float64\n    var distance float64\n    var distance_1 float64\n    var distance_2\
    \ float64\n    var distance_3 float64\n    var distance_4 float64\n    var distance_5\
    \ float64\n    var distance_6 float64\n    var distance_7 float64\n    var distance_8\
    \ float64\n    var distance_9 float64\n    var distance_10 float64\n    var distance_11\
    \ float64\n    var distance_12 float64\n    var distance_13 float64\n    var distance_14\
    \ float64\n    var distance_15 float64\n    var distance_16 float64\n    var distance_17\
    \ float64\n    var distance_18 float64\n    var distance_19 float64\n    var distance_20\
    \ float64\n    var distance_21 float64\n    var distance_22 float64\n    var distance_23\
    \ float64\n    var distance_24 float64\n    var distance_25 float64\n    var distance_26\
    \ float64\n    var distance_27 float64\n    var distance_28 float64\n    var distance_29\
    \ float64\n    var distance_30 float64\n    var distance_31 float64\n    var distance_32\
    \ float64\n    var distance_33 float64\n    var distance_34 float64\n    var distance_35\
    \ float64\n    var distance_36 float64\n    var distance_37 float64\n    var distance_38\
    \ float64\n    var distance_39 float64\n    var distance_40 float64\n    var distance_41\
    \ float64\n    var distance_42 float64\n    var distance_43 float64\n    var distance_44\
    \ float64\n    var distance_45 float64\n    var distance_46 float64\n    var distance_47\
    \ float64\n    var distance_48 float64\n    var distance_49 float64\n    var distance_50\
    \ float64\n    var distance_51 float64\n    var distance_52 float64\n    var distance_53\
    \ float64\n    var distance_54 float64\n    var distance_55 float64\n    var distance_56\
    \ float64\n    var distance_57 float64\n    var distance_58 float64\n    var distance_59\
    \ float64\n    var distance_60 float64\n    var distance_61 float", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64\n    for i, number := range numbers\
    \ {\n        if i == 0 {\n            closest_elements = []interface{}{number,\
    \ number}\n            closest_diff = numbers[i+1] - number\n        } else if\
    \ i == len(numbers) - 1 {\n            break\n        } else {\n            diff\
    \ := numbers[i+1] - number\n            if diff < closest_diff {\n           \
    \     closest_elements = []interface{}{number, numbers[i+1]}\n               \
    \ closest_diff = diff\n            }\n        }\n    }\n    return closest_elements\n\
    }\n", "    if len(numbers) < 2 {\n        return []interface{}{}\n    }\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_pair []float64\
    \ = []float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j]\
    \ - numbers[i]\n            if diff < closest_diff {\n                closest_diff\
    \ = diff\n                closest_pair = []float64{numbers[i], numbers[j]}\n \
    \           }\n        }\n    }\n    return []interface{}{closest_pair[0], closest_pair[1]}\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\
    \ = numbers[1] - numbers[0]\n    var current_difference float64\n\n    for i :=\
    \ 0; i < len(numbers) - 1; i++ {\n        current_difference = numbers[i + 1]\
    \ - numbers[i]\n        if current_difference < closest_difference {\n       \
    \     closest_difference = current_difference\n            closest_elements =\
    \ []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n\n    return closest_elements\n\
    }\n", "    var closest_pair []interface{}\n    var closest_distance float64 =\
    \ 0.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            distance := numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0.0 || distance < closest_distance {\n                closest_distance =\
    \ distance\n                closest_pair = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_pair\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            diff :=\
    \ numbers[j] - numbers[i]\n            if closest_diff == 0 || diff < closest_diff\
    \ {\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \                closest_diff = diff\n            }\n        }\n    }\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    var diff float64\n    var prev_num float64\n    var curr_num float64\n\
    \n    if len(numbers) > 1 {\n        closest_diff = numbers[1] - numbers[0]\n\
    \        closest_elements = []interface{}{numbers[0], numbers[1]}\n        prev_num\
    \ = numbers[0]\n        for _, curr_num = range numbers[1:] {\n            diff\
    \ = curr_num - prev_num\n            if diff < closest_diff {\n              \
    \  closest_diff = diff\n                closest_elements = []interface{}{prev_num,\
    \ curr_num}\n            }\n            prev_num = curr_num\n        }\n    }\n\
    \    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_distance float64\n    var distance float64\n    var distance_1\
    \ float64\n    var distance_2 float64\n    var number_1 float64\n    var number_2\
    \ float64\n\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            distance_1 = numbers[i] - numbers[j]\n\
    \            distance_2 = numbers[j] - numbers[i]\n            if distance_1 <\
    \ 0 {\n                distance = distance_1 * -1\n            } else {\n    \
    \            distance = distance_2\n            }\n            if closest_distance\
    \ == 0 || distance < closest_distance {\n                closest_distance = distance\n\
    \                if distance_1 < 0 {\n                    number_1 = numbers[j]\n\
    \                    number_2 = numbers[i]\n                } else {\n       \
    \             number_1 = numbers[i]\n                    number_2 = numbers[j]\n\
    \                }\n            }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ number_1)\n    closest_elements = append(closest_elements, number_2)\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_distance\
    \ float64\n    var distance float64\n    var current_element float64\n    var\
    \ next_element float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n      \
    \  current_element = numbers[i]\n        next_element = numbers[i + 1]\n     \
    \   distance = next_element - current_element\n        if i == 0 {\n         \
    \   closest_distance = distance\n            closest_elements = []interface{}{current_element,\
    \ next_element}\n        } else if distance < closest_distance {\n           \
    \ closest_distance = distance\n            closest_elements = []interface{}{current_element,\
    \ next_element}\n        }\n    }\n\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64 = numbers[1]\
    \ - numbers[0]\n    var closest_index int = 0\n    for i := 1; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_index = i\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index])\n    closest_elements = append(closest_elements, numbers[closest_index\
    \ + 1])\n    return closest_elements\n}\n", "    var closest_difference float64\
    \ = numbers[1] - numbers[0]\n    var closest_elements []interface{} = []interface{}{numbers[0],\
    \ numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[j] - numbers[i] < closest_difference\
    \ {\n                closest_difference = numbers[j] - numbers[i]\n          \
    \      closest_elements = []interface{}{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    var current_difference\
    \ float64\n    var current_elements []interface{}\n\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        current_elements = []interface{}{numbers[i], numbers[i +\
    \ 1]}\n        current_difference = numbers[i + 1] - numbers[i]\n        if closest_difference\
    \ == 0 || current_difference < closest_difference {\n            closest_difference\
    \ = current_difference\n            closest_elements = current_elements\n    \
    \    }\n    }\n\n    return closest_elements\n}\n", "    var closest []interface{}\n\
    \    var closest_diff float64\n    for i := 0; i < len(numbers); i++ {\n     \
    \   for j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] -\
    \ numbers[i]\n            if closest_diff == 0 || diff < closest_diff {\n    \
    \            closest_diff = diff\n                closest = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest\n}\n", "  \
    \  var closest_elements []interface{}\n    var closest_diff float64\n    for i,\
    \ number := range numbers {\n        if i == 0 {\n            closest_elements\
    \ = []interface{}{number, number}\n            closest_diff = numbers[i+1] - number\n\
    \        } else if i == len(numbers) - 1 {\n            break\n        } else\
    \ {\n            diff := numbers[i+1] - number\n            if diff < closest_diff\
    \ {\n                closest_elements = []interface{}{number, numbers[i+1]}\n\
    \                closest_diff = diff\n            }\n        }\n    }\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var smallest_difference\
    \ float64\n    var difference float64\n    var smaller_number float64\n    var\
    \ larger_number float64\n\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            difference = numbers[j] - numbers[i]\n\
    \            if i == 0 && j == 1 {\n                smallest_difference = difference\n\
    \                smaller_number = numbers[i]\n                larger_number =\
    \ numbers[j]\n            } else if difference < smallest_difference {\n     \
    \           smallest_difference = difference\n                smaller_number =\
    \ numbers[i]\n                larger_number = numbers[j]\n            }\n    \
    \    }\n    }\n\n    closest_elements = append(closest_elements, smaller_number,\
    \ larger_number)\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    var closest_elements_indexes []int = []int{0, 1}\n\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ := numbers[j] - numbers[i]\n            if difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements_indexes\
    \ = []int{i, j}\n            }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[0]])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[1]])\n\n    return closest_elements\n}\n",
  "    var closest_elements []interface{}\n    var closest_diff float64\n    for i\
    \ := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++\
    \ {\n            diff := numbers[j] - numbers[i]\n            if closest_diff\
    \ == 0 || diff < closest_diff {\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n", "    var closest []interface{}\n  \
    \  var smallestDifference float64\n    var currentDifference float64\n    var\
    \ previousNumber float64\n    var currentNumber float64\n\n    for i, number :=\
    \ range numbers {\n        if i == 0 {\n            previousNumber = number\n\
    \            continue\n        }\n\n        currentNumber = number\n        currentDifference\
    \ = currentNumber - previousNumber\n\n        if i == 1 {\n            smallestDifference\
    \ = currentDifference\n            closest = []interface{}{previousNumber, currentNumber}\n\
    \        } else if currentDifference < smallestDifference {\n            smallestDifference\
    \ = currentDifference\n            closest = []interface{}{previousNumber, currentNumber}\n\
    \        }\n\n        previousNumber = currentNumber\n    }\n\n    return closest\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\n\
    \    var current_difference float64\n    var current_elements []interface{}\n\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        current_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        current_difference = numbers[i + 1] - numbers[i]\n\
    \        if closest_difference == 0 || current_difference < closest_difference\
    \ {\n            closest_difference = current_difference\n            closest_elements\
    \ = current_elements\n        }\n    }\n\n    return closest_elements\n}\n", " \
    \   var closest_elements []interface{}\n    var closest_difference float64\n \
    \   var difference float64\n    var smaller_number float64\n    var larger_number\
    \ float64\n\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            if numbers[i] < numbers[j] {\n        \
    \        smaller_number = numbers[i]\n                larger_number = numbers[j]\n\
    \            } else {\n                smaller_number = numbers[j]\n         \
    \       larger_number = numbers[i]\n            }\n            difference = larger_number\
    \ - smaller_number\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{smaller_number, larger_number}\n            }\n        }\n \
    \   }\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference :=\
    \ numbers[j] - numbers[i]\n            if closest_difference == 0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    var closest_elements_index int = 0\n    for i := 0; i < len(numbers) - 1;\
    \ i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_elements_index = i\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_index + 1])\n    return closest_elements\n}\n", " \
    \   var closest_elements []interface{}\n    var closest_difference float64\n \
    \   for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if closest_difference\
    \ == 0 || difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64\n    var\
    \ current_difference float64\n    var current_element float64\n    var next_element\
    \ float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        current_element\
    \ = numbers[i]\n        next_element = numbers[i + 1]\n        current_difference\
    \ = next_element - current_element\n\n        if i == 0 {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{current_element,\
    \ next_element}\n        } else if current_difference < closest_difference {\n\
    \            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{current_element, next_element}\n        }\n    }\n\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    var current_difference float64 = 0.0\n    var current_elements\
    \ []interface{}\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        current_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        current_difference = numbers[i\
    \ + 1] - numbers[i]\n        if closest_difference == 0.0 || current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = current_elements\n        }\n    }\n\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    var closest_index int = 0\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i+1] - numbers[i]\n        if closest_difference\
    \ == 0.0 || difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index+1])\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var smallest_difference float64 = -1\n    for i := 0; i <\
    \ len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n \
    \           difference := numbers[j] - numbers[i]\n            if difference <\
    \ smallest_difference || smallest_difference == -1 {\n                smallest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64 = numbers[1]\
    \ - numbers[0]\n    var closest_numbers []float64 = numbers[0:2]\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n\
    \            difference := numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_numbers = numbers[i:j+1]\n            }\n        }\n  \
    \  }\n    closest_elements = append(closest_elements, closest_numbers[0])\n  \
    \  closest_elements = append(closest_elements, closest_numbers[len(closest_numbers)-1])\n\
    \    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    var difference float64\n    var first_number\
    \ float64\n    var second_number float64\n\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        first_number = numbers[i]\n        second_number = numbers[i\
    \ + 1]\n        difference = second_number - first_number\n        if i == 0 {\n\
    \            closest_difference = difference\n            closest_elements = []interface{}{first_number,\
    \ second_number}\n        } else if difference < closest_difference {\n      \
    \      closest_difference = difference\n            closest_elements = []interface{}{first_number,\
    \ second_number}\n        }\n    }\n\n    return closest_elements\n}\n", "   \
    \ var closest_elements []interface{}\n    var smallest_difference float64\n  \
    \  smallest_difference = numbers[1] - numbers[0]\n    closest_elements = append(closest_elements,\
    \ numbers[0])\n    closest_elements = append(closest_elements, numbers[1])\n \
    \   for i := 0; i < len(numbers) - 1; i++ {\n        if numbers[i + 1] - numbers[i]\
    \ < smallest_difference {\n            smallest_difference = numbers[i + 1] -\
    \ numbers[i]\n            closest_elements[0] = numbers[i]\n            closest_elements[1]\
    \ = numbers[i + 1]\n        }\n    }\n    return closest_elements\n}\n", "   \
    \ var closest_elements []interface{}\n    var closest_difference float64 = 0.0\n\
    \    var current_difference float64 = 0.0\n    var current_elements []interface{}\n\
    \n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            current_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            current_difference = numbers[j] - numbers[i]\n            if closest_difference\
    \ == 0.0 || current_difference < closest_difference {\n                closest_difference\
    \ = current_difference\n                closest_elements = current_elements\n\
    \            }\n        }\n    }\n\n    return closest_elements\n}\n", "    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_elements\
    \ []interface{} = []interface{}{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ := numbers[j] - numbers[i]\n            if difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n", "    var closest_elements []interface{}\n \
    \   var closest_difference float64\n    var current_difference float64\n    var\
    \ current_element float64\n    var previous_element float64\n\n    for i, element\
    \ := range numbers {\n        if i == 0 {\n            previous_element = element\n\
    \            continue\n        }\n\n        current_element = element\n      \
    \  current_difference = current_element - previous_element\n\n        if i ==\
    \ 1 {\n            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{previous_element, current_element}\n        } else if current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{previous_element, current_element}\n\
    \        }\n\n        previous_element = current_element\n    }\n\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_distance\
    \ float64 = -1\n    var distance float64\n    var i, j int\n\n    for i = 0; i\
    \ < len(numbers) - 1; i++ {\n        for j = i + 1; j < len(numbers); j++ {\n\
    \            distance = numbers[j] - numbers[i]\n            if closest_distance\
    \ == -1 || distance < closest_distance {\n                closest_distance = distance\n\
    \                closest_elements = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n\n    return closest_elements\n}\n", "    var\
    \ closest_pair []interface{}\n    var closest_diff float64 = numbers[1] - numbers[0]\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if diff < closest_diff {\n            closest_diff = diff\n\
    \            closest_pair = []interface{}{numbers[i], numbers[i + 1]}\n      \
    \  }\n    }\n    return closest_pair\n}\n", "    var minDiff float64 = numbers[1]\
    \ - numbers[0]\n    var minDiffIndex int = 0\n    for i := 1; i < len(numbers)\
    \ - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < minDiff\
    \ {\n            minDiff = diff\n            minDiffIndex = i\n        }\n   \
    \ }\n    return []interface{}{numbers[minDiffIndex], numbers[minDiffIndex + 1]}\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\
    \ = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     difference := numbers[i + 1] - numbers[i]\n        if difference < closest_difference\
    \ {\n            closest_difference = difference\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n    return closest_elements\n\
    }\n", "    var closest_diff float64 = numbers[1] - numbers[0]\n    var closest_elements\
    \ []interface{} = []interface{}{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64\n    var\
    \ difference float64\n    var first_number float64\n    var second_number float64\n\
    \n    for i := 0; i < len(numbers) - 1; i++ {\n        first_number = numbers[i]\n\
    \        second_number = numbers[i + 1]\n        difference = second_number -\
    \ first_number\n        if i == 0 {\n            closest_difference = difference\n\
    \            closest_elements = []interface{}{first_number, second_number}\n \
    \       } else if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_elements = []interface{}{first_number, second_number}\n\
    \        }\n    }\n\n    return closest_elements\n}\n", "    var closest_pair\
    \ []interface{}\n    var closest_distance float64\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            distance\
    \ := numbers[j] - numbers[i]\n            if closest_distance == 0 || distance\
    \ < closest_distance {\n                closest_distance = distance\n        \
    \        closest_pair = []interface{}{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n    return closest_pair\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference :=\
    \ numbers[j] - numbers[i]\n            if closest_difference == 0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64 = 0.0\n    var current_difference\
    \ float64 = 0.0\n    var current_elements []interface{}\n\n    for i := 0; i <\
    \ len(numbers) - 1; i++ {\n        current_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        current_difference = numbers[i + 1] - numbers[i]\n\
    \        if closest_difference == 0.0 || current_difference < closest_difference\
    \ {\n            closest_difference = current_difference\n            closest_elements\
    \ = current_elements\n        }\n    }\n\n    return closest_elements\n}\n", " \
    \   var closest_elements []interface{}\n    var closest_distance float64 = 0.0\n\
    \    var current_distance float64 = 0.0\n    var current_element float64 = 0.0\n\
    \    var previous_element float64 = 0.0\n\n    for _, current_element = range\
    \ numbers {\n        current_distance = current_element - previous_element\n \
    \       if current_distance < closest_distance || closest_distance == 0.0 {\n\
    \            closest_distance = current_distance\n            closest_elements\
    \ = []interface{}{previous_element, current_element}\n        }\n        previous_element\
    \ = current_element\n    }\n\n    return closest_elements\n}\n", "    var closest_pair\
    \ []interface{}\n    var closest_diff float64 = numbers[1] - numbers[0]\n    var\
    \ diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        diff = numbers[i\
    \ + 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_pair = []interface{}{numbers[i], numbers[i + 1]}\n\
    \        }\n    }\n    return closest_pair\n}\n", "    var closest []interface{}\n\
    \    closest = append(closest, numbers[0])\n    closest = append(closest, numbers[1])\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if abs(numbers[i] - numbers[j]) < abs(closest[0].(float64)\
    \ - closest[1].(float64)) {\n                closest[0] = numbers[i]\n       \
    \         closest[1] = numbers[j]\n            }\n        }\n    }\n    return\
    \ closest\n}\n", "    var closest_pair []interface{}\n    var smallest_difference\
    \ float64 = 0.0\n    var current_difference float64 = 0.0\n    var current_pair\
    \ []interface{}\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            current_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n            current_difference = numbers[j] - numbers[i]\n    \
    \        if smallest_difference == 0.0 || current_difference < smallest_difference\
    \ {\n                smallest_difference = current_difference\n              \
    \  closest_pair = current_pair\n            }\n        }\n    }\n\n    return\
    \ closest_pair\n}\n", "    var closest_elements []interface{}\n    var closest_distance\
    \ float64 = 0.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n\
    \            if closest_distance == 0.0 || distance < closest_distance {\n   \
    \             closest_distance = distance\n                closest_elements =\
    \ []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n   \
    \ return closest_elements\n}\n", "    var closest_elements []interface{}\n   \
    \ var closest_diff float64\n    var diff float64\n    var diff_abs float64\n \
    \   var i int\n    var j int\n    var length int\n    var number_1 float64\n \
    \   var number_2 float64\n\n    length = len(numbers)\n    closest_diff = numbers[1]\
    \ - numbers[0]\n    number_1 = numbers[0]\n    number_2 = numbers[1]\n    for\
    \ i = 0; i < length - 1; i++ {\n        for j = i + 1; j < length; j++ {\n   \
    \         diff = numbers[j] - numbers[i]\n            diff_abs = diff\n      \
    \      if diff < 0 {\n                diff_abs = -diff\n            }\n      \
    \      if diff_abs < closest_diff {\n                closest_diff = diff_abs\n\
    \                number_1 = numbers[i]\n                number_2 = numbers[j]\n\
    \            }\n        }\n    }\n    closest_elements = []interface{}{number_1,\
    \ number_2}\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64 = 0.0\n    var current_difference float64\
    \ = 0.0\n    var current_elements []interface{}\n\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            current_difference\
    \ = numbers[j] - numbers[i]\n            if closest_difference == 0.0 || current_difference\
    \ < closest_difference {\n                closest_difference = current_difference\n\
    \                current_elements = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n\n    closest_elements = current_elements\n  \
    \  return closest_elements\n}\n", "    var closest_elements []interface{}\n  \
    \  var closest_difference float64 = 0.0\n    for i := 0; i < len(numbers); i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference :=\
    \ numbers[j] - numbers[i]\n            if difference < closest_difference || closest_difference\
    \ == 0.0 {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n", "    var closest_elements []interface{}\n \
    \   var closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference :=\
    \ numbers[j] - numbers[i]\n            if closest_difference == 0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    var current_difference\
    \ float64\n    var current_element float64\n    var previous_element float64\n\
    \n    for i, element := range numbers {\n        if i == 0 {\n            previous_element\
    \ = element\n            continue\n        }\n        current_element = element\n\
    \        current_difference = current_element - previous_element\n        if i\
    \ == 1 {\n            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{previous_element, current_element}\n        } else if current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{previous_element, current_element}\n\
    \        }\n        previous_element = current_element\n    }\n    return closest_elements\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\
    \ = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     if numbers[i+1] - numbers[i] < closest_difference {\n            closest_difference\
    \ = numbers[i+1] - numbers[i]\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i+1]}\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ minDiff float64 = numbers[1] - numbers[0]\n    var minDiffIndex int = 0\n  \
    \  for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n\
    \        if diff < minDiff {\n            minDiff = diff\n            minDiffIndex\
    \ = i\n        }\n    }\n    return []interface{}{numbers[minDiffIndex], numbers[minDiffIndex\
    \ + 1]}\n}\n", "    var closest []interface{}\n    var closest_diff float64\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_diff\
    \ == 0 || diff < closest_diff {\n                closest_diff = diff\n       \
    \         closest = []interface{}{numbers[i], numbers[j]}\n            }\n   \
    \     }\n    }\n    return closest\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    for i, number := range numbers {\n  \
    \      for j, number2 := range numbers {\n            if i != j {\n          \
    \      difference := number - number2\n                if difference < 0 {\n \
    \                   difference = -difference\n                }\n            \
    \    if closest_difference == 0 || difference < closest_difference {\n       \
    \             closest_difference = difference\n                    closest_elements\
    \ = []interface{}{number, number2}\n                }\n            }\n       \
    \ }\n    }\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        if numbers[i +\
    \ 1] - numbers[i] < closest_difference {\n            closest_difference = numbers[i\
    \ + 1] - numbers[i]\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ := numbers[j] - numbers[i]\n            if closest_difference == 0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    var closest_elements []interface{} =\
    \ []interface{}{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers) - 1;\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            diff :=\
    \ numbers[j] - numbers[i]\n            if diff < closest_diff {\n            \
    \    closest_diff = diff\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_elements\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\n\
    \    var current_difference float64\n    var current_element float64\n    var\
    \ next_element float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n      \
    \  current_element = numbers[i]\n        next_element = numbers[i + 1]\n     \
    \   current_difference = next_element - current_element\n\n        if i == 0 {\n\
    \            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{current_element, next_element}\n        } else if current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{current_element, next_element}\n\
    \        }\n    }\n\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    var closest_index int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n\
    \        difference := numbers[i + 1] - numbers[i]\n        if difference < closest_difference\
    \ {\n            closest_difference = difference\n            closest_index =\
    \ i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    var difference float64\n    var smaller_number\
    \ float64\n    var larger_number float64\n\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        difference = numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference || closest_difference == 0 {\n            closest_difference\
    \ = difference\n            smaller_number = numbers[i]\n            larger_number\
    \ = numbers[i + 1]\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ smaller_number, larger_number)\n    return closest_elements\n}\n", "    var\
    \ closest []interface{}\n    var diff float64\n    var min_diff float64\n    var\
    \ min_diff_index int\n    var min_diff_index_found bool\n\n    for i, number :=\
    \ range numbers {\n        if i == 0 {\n            diff = numbers[i+1] - number\n\
    \            min_diff = diff\n            min_diff_index = i\n            min_diff_index_found\
    \ = true\n        } else if i == len(numbers) - 1 {\n            diff = number\
    \ - numbers[i-1]\n            if diff < min_diff {\n                min_diff =\
    \ diff\n                min_diff_index = i\n            }\n        } else {\n\
    \            diff = number - numbers[i-1]\n            if diff < min_diff {\n\
    \                min_diff = diff\n                min_diff_index = i\n       \
    \     }\n            diff = numbers[i+1] - number\n            if diff < min_diff\
    \ {\n                min_diff = diff\n                min_diff_index = i\n   \
    \         }\n        }\n    }\n\n    if min_diff_index_found {\n        closest\
    \ = append(closest, numbers[min_diff_index])\n        if min_diff_index == 0 {\n\
    \            closest = append(closest, numbers[min_diff_index+1])\n        } else\
    \ if min_diff_index == len(numbers) - 1 {\n            closest = append(closest,\
    \ numbers[min_diff_index-1])\n        } else {\n            if numbers[min_diff_index+1]\
    \ - numbers[min_diff_index] < numbers[min_diff_index] - numbers[min_diff_index-1]\
    \ {\n                closest = append(closest, numbers[min_diff_index+1])\n  \
    \          } else {\n                closest = append(closest, numbers[min_diff_index-1])\n\
    \            }\n        }\n    }\n\n    return closest\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    var closest_elements_index int = 0\n    for index, _ := range numbers {\n\
    \        if index == 0 {\n            continue\n        }\n        difference\
    \ := numbers[index] - numbers[index - 1]\n        if difference < closest_difference\
    \ {\n            closest_difference = difference\n            closest_elements_index\
    \ = index - 1\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_index + 1])\n    return closest_elements\n}\n", " \
    \   var minDiff float64 = numbers[1] - numbers[0]\n    var minDiffPair []float64\
    \ = numbers[0:2]\n    for i := 0; i < len(numbers) - 1; i++ {\n        diff :=\
    \ numbers[i+1] - numbers[i]\n        if diff < minDiff {\n            minDiff\
    \ = diff\n            minDiffPair = numbers[i:i+2]\n        }\n    }\n    return\
    \ []interface{}{minDiffPair[0], minDiffPair[1]}\n}\n", "    if len(numbers) <\
    \ 2 {\n        return []interface{}{}\n    }\n    var closest_elements []interface{}\n\
    \    var closest_diff float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest []interface{}\n    var closest_diff float64 = numbers[1] - numbers[0]\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if diff < closest_diff {\n            closest_diff = diff\n\
    \            closest = []interface{}{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return closest\n}\n", "    var closest_elements []interface{}\n  \
    \  var closest_distance float64 = 0.0\n    var distance float64 = 0.0\n    for\
    \ i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++\
    \ {\n            distance = numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0.0 || distance < closest_distance {\n                closest_distance =\
    \ distance\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    closest_elements = append(closest_elements,\
    \ numbers[0])\n    closest_elements = append(closest_elements, numbers[1])\n \
    \   for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if numbers[j] - numbers[i] < closest_elements[1].(float64)\
    \ - closest_elements[0].(float64) {\n                closest_elements[0] = numbers[i]\n\
    \                closest_elements[1] = numbers[j]\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    var current_difference float64\n    var\
    \ current_element float64\n    var next_element float64\n\n    for i := 0; i <\
    \ len(numbers) - 1; i++ {\n        current_element = numbers[i]\n        next_element\
    \ = numbers[i + 1]\n        current_difference = next_element - current_element\n\
    \n        if i == 0 {\n            closest_difference = current_difference\n \
    \           closest_elements = []interface{}{current_element, next_element}\n\
    \        } else if current_difference < closest_difference {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{current_element,\
    \ next_element}\n        }\n    }\n\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_distance float64\n    for i\
    \ := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++\
    \ {\n            distance := numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0 || distance < closest_distance {\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_distance = distance\n            }\n  \
    \      }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        difference := numbers[i\
    \ + 1] - numbers[i]\n        if difference < closest_difference {\n          \
    \  closest_difference = difference\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64 = numbers[1]\
    \ - numbers[0]\n    var closest_index int = 0\n    for i := 1; i < len(numbers)\
    \ - 1; i++ {\n        if numbers[i+1] - numbers[i] < closest_difference {\n  \
    \          closest_difference = numbers[i+1] - numbers[i]\n            closest_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index+1])\n \
    \   return closest_elements\n}\n", "    var closest []interface{}\n    var closest_diff\
    \ float64 = 0.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            if closest_diff == 0.0 || closest_diff\
    \ > numbers[j] - numbers[i] {\n                closest_diff = numbers[j] - numbers[i]\n\
    \                closest = []interface{}{numbers[i], numbers[j]}\n           \
    \ }\n        }\n    }\n    return closest\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers); i++ {\n        difference := numbers[i]\
    \ - numbers[i-1]\n        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index-1])\n    closest_elements =\
    \ append(closest_elements, numbers[closest_index])\n    return closest_elements\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\n\
    \    var difference float64\n    var smaller_number float64\n    var larger_number\
    \ float64\n\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            difference = numbers[j] - numbers[i]\n\
    \            if difference < 0 {\n                difference = difference * -1\n\
    \            }\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                smaller_number\
    \ = numbers[i]\n                larger_number = numbers[j]\n            }\n  \
    \      }\n    }\n\n    closest_elements = append(closest_elements, smaller_number)\n\
    \    closest_elements = append(closest_elements, larger_number)\n\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i\
    \ := 1; i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n\
    \        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    var difference float64\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference = numbers[j] - numbers[i]\n            if closest_difference\
    \ == 0 || difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest []interface{}\n    var closest_diff float64\n    for i, number := range\
    \ numbers {\n        for j, number2 := range numbers {\n            if i != j\
    \ {\n                diff := number - number2\n                if diff < 0 {\n\
    \                    diff = -diff\n                }\n                if closest_diff\
    \ == 0 || diff < closest_diff {\n                    closest_diff = diff\n   \
    \                 closest = []interface{}{number, number2}\n                }\n\
    \            }\n        }\n    }\n    return closest\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64 = 0.0\n    var closest_index int\
    \ = 0\n    var diff float64 = 0.0\n    var index int = 0\n\n    for i := 0; i\
    \ < len(numbers) - 1; i++ {\n        diff = numbers[i + 1] - numbers[i]\n    \
    \    if diff < closest_diff || closest_diff == 0.0 {\n            closest_diff\
    \ = diff\n            closest_index = i\n        }\n    }\n\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64\n    var diff float64\n    for i\
    \ := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++\
    \ {\n            diff = numbers[j] - numbers[i]\n            if diff < closest_diff\
    \ || closest_diff == 0 {\n                closest_diff = diff\n              \
    \  closest_elements = []interface{}{numbers[i], numbers[j]}\n            }\n \
    \       }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64 = 0\n    var diff float64 = 0\n\
    \    var first_number float64 = 0\n    var second_number float64 = 0\n\n    for\
    \ i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++\
    \ {\n            diff = numbers[j] - numbers[i]\n            if closest_diff ==\
    \ 0 || diff < closest_diff {\n                closest_diff = diff\n          \
    \      first_number = numbers[i]\n                second_number = numbers[j]\n\
    \            }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ first_number, second_number)\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var smallest_difference float64\n    smallest_difference\
    \ = numbers[1] - numbers[0]\n    closest_elements = append(closest_elements, numbers[0])\n\
    \    closest_elements = append(closest_elements, numbers[1])\n    for i := 0;\
    \ i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n\
    \        if difference < smallest_difference {\n            smallest_difference\
    \ = difference\n            closest_elements = []interface{}{numbers[i], numbers[i\
    \ + 1]}\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64\n    var diff float64\n    var prev_number\
    \ float64\n    var number float64\n    var first_number float64\n\n    for i,\
    \ number := range numbers {\n        if i == 0 {\n            first_number = number\n\
    \            prev_number = number\n            continue\n        }\n        diff\
    \ = number - prev_number\n        if i == 1 {\n            closest_diff = diff\n\
    \            closest_elements = []interface{}{prev_number, number}\n        }\
    \ else if diff < closest_diff {\n            closest_diff = diff\n           \
    \ closest_elements = []interface{}{prev_number, number}\n        }\n        prev_number\
    \ = number\n    }\n    if first_number - prev_number < closest_diff {\n      \
    \  closest_elements = []interface{}{prev_number, first_number}\n    }\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = 0.0\n    var current_difference float64 = 0.0\n    var current_smaller_number\
    \ float64 = 0.0\n    var current_larger_number float64 = 0.0\n\n    for i := 0;\
    \ i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n \
    \           current_smaller_number = numbers[i]\n            current_larger_number\
    \ = numbers[j]\n            if current_smaller_number > current_larger_number\
    \ {\n                current_smaller_number = numbers[j]\n                current_larger_number\
    \ = numbers[i]\n            }\n            current_difference = current_larger_number\
    \ - current_smaller_number\n            if closest_difference == 0.0 || current_difference\
    \ < closest_difference {\n                closest_difference = current_difference\n\
    \                closest_elements = []interface{}{current_smaller_number, current_larger_number}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_pair []interface{}\n    var closest_distance float64\n    for i := 0;\
    \ i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n \
    \           distance := numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0 || distance < closest_distance {\n                closest_distance = distance\n\
    \                closest_pair = []interface{}{numbers[i], numbers[j]}\n      \
    \      }\n        }\n    }\n    return closest_pair\n}\n", "    var minDiff float64\
    \ = numbers[1] - numbers[0]\n    var minDiffPair []float64 = []float64{numbers[0],\
    \ numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i\
    \ + 1] - numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n\
    \            minDiffPair = []float64{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return []interface{}{minDiffPair[0], minDiffPair[1]}\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_distance float64 = -1\n    var\
    \ closest_index1 int = -1\n    var closest_index2 int = -1\n    for i := 0; i\
    \ < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n   \
    \         distance := numbers[j] - numbers[i]\n            if closest_distance\
    \ == -1 || distance < closest_distance {\n                closest_distance = distance\n\
    \                closest_index1 = i\n                closest_index2 = j\n    \
    \        }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index1])\n    closest_elements = append(closest_elements, numbers[closest_index2])\n\
    \    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference :=\
    \ numbers[j] - numbers[i]\n            if closest_difference == 0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var closest\
    \ []interface{}\n    var diff float64\n    var smallestDiff float64\n\n    for\
    \ i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++\
    \ {\n            diff = numbers[j] - numbers[i]\n            if diff < smallestDiff\
    \ {\n                smallestDiff = diff\n                closest = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n\n    return closest\n}\n", " \
    \   var closest_elements []interface{}\n    var closest_diff float64\n    for\
    \ i, num1 := range numbers {\n        for _, num2 := range numbers[i+1:] {\n \
    \           diff := num2 - num1\n            if closest_diff == 0 || diff < closest_diff\
    \ {\n                closest_elements = []interface{}{num1, num2}\n          \
    \      closest_diff = diff\n            }\n        }\n    }\n    return closest_elements\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if closest_difference\
    \ == 0 || difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64 = 0.0\n \
    \   for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if closest_difference\
    \ == 0.0 || difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var smallest_difference float64\n    smallest_difference\
    \ = numbers[1] - numbers[0]\n    closest_elements = append(closest_elements, numbers[0])\n\
    \    closest_elements = append(closest_elements, numbers[1])\n    for i := 0;\
    \ i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n\
    \            if numbers[j] - numbers[i] < smallest_difference {\n            \
    \    smallest_difference = numbers[j] - numbers[i]\n                closest_elements[0]\
    \ = numbers[i]\n                closest_elements[1] = numbers[j]\n           \
    \ }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    var current_difference\
    \ float64\n    var current_elements []interface{}\n\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            current_difference\
    \ = numbers[j] - numbers[i]\n            if closest_difference == 0 || current_difference\
    \ < closest_difference {\n                closest_difference = current_difference\n\
    \                closest_elements = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64 = 0\n   \
    \ var closest_index int = 0\n    var current_difference float64 = 0\n    var current_index\
    \ int = 0\n\n    for i := 0; i < len(numbers); i++ {\n        current_index =\
    \ i\n        current_difference = numbers[i] - numbers[i + 1]\n        if current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_index = current_index\n        }\n    }\n\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index], numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n \
    \       for j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j]\
    \ - numbers[i]\n            if closest_diff == 0 || diff < closest_diff {\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \            closest_diff = diff\n            }\n        }\n    }\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var current_difference float64\n    var current_elements []interface{}\n\
    \n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            current_difference = numbers[j] - numbers[i]\n          \
    \  if closest_difference == 0 || current_difference < closest_difference {\n \
    \               closest_difference = current_difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n\n\
    \    return closest_elements\n}\n", "    if len(numbers) < 2 {\n        return\
    \ []interface{}{}\n    }\n    var closest_pair []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_pair == nil || diff < closest_diff {\n                closest_pair\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_pair\n}\n", "    var closest_pair\
    \ []interface{}\n    var closest_pair_distance float64\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            distance\
    \ := numbers[j] - numbers[i]\n            if closest_pair_distance == 0 || distance\
    \ < closest_pair_distance {\n                closest_pair_distance = distance\n\
    \                closest_pair = []interface{}{numbers[i], numbers[j]}\n      \
    \      }\n        }\n    }\n    return closest_pair\n}\n", "    var closest_pair\
    \ []interface{}\n    var closest_distance float64 = 0.0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if closest_distance\
    \ == 0.0 || closest_distance > numbers[j] - numbers[i] {\n                closest_distance\
    \ = numbers[j] - numbers[i]\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_pair\n}\n",
  "    var closest_elements []interface{}\n    var min_diff float64 = numbers[1] -\
    \ numbers[0]\n    var min_diff_index int = 0\n    for i := 1; i < len(numbers)\
    \ - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < min_diff\
    \ {\n            min_diff = diff\n            min_diff_index = i\n        }\n\
    \    }\n    closest_elements = append(closest_elements, numbers[min_diff_index])\n\
    \    closest_elements = append(closest_elements, numbers[min_diff_index + 1])\n\
    \    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64 = numbers[1] - numbers[0]\n    var closest_elements_indexes\
    \ []int = []int{0, 1}\n\n    for i := 0; i < len(numbers) - 1; i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if difference < closest_difference {\n           \
    \     closest_difference = difference\n                closest_elements_indexes\
    \ = []int{i, j}\n            }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[0]])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[1]])\n\n    return closest_elements\n}\n",
  "    var closest_elements []interface{}\n    var closest_difference float64\n  \
    \  for i, number := range numbers {\n        if i == 0 {\n            closest_difference\
    \ = number - numbers[i+1]\n            closest_elements = []interface{}{number,\
    \ numbers[i+1]}\n        } else if i == len(numbers) - 1 {\n            if closest_difference\
    \ > numbers[i-1] - number {\n                closest_difference = numbers[i-1]\
    \ - number\n                closest_elements = []interface{}{numbers[i-1], number}\n\
    \            }\n        } else {\n            if closest_difference > number -\
    \ numbers[i+1] {\n                closest_difference = number - numbers[i+1]\n\
    \                closest_elements = []interface{}{number, numbers[i+1]}\n    \
    \        }\n            if closest_difference > numbers[i-1] - number {\n    \
    \            closest_difference = numbers[i-1] - number\n                closest_elements\
    \ = []interface{}{numbers[i-1], number}\n            }\n        }\n    }\n   \
    \ return closest_elements\n}\n", "    var closest_elements []interface{}\n   \
    \ var closest_difference float64 = 999999.0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if numbers[j]\
    \ - numbers[i] < closest_difference {\n                closest_difference = numbers[j]\
    \ - numbers[i]\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64\n    var\
    \ current_difference float64\n    var current_closest_elements []interface{}\n\
    \n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            current_difference = numbers[j] - numbers[i]\n          \
    \  if closest_difference == 0 || current_difference < closest_difference {\n \
    \               closest_difference = current_difference\n                current_closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n\n\
    \    closest_elements = current_closest_elements\n\n    return closest_elements\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\
    \ = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i := 1; i\
    \ < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n\
    \        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n", "    var closest\
    \ []interface{}\n    var diff float64\n    var diff_min float64 = numbers[1] -\
    \ numbers[0]\n    var i int\n    var j int\n    for i = 0; i < len(numbers) -\
    \ 1; i++ {\n        for j = i + 1; j < len(numbers); j++ {\n            diff =\
    \ numbers[j] - numbers[i]\n            if diff < diff_min {\n                diff_min\
    \ = diff\n                closest = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n    return closest\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64\n    var diff float64\n    var i\
    \ int\n    var j int\n\n    for i = 0; i < len(numbers) - 1; i++ {\n        for\
    \ j = i + 1; j < len(numbers); j++ {\n            diff = numbers[j] - numbers[i]\n\
    \            if closest_diff == 0.0 || diff < closest_diff {\n               \
    \ closest_diff = diff\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n\n    return closest_elements\n\
    }\n", "    var closest_elements []interface{}\n    var closest_distance float64\n\
    \    var distance float64\n    var i int\n    var j int\n\n    closest_distance\
    \ = numbers[1] - numbers[0]\n    closest_elements = []interface{}{numbers[0],\
    \ numbers[1]}\n\n    for i = 0; i < len(numbers); i++ {\n        for j = i + 1;\
    \ j < len(numbers); j++ {\n            distance = numbers[j] - numbers[i]\n  \
    \          if distance < closest_distance {\n                closest_distance\
    \ = distance\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64\n    for\
    \ i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if closest_difference\
    \ == 0 || difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_pair []interface{}\n    var closest_diff float64\n    for i := 0; i\
    \ < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n\
    \            diff := numbers[j] - numbers[i]\n            if closest_pair == nil\
    \ || diff < closest_diff {\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_pair\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64 = 0.0\n    for i := 0; i < len(numbers); i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference :=\
    \ numbers[j] - numbers[i]\n            if closest_difference == 0.0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64\n    var diff float64\n    var diff_abs\
    \ float64\n    var first_number float64\n    var second_number float64\n\n   \
    \ for i := 0; i < len(numbers) - 1; i++ {\n        first_number = numbers[i]\n\
    \        second_number = numbers[i + 1]\n        diff = second_number - first_number\n\
    \        diff_abs = diff\n        if diff < 0 {\n            diff_abs = -diff\n\
    \        }\n        if i == 0 || diff_abs < closest_diff {\n            closest_diff\
    \ = diff_abs\n            closest_elements = []interface{}{first_number, second_number}\n\
    \        }\n    }\n\n    return closest_elements\n}\n", "    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_pair []float64 = []float64{numbers[0],\
    \ numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_pair = []float64{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return []interface{}{closest_pair[0], closest_pair[1]}\n\
    }\n", "    var closest_difference float64 = numbers[1] - numbers[0]\n    var closest_elements\
    \ []interface{} = []interface{}{numbers[0], numbers[1]}\n    var difference float64\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        difference = numbers[i +\
    \ 1] - numbers[i]\n        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_elements = []interface{}{numbers[i], numbers[i\
    \ + 1]}\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64 = -1\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            diff\
    \ := numbers[j] - numbers[i]\n            if closest_diff == -1 || diff < closest_diff\
    \ {\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \                closest_diff = diff\n            }\n        }\n    }\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i, number := range numbers {\n        if i == 0 {\n       \
    \     closest_elements = []interface{}{number, number}\n            closest_diff\
    \ = numbers[i+1] - number\n        } else if i == len(numbers) - 1 {\n       \
    \     break\n        } else {\n            diff := numbers[i+1] - number\n   \
    \         if diff < closest_diff {\n                closest_elements = []interface{}{number,\
    \ numbers[i+1]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n", "    var minDiff float64 = numbers[1]\
    \ - numbers[0]\n    var minDiffIndex int = 0\n    for i := 1; i < len(numbers)\
    \ - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < minDiff\
    \ {\n            minDiff = diff\n            minDiffIndex = i\n        }\n   \
    \ }\n    return []interface{}{numbers[minDiffIndex], numbers[minDiffIndex + 1]}\n\
    }\n", "    var closest_elements []interface{}\n    var closest_diff float64\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_diff\
    \ == 0 || diff < closest_diff {\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    var difference float64\n    var smallest_number\
    \ float64\n    var largest_number float64\n\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ = numbers[j] - numbers[i]\n            if difference < 0 {\n               \
    \ difference = difference * -1\n            }\n            if closest_difference\
    \ == 0 || difference < closest_difference {\n                closest_difference\
    \ = difference\n                smallest_number = numbers[i]\n               \
    \ largest_number = numbers[j]\n            }\n        }\n    }\n\n    closest_elements\
    \ = append(closest_elements, smallest_number)\n    closest_elements = append(closest_elements,\
    \ largest_number)\n\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64 = numbers[1] - numbers[0]\n    var\
    \ closest_elements_indexes []int\n    for i := 0; i < len(numbers) - 1; i++ {\n\
    \        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff {\n\
    \            closest_diff = diff\n            closest_elements_indexes = []int{i,\
    \ i + 1}\n        }\n    }\n    for _, i := range closest_elements_indexes {\n\
    \        closest_elements = append(closest_elements, numbers[i])\n    }\n    return\
    \ closest_elements\n}\n", "    var closest_pair []interface{}\n    var closest_distance\
    \ float64\n    var distance float64\n    var i int\n    var j int\n\n    for i\
    \ = 0; i < len(numbers); i++ {\n        for j = i + 1; j < len(numbers); j++ {\n\
    \            distance = numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0 || distance < closest_distance {\n                closest_distance = distance\n\
    \                closest_pair = []interface{}{numbers[i], numbers[j]}\n      \
    \      }\n        }\n    }\n\n    return closest_pair\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ := numbers[j] - numbers[i]\n            if closest_difference == 0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    var closest_index int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n\
    \        if numbers[i + 1] - numbers[i] < closest_difference {\n            closest_difference\
    \ = numbers[i + 1] - numbers[i]\n            closest_index = i\n        }\n  \
    \  }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n \
    \       for j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j]\
    \ - numbers[i]\n            if closest_diff == 0 || diff < closest_diff {\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \            closest_diff = diff\n            }\n        }\n    }\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_elements\
    \ []interface{} = []interface{}{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ := numbers[j] - numbers[i]\n            if difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n", "    var closest_elements []interface{}\n \
    \   var smallest_difference float64\n    var smallest_difference_index int\n \
    \   for i := 0; i < len(numbers) - 1; i++ {\n        difference := numbers[i +\
    \ 1] - numbers[i]\n        if i == 0 || difference < smallest_difference {\n \
    \           smallest_difference = difference\n            smallest_difference_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[smallest_difference_index])\n\
    \    closest_elements = append(closest_elements, numbers[smallest_difference_index\
    \ + 1])\n    return closest_elements\n}\n", "    var closest_pair []interface{}\n\
    \    var closest_diff float64\n    for i := 0; i < len(numbers); i++ {\n     \
    \   for j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] -\
    \ numbers[i]\n            if closest_pair == nil || diff < closest_diff {\n  \
    \              closest_pair = []interface{}{numbers[i], numbers[j]}\n        \
    \        closest_diff = diff\n            }\n        }\n    }\n    return closest_pair\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\
    \ = -1\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n \
    \           if closest_difference == -1 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n", "    var closest_elements []interface{}\n \
    \   var closest_difference float64\n    var difference float64\n    var i int\n\
    \    var j int\n\n    for i = 0; i < len(numbers) - 1; i++ {\n        for j =\
    \ i + 1; j < len(numbers); j++ {\n            difference = numbers[j] - numbers[i]\n\
    \            if difference < closest_difference || closest_difference == 0 {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n\n\
    \    return closest_elements\n}\n", "    var closest []interface{}\n    var closest_distance\
    \ float64 = -1.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n\
    \            if closest_distance == -1.0 || distance < closest_distance {\n  \
    \              closest_distance = distance\n                closest = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest\n}\n", "  \
    \  var closest_elements []interface{}\n    var closest_difference float64 = numbers[1]\
    \ - numbers[0]\n    var closest_elements_index int = 0\n    for i := 1; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_elements_index = i\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_index + 1])\n    return closest_elements\n}\n", " \
    \   var closest_elements []interface{}\n    var closest_difference float64 = numbers[1]\
    \ - numbers[0]\n    var closest_pair []float64 = []float64{numbers[0], numbers[1]}\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_pair = []float64{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n    closest_elements = append(closest_elements, closest_pair[0],\
    \ closest_pair[1])\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    var difference float64\n\
    \    var smaller_number float64\n    var larger_number float64\n\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n\
    \            difference = numbers[j] - numbers[i]\n            if difference <\
    \ 0 {\n                difference = -difference\n            }\n            if\
    \ closest_difference == 0 || difference < closest_difference {\n             \
    \   closest_difference = difference\n                if numbers[i] < numbers[j]\
    \ {\n                    smaller_number = numbers[i]\n                    larger_number\
    \ = numbers[j]\n                } else {\n                    smaller_number =\
    \ numbers[j]\n                    larger_number = numbers[i]\n               \
    \ }\n            }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ smaller_number)\n    closest_elements = append(closest_elements, larger_number)\n\
    \    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    var difference float64\n    var smaller_number\
    \ float64\n    var larger_number float64\n\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ = numbers[j] - numbers[i]\n            if difference < 0 {\n               \
    \ difference = difference * -1\n            }\n            if closest_difference\
    \ == 0 || difference < closest_difference {\n                closest_difference\
    \ = difference\n                smaller_number = numbers[i]\n                larger_number\
    \ = numbers[j]\n            }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ smaller_number)\n    closest_elements = append(closest_elements, larger_number)\n\
    \n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_distance float64 = 0.0\n    var current_distance float64 = 0.0\n\
    \    var current_elements []interface{}\n\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        current_elements = []interface{}{numbers[i], numbers[i + 1]}\n\
    \        current_distance = numbers[i + 1] - numbers[i]\n        if closest_distance\
    \ == 0.0 || current_distance < closest_distance {\n            closest_distance\
    \ = current_distance\n            closest_elements = current_elements\n      \
    \  }\n    }\n\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var smallest_difference float64 = numbers[1] - numbers[0]\n    var smallest_difference_elements\
    \ []float64 = []float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ := numbers[j] - numbers[i]\n            if difference < smallest_difference\
    \ {\n                smallest_difference = difference\n                smallest_difference_elements\
    \ = []float64{numbers[i], numbers[j]}\n            }\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, smallest_difference_elements[0])\n    closest_elements\
    \ = append(closest_elements, smallest_difference_elements[1])\n    return closest_elements\n\
    }\n", "    var closest []interface{}\n    var smallestDifference float64 = numbers[1]\
    \ - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n        difference\
    \ := numbers[i + 1] - numbers[i]\n        if difference < smallestDifference {\n\
    \            smallestDifference = difference\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        difference := numbers[i\
    \ + 1] - numbers[i]\n        if difference < closest_difference {\n          \
    \  closest_difference = difference\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_pair []interface{}\n    var closest_distance float64\n    for i := 0;\
    \ i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n\
    \            distance := numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0 || distance < closest_distance {\n                closest_distance = distance\n\
    \                closest_pair = []interface{}{numbers[i], numbers[j]}\n      \
    \      }\n        }\n    }\n    return closest_pair\n}\n", "    var closest_difference\
    \ float64\n    var closest_numbers []interface{}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ := numbers[j] - numbers[i]\n            if closest_difference == 0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_numbers = []interface{}{numbers[i], numbers[j]}\n     \
    \       }\n        }\n    }\n    return closest_numbers\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    var difference float64\n\
    \    var smallest_number float64\n    var largest_number float64\n\n    for i\
    \ := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++\
    \ {\n            difference = numbers[j] - numbers[i]\n            if difference\
    \ < 0 {\n                difference = -difference\n            }\n           \
    \ if closest_difference == 0 || difference < closest_difference {\n          \
    \      closest_difference = difference\n                smallest_number = numbers[i]\n\
    \                largest_number = numbers[j]\n            }\n        }\n    }\n\
    \n    closest_elements = append(closest_elements, smallest_number)\n    closest_elements\
    \ = append(closest_elements, largest_number)\n\n    return closest_elements\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if closest_difference\
    \ == 0 || difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_diff float64\n    for i := 0;\
    \ i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n\
    \            diff := numbers[j] - numbers[i]\n            if diff < closest_diff\
    \ || closest_diff == 0 {\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    for i := 0; i < len(numbers); i++ {\n\
    \        for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n", "    var closest_elements []interface{}\n \
    \   var closest_difference float64 = numbers[1] - numbers[0]\n    var closest_elements_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        difference :=\
    \ numbers[i + 1] - numbers[i]\n        if difference < closest_difference {\n\
    \            closest_difference = difference\n            closest_elements_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_elements_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_index\
    \ + 1])\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_diff float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i\
    \ + 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        difference := numbers[i\
    \ + 1] - numbers[i]\n        if difference < closest_difference {\n          \
    \  closest_difference = difference\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest_pair []interface{}\n    var closest_distance float64\n    for i := 0;\
    \ i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n\
    \            distance := numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0 || distance < closest_distance {\n                closest_distance = distance\n\
    \                closest_pair = []interface{}{numbers[i], numbers[j]}\n      \
    \      }\n        }\n    }\n    return closest_pair\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    var current_difference\
    \ float64\n    var current_element float64\n    var previous_element float64\n\
    \n    for index, element := range numbers {\n        if index == 0 {\n       \
    \     previous_element = element\n            continue\n        }\n\n        current_element\
    \ = element\n        current_difference = current_element - previous_element\n\
    \n        if closest_difference == 0 || current_difference < closest_difference\
    \ {\n            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{previous_element, current_element}\n        }\n\n        previous_element\
    \ = current_element\n    }\n\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    var current_difference\
    \ float64\n    var current_element float64\n    var next_element float64\n\n \
    \   for i := 0; i < len(numbers) - 1; i++ {\n        current_element = numbers[i]\n\
    \        next_element = numbers[i + 1]\n        current_difference = next_element\
    \ - current_element\n\n        if i == 0 {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{current_element, next_element}\n\
    \        } else if current_difference < closest_difference {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{current_element,\
    \ next_element}\n        }\n    }\n\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_diff float64 = -1\n    var diff\
    \ float64\n    var first_number float64\n    var second_number float64\n\n   \
    \ for i := 0; i < len(numbers) - 1; i++ {\n        first_number = numbers[i]\n\
    \        second_number = numbers[i + 1]\n        diff = second_number - first_number\n\
    \        if closest_diff == -1 || diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_elements = []interface{}{first_number, second_number}\n\
    \        }\n    }\n\n    return closest_elements\n}\n", "    var closest_pair\
    \ []interface{}\n    var closest_diff float64\n    var diff float64\n    for i,\
    \ number := range numbers {\n        for j, number2 := range numbers {\n     \
    \       if i != j {\n                diff = number - number2\n               \
    \ if diff < 0 {\n                    diff = diff * -1\n                }\n   \
    \             if closest_diff == 0 || diff < closest_diff {\n                \
    \    closest_diff = diff\n                    closest_pair = []interface{}{number,\
    \ number2}\n                }\n            }\n        }\n    }\n    return closest_pair\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\
    \ = numbers[1] - numbers[0]\n    var closest_pair []float64 = numbers[0:2]\n \
    \   for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if numbers[j] - numbers[i] < closest_difference {\n     \
    \           closest_difference = numbers[j] - numbers[i]\n                closest_pair\
    \ = numbers[i:j+1]\n            }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ closest_pair[0], closest_pair[len(closest_pair)-1])\n    return closest_elements\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if closest_difference\
    \ == 0 || difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ result []interface{}\n    var minDiff float64\n    var minDiffIndex int\n  \
    \  for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n\
    \        if i == 0 || diff < minDiff {\n            minDiff = diff\n         \
    \   minDiffIndex = i\n        }\n    }\n    result = append(result, numbers[minDiffIndex])\n\
    \    result = append(result, numbers[minDiffIndex + 1])\n    return result\n}\n",
  "    var closest_elements []interface{}\n    var closest_difference float64 = numbers[1]\
    \ - numbers[0]\n    var closest_elements_indexes []int\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        if numbers[i + 1] - numbers[i] < closest_difference {\n\
    \            closest_difference = numbers[i + 1] - numbers[i]\n            closest_elements_indexes\
    \ = []int{i, i + 1}\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[0]])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[1]])\n    return closest_elements\n}\n", " \
    \   var closest_pair []interface{}\n    var closest_distance float64 = 0.0\n \
    \   for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            distance := numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0.0 || distance < closest_distance {\n                closest_distance =\
    \ distance\n                closest_pair = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_pair\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    var difference float64\n\
    \    var smaller_number float64\n    var larger_number float64\n\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n\
    \            difference = numbers[j] - numbers[i]\n            if difference <\
    \ 0 {\n                difference = difference * -1\n            }\n         \
    \   if closest_difference == 0 || difference < closest_difference {\n        \
    \        closest_difference = difference\n                smaller_number = numbers[i]\n\
    \                larger_number = numbers[j]\n            }\n        }\n    }\n\
    \n    closest_elements = append(closest_elements, smaller_number)\n    closest_elements\
    \ = append(closest_elements, larger_number)\n\n    return closest_elements\n}\n",
  "    var closest_elements []interface{}\n    var closest_diff float64 = numbers[1]\
    \ - numbers[0]\n    var closest_elements_indexes []int\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_elements_indexes = []int{i,\
    \ i + 1}\n        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_elements_indexes[0]])\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_indexes[1]])\n\
    \    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    var current_difference float64\n    var\
    \ current_elements []interface{}\n\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            current_difference\
    \ = numbers[j] - numbers[i]\n            if closest_difference == 0 || current_difference\
    \ < closest_difference {\n                closest_difference = current_difference\n\
    \                closest_elements = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n\n    return closest_elements\n}\n", "    var\
    \ closest []interface{}\n    var closest_diff float64\n    for i, n := range numbers\
    \ {\n        if i == 0 {\n            closest = []interface{}{n, n}\n        \
    \    closest_diff = numbers[i+1] - n\n        } else if i == len(numbers) - 1\
    \ {\n            if n - numbers[i-1] < closest_diff {\n                closest\
    \ = []interface{}{numbers[i-1], n}\n            }\n        } else {\n        \
    \    if n - numbers[i-1] < closest_diff {\n                closest = []interface{}{numbers[i-1],\
    \ n}\n                closest_diff = n - numbers[i-1]\n            }\n       \
    \     if numbers[i+1] - n < closest_diff {\n                closest = []interface{}{n,\
    \ numbers[i+1]}\n                closest_diff = numbers[i+1] - n\n           \
    \ }\n        }\n    }\n    return closest\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    var difference float64\n    var first_number\
    \ float64\n    var second_number float64\n\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        first_number = numbers[i]\n        second_number = numbers[i\
    \ + 1]\n        difference = second_number - first_number\n        if closest_difference\
    \ == 0 || difference < closest_difference {\n            closest_difference =\
    \ difference\n            closest_elements = []interface{}{first_number, second_number}\n\
    \        }\n    }\n\n    return closest_elements\n}\n", "    var closest_difference\
    \ float64\n    var closest_elements []interface{}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ := numbers[j] - numbers[i]\n            if closest_difference == 0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var result\
    \ []interface{}\n    var minDiff float64\n    minDiff = numbers[1] - numbers[0]\n\
    \    result = append(result, numbers[0])\n    result = append(result, numbers[1])\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if numbers[j] - numbers[i] < minDiff {\n                minDiff\
    \ = numbers[j] - numbers[i]\n                result[0] = numbers[i]\n        \
    \        result[1] = numbers[j]\n            }\n        }\n    }\n    return result\n\
    }\n", "    var closest_elements []interface{}\n    var closest_difference float64\n\
    \    var current_difference float64\n    var current_element float64\n    var\
    \ previous_element float64\n\n    // iterate through the list of numbers\n   \
    \ for i, v := range numbers {\n        // get the current element\n        current_element\
    \ = v\n\n        // if this is the first element, set the previous element to\
    \ the current element\n        if i == 0 {\n            previous_element = current_element\n\
    \            continue\n        }\n\n        // get the difference between the\
    \ current and previous elements\n        current_difference = current_element\
    \ - previous_element\n\n        // if this is the first element, set the closest\
    \ difference to the current difference\n        if i == 1 {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{previous_element,\
    \ current_element}\n            continue\n        }\n\n        // if the current\
    \ difference is less than the closest difference, set the closest difference to\
    \ the current\n        // difference and set the closest elements to the current\
    \ and previous elements\n        if current_difference < closest_difference {\n\
    \            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{previous_element, current_element}\n        }\n\n        //\
    \ set the previous element to the current element\n        previous_element =\
    \ current_element\n    }\n\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64\n    var diff float64\n    var i\
    \ int\n    var j int\n\n    for i = 0; i < len(numbers); i++ {\n        for j\
    \ = i + 1; j < len(numbers); j++ {\n            diff = numbers[j] - numbers[i]\n\
    \            if closest_diff == 0 || diff < closest_diff {\n                closest_diff\
    \ = diff\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_distance float64\n    var distance\
    \ float64\n    var current_element float64\n    var next_element float64\n\n \
    \   for i := 0; i < len(numbers) - 1; i++ {\n        current_element = numbers[i]\n\
    \        next_element = numbers[i + 1]\n        distance = next_element - current_element\n\
    \n        if i == 0 {\n            closest_distance = distance\n            closest_elements\
    \ = []interface{}{current_element, next_element}\n        } else if distance <\
    \ closest_distance {\n            closest_distance = distance\n            closest_elements\
    \ = []interface{}{current_element, next_element}\n        }\n    }\n\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n \
    \           if closest_difference == 0 || difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n", "    var closest_elements []interface{}\n \
    \   closest_elements = append(closest_elements, numbers[0])\n    closest_elements\
    \ = append(closest_elements, numbers[1])\n    for i := 0; i < len(numbers) - 1;\
    \ i++ {\n        if numbers[i+1] - numbers[i] < closest_elements[1].(float64)\
    \ - closest_elements[0].(float64) {\n            closest_elements[0] = numbers[i]\n\
    \            closest_elements[1] = numbers[i+1]\n        }\n    }\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var smallest_difference\
    \ float64\n    var difference float64\n    var smallest_difference_index int\n\
    \    var difference_index int\n    var smallest_difference_index_found bool\n\
    \    var difference_index_found bool\n\n    for i := 0; i < len(numbers); i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference =\
    \ numbers[j] - numbers[i]\n            if difference < 0 {\n                difference\
    \ = -difference\n            }\n            if !smallest_difference_index_found\
    \ || difference < smallest_difference {\n                smallest_difference =\
    \ difference\n                smallest_difference_index = i\n                smallest_difference_index_found\
    \ = true\n            }\n            if !difference_index_found || difference\
    \ > difference {\n                difference = difference\n                difference_index\
    \ = j\n                difference_index_found = true\n            }\n        }\n\
    \    }\n\n    closest_elements = append(closest_elements, numbers[smallest_difference_index])\n\
    \    closest_elements = append(closest_elements, numbers[difference_index])\n\n\
    \    return closest_elements\n}\n", "    closest := []interface{}{numbers[0],\
    \ numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++ {\n        if numbers[i+1]\
    \ - numbers[i] < closest[1].(float64) - closest[0].(float64) {\n            closest\
    \ = []interface{}{numbers[i], numbers[i+1]}\n        }\n    }\n    return closest\n\
    }\n", "    var closest_elements []interface{}\n    var closest_diff float64\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_diff\
    \ == 0 || diff < closest_diff {\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    for i, number := range numbers {\n  \
    \      if i == 0 {\n            closest_difference = number - numbers[i+1]\n \
    \           closest_elements = []interface{}{number, numbers[i+1]}\n        }\
    \ else if i == len(numbers) - 1 {\n            break\n        } else {\n     \
    \       difference := number - numbers[i+1]\n            if difference < 0 {\n\
    \                difference = difference * -1\n            }\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{number, numbers[i+1]}\n      \
    \      }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_distance float64\n    var distance float64\n\
    \    var i int\n    var j int\n\n    for i = 0; i < len(numbers) - 1; i++ {\n\
    \        for j = i + 1; j < len(numbers); j++ {\n            distance = numbers[j]\
    \ - numbers[i]\n            if closest_distance == 0 || distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n\n\
    \    return closest_elements\n}\n", "    var closest_pair []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_pair_index int\
    \ = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i\
    \ + 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_pair_index = i\n        }\n    }\n    closest_pair\
    \ = append(closest_pair, numbers[closest_pair_index])\n    closest_pair = append(closest_pair,\
    \ numbers[closest_pair_index + 1])\n    return closest_pair\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ := numbers[j] - numbers[i]\n            if closest_difference == 0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64 = numbers[1] - numbers[0]\n\
    \    var closest_elements_indexes []int = []int{0, 1}\n\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if\
    \ difference := numbers[j] - numbers[i]; difference < closest_difference {\n \
    \               closest_difference = difference\n                closest_elements_indexes\
    \ = []int{i, j}\n            }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[0]])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[1]])\n\n    return closest_elements\n}\n",
  "    var closest_elements []interface{}\n    var closest_distance float64 = -1.0\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if closest_distance == -1.0 || closest_distance > numbers[j]\
    \ - numbers[i] {\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_distance = numbers[j] - numbers[i]\n  \
    \          }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_pair\
    \ []interface{}\n    var smallest_difference float64\n    smallest_difference\
    \ = numbers[1] - numbers[0]\n    closest_pair = []interface{}{numbers[0], numbers[1]}\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if numbers[j] - numbers[i] < smallest_difference {\n    \
    \            smallest_difference = numbers[j] - numbers[i]\n                closest_pair\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_pair\n}\n", "    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    var diff float64\n    var i int\n    var j int\n\n\
    \    for i = 0; i < len(numbers) - 1; i++ {\n        for j = i + 1; j < len(numbers);\
    \ j++ {\n            diff = numbers[j] - numbers[i]\n            if closest_diff\
    \ == 0 || diff < closest_diff {\n                closest_diff = diff\n       \
    \         closest_elements = []interface{}{numbers[i], numbers[j]}\n         \
    \   }\n        }\n    }\n\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64\n    var current_difference\
    \ float64\n    var current_element float64\n    var previous_element float64\n\
    \n    for i, _ := range numbers {\n        current_element = numbers[i]\n    \
    \    if i == 0 {\n            previous_element = current_element\n           \
    \ continue\n        }\n        current_difference = current_element - previous_element\n\
    \        if i == 1 {\n            closest_difference = current_difference\n  \
    \          closest_elements = []interface{}{previous_element, current_element}\n\
    \        } else if current_difference < closest_difference {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{previous_element,\
    \ current_element}\n        }\n        previous_element = current_element\n  \
    \  }\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_distance float64\n    var distance float64\n    var smaller_number\
    \ float64\n    var larger_number float64\n\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            distance\
    \ = numbers[j] - numbers[i]\n            if distance < 0 {\n                distance\
    \ = -distance\n            }\n            if closest_distance == 0 || distance\
    \ < closest_distance {\n                closest_distance = distance\n        \
    \        smaller_number = numbers[i]\n                larger_number = numbers[j]\n\
    \            }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ smaller_number)\n    closest_elements = append(closest_elements, larger_number)\n\
    \n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference :=\
    \ numbers[j] - numbers[i]\n            if closest_difference == 0 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_difference float64 = 0\n    var current_difference\
    \ float64 = 0\n    var current_elements []interface{}\n\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        current_elements = []interface{}{numbers[i], numbers[i +\
    \ 1]}\n        current_difference = numbers[i + 1] - numbers[i]\n        if closest_difference\
    \ == 0 || current_difference < closest_difference {\n            closest_difference\
    \ = current_difference\n            closest_elements = current_elements\n    \
    \    }\n    }\n\n    return closest_elements\n}\n", "    var closest_elements\
    \ []interface{}\n    var closest_diff float64\n    var diff float64\n    var number_1\
    \ float64\n    var number_2 float64\n\n    for i := 0; i < len(numbers); i++ {\n\
    \        for j := i + 1; j < len(numbers); j++ {\n            number_1 = numbers[i]\n\
    \            number_2 = numbers[j]\n            diff = number_2 - number_1\n \
    \           if diff < 0 {\n                diff = diff * -1\n            }\n \
    \           if diff < closest_diff || closest_diff == 0 {\n                closest_diff\
    \ = diff\n                closest_elements = []interface{}{number_1, number_2}\n\
    \            }\n        }\n    }\n\n    return closest_elements\n}\n", "    var\
    \ closest_elements []interface{}\n    var closest_difference float64\n    var\
    \ current_difference float64\n    var current_element float64\n    var next_element\
    \ float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        current_element\
    \ = numbers[i]\n        next_element = numbers[i + 1]\n        current_difference\
    \ = next_element - current_element\n\n        if i == 0 {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{current_element,\
    \ next_element}\n        } else if current_difference < closest_difference {\n\
    \            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{current_element, next_element}\n        }\n    }\n\n    return\
    \ closest_elements\n}\n", "    var closest_elements []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    var closest_pair []float64 = numbers[0:2]\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_pair = numbers[i:j+1]\n            }\n        }\n    }\n\
    \    closest_elements = append(closest_elements, closest_pair[0], closest_pair[len(closest_pair)-1])\n\
    \    return closest_elements\n}\n", "    var minDiff float64 = numbers[1] - numbers[0]\n\
    \    var minDiffIndex int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n \
    \       if numbers[i+1] - numbers[i] < minDiff {\n            minDiff = numbers[i+1]\
    \ - numbers[i]\n            minDiffIndex = i\n        }\n    }\n    return []interface{}{numbers[minDiffIndex],\
    \ numbers[minDiffIndex+1]}\n}\n", "    var closest_elements []interface{}\n  \
    \  var closest_distance float64 = 0.0\n    var distance float64 = 0.0\n    var\
    \ first_number float64 = 0.0\n    var second_number float64 = 0.0\n\n    for i\
    \ := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++\
    \ {\n            distance = numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0.0 || distance < closest_distance {\n                closest_distance =\
    \ distance\n                first_number = numbers[i]\n                second_number\
    \ = numbers[j]\n            }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ first_number, second_number)\n    return closest_elements\n}\n", "    var closest\
    \ []interface{}\n    var minDiff float64\n    minDiff = numbers[1] - numbers[0]\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n      \
    \      closest = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n\
    \    return closest\n}\n", "    var closest_elements []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var smaller_number float64\n    var\
    \ larger_number float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n     \
    \   for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] > numbers[j]\
    \ {\n                smaller_number = numbers[j]\n                larger_number\
    \ = numbers[i]\n            } else {\n                smaller_number = numbers[i]\n\
    \                larger_number = numbers[j]\n            }\n            difference\
    \ = larger_number - smaller_number\n            if closest_difference == 0 ||\
    \ difference < closest_difference {\n                closest_difference = difference\n\
    \                closest_elements = []interface{}{smaller_number, larger_number}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n", "    var\
    \ closest []interface{}\n    var closest_diff float64\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            diff :=\
    \ numbers[j] - numbers[i]\n            if closest_diff == 0 || diff < closest_diff\
    \ {\n                closest_diff = diff\n                closest = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest\n}\n", "  \
    \  var closest_elements []interface{}\n    var closest_diff float64\n    var diff\
    \ float64\n    var diff_found bool\n\n    for i := 0; i < len(numbers); i++ {\n\
    \        for j := i + 1; j < len(numbers); j++ {\n            diff = numbers[j]\
    \ - numbers[i]\n            if diff_found {\n                if diff < closest_diff\
    \ {\n                    closest_diff = diff\n                    closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                }\n            } else\
    \ {\n                closest_diff = diff\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                diff_found = true\n            }\n        }\n \
    \   }\n\n    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64\n    var difference float64\n    var length\
    \ int = len(numbers)\n    var i int\n    var j int\n\n    for i = 0; i < length;\
    \ i++ {\n        for j = i + 1; j < length; j++ {\n            difference = numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n\n\
    \    return closest_elements\n}\n", "    var closest_elements []interface{}\n\
    \    var closest_difference float64 = -1\n    for i := 0; i < len(numbers); i++\
    \ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference :=\
    \ numbers[j] - numbers[i]\n            if closest_difference == -1 || difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n", "    var closest\
    \ []interface{}\n    var diff float64\n    var minDiff float64\n\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n\
    \            diff = numbers[j] - numbers[i]\n            if diff < minDiff {\n\
    \                minDiff = diff\n                closest = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n\n    return closest\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
