name: HumanEval_39_prime_fib
language: go_test.go
prompt: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
  // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n\
  // >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n int) int\
  \ {\n"
tests: "func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
  \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
  \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
  \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n\
  \     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9), expected:\
  \ 514229 },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor\
  \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n\
    \    }\n    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return\
    \ 89\n    }\n    return 0\n}\n", "    if n == 1 {\n        return 2\n    }\n \
    \   if n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n\
    \    }\n    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return\
    \ 89\n    }\n    return 0\n}\n", "    if n == 1 {\n        return 2\n    }\n \
    \   if n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n\
    \    }\n    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return\
    \ 89\n    }\n    return 0\n}\n", "    var i, j, k, count int\n    i, j, k = 2,\
    \ 3, 5\n    count = 2\n    for count < n {\n        if is_prime(k) {\n       \
    \     count += 1\n        }\n        i, j, k = j, k, i+j\n    }\n    return k\n\
    }\n", "    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n", "    var\
    \ fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs, 3)\n    for\
    \ i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n \
    \   }\n    return fibs[n-1]\n}\n", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 3\n    }\n    a, b := 2, 3\n    for i := 3; i\
    \ <= n; i++ {\n        a, b = b, a + b\n        for b % 2 == 0 {\n           \
    \ b += a\n        }\n    }\n    return b\n}\n", "    if n < 1 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n      \
    \  return 3\n    }\n    var fib, fib1, fib2 int = 0, 2, 3\n    var count int =\
    \ 2\n    for {\n        fib = fib1 + fib2\n        fib1 = fib2\n        fib2 =\
    \ fib\n        if is_prime(fib) {\n            count++\n        }\n        if\
    \ count == n {\n            break\n        }\n    }\n    return fib\n}\n", " \
    \   if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n\
    \    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4 {\n        return\
    \ 13\n    }\n    if n == 5 {\n        return 89\n    }\n    return 0\n}\n", " \
    \   // TODO: implement me\n    return 0\n}\n", "    var i, j, k, count int\n \
    \   for i, j, k, count = 0, 1, 0, 0; count < n; i, j, k = j, k, i + j {\n    \
    \    if is_prime(k) {\n            count++\n        }\n    }\n    return k\n}\n",
  "    var fibs []int\n    var i int\n    for i = 0; len(fibs) < n; i++ {\n      \
    \  if is_prime(i) {\n            fibs = append(fibs, i)\n        }\n    }\n  \
    \  return fibs[n-1]\n}\n", "    if n == 1 {\n        return 2\n    }\n    if n\
    \ == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    return 0\n}\n", "    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c, i int\n    a, b = 2, 3\n\
    \    for i = 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b = c\n\
    \        for b % 2 == 0 {\n            b += a\n            c = b\n        }\n\
    \    }\n    return c\n}\n", "    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    return 0\n}\n", "    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    return 0\n}\n", "    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int = 2, 3, 5\n    for i\
    \ := 3; i <= n; i++ {\n        a, b, c = b, c, a + b\n        for c % b == 0 {\n\
    \            c += a\n        }\n    }\n    return c\n}\n", "    if n == 1 {\n\
    \        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    if n ==\
    \ 3 {\n        return 5\n    }\n    if n == 4 {\n        return 13\n    }\n  \
    \  if n == 5 {\n        return 89\n    }\n    return 0\n}\n", "    if n == 1 {\n\
    \        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    if n ==\
    \ 3 {\n        return 5\n    }\n    if n == 4 {\n        return 13\n    }\n  \
    \  if n == 5 {\n        return 89\n    }\n    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
