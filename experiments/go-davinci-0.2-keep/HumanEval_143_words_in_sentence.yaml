name: HumanEval_143_words_in_sentence
language: go_test.go
prompt: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a string representing a sentence,\n// the sentence contains\
  \ some words separated by a space,\n// and you have to return a string that contains\
  \ the words from the original sentence,\n// whose lengths are prime numbers,\n//\
  \ the order of the words in the new string should be the same as the original one.\n\
  // Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example\
  \ 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
  // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
  \ string) string {\n"
tests: "func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected: \"\
  is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"go for\"\
  \ },\n     { actual: candidate(\"there is no place available here\"), expected:\
  \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
  \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"go\
  \ for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     { actual:\
  \ candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var result string\n    for _, word := range sentence {\n      \
    \  if is_prime(len(word)) {\n            result += word\n        }\n    }\n  \
    \  return result\n}\n", "    var result string\n    var words []string\n    var\
    \ word string\n    for _, c := range sentence {\n        if c == ' ' {\n     \
    \       words = append(words, word)\n            word = \"\"\n        } else {\n\
    \            word += string(c)\n        }\n    }\n    words = append(words, word)\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    var result string\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            result += word + \"\
    \ \"\n        }\n    }\n    return strings.TrimSpace(result)\n}\n", "    var result\
    \ string\n    for _, word := range strings.Split(sentence, \" \") {\n        if\
    \ is_prime(len(word)) {\n            result += word + \" \"\n        }\n    }\n\
    \    return strings.TrimRight(result, \" \")\n}\n", "    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n", "    var result string\n    var words []string\n    var word string\n\
    \    for _, char := range sentence {\n        if char == ' ' {\n            words\
    \ = append(words, word)\n            word = \"\"\n        } else {\n         \
    \   word += string(char)\n        }\n    }\n    words = append(words, word)\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    return result[:len(result)\
    \ - 1]\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    words := make([]string, 0)\n    word := \"\"\n    for _,\
    \ c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result) - 1]\n}\n",
  "    var result string\n    for _, word := range strings.Split(sentence, \" \")\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return strings.TrimSpace(result)\n}\n", "    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n", "    var words []string\n    var result string\n    for _, word := range\
    \ sentence {\n        if word == ' ' {\n            words = append(words, result)\n\
    \            result = \"\"\n        } else {\n            result += string(word)\n\
    \        }\n    }\n    words = append(words, result)\n    result = \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result) - 1]\n}\n",
  "    words := strings.Split(sentence, \" \")\n    var result []string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    var result string\n    for _, word := range sentence {\n   \
    \     if is_prime(len(word)) {\n            result += word\n        }\n    }\n\
    \    return result\n}\n", "    words := strings.Split(sentence, \" \")\n    var\
    \ result []string\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var result string\n    for _, word := range(strings.Split(sentence,\
    \ \" \")) {\n        if is_prime(len(word)) {\n            result += word + \"\
    \ \"\n        }\n    }\n    return strings.TrimSpace(result)\n}\n", "    var result\
    \ string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var words []string\n    var word string\n    for _,\
    \ c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return result[:len(result)-1]\n}\n", "    var result string\n\
    \    for _, word := range split_words(sentence) {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    words := make([]string, 0)\n    word := \"\"\n    for _, c := range\
    \ sentence {\n        if c == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result) - 1]\n}\n",
  "    var result string\n    var words []string\n    var word string\n    for _,\
    \ c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return result[:len(result)-1]\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
