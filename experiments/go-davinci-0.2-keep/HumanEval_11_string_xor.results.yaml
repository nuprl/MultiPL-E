language: go_test.go
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var c string\n\
    \    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            c +=\
    \ \"0\"\n        } else {\n            c += \"1\"\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"Strings must be the same length\")\n    }\n   \
    \ var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"Error: Inputs must be of equal length\"\n    }\n\
    \    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"a and b must be the same length\")\n    }\n   \
    \ var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"Inputs must be of equal length\")\n    }\n    result\
    \ := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ == b[i] {\n            result[i] = '0'\n        } else {\n            result[i]\
    \ = '1'\n        }\n    }\n    return string(result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    c := \"\"\n    for i := 0; i <\
    \ len(a); i++ {\n        if a[i] == b[i] {\n            c += \"0\"\n        }\
    \ else {\n            c += \"1\"\n        }\n    }\n    return c\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"Inputs must be of equal length\")\n    }\n    var\
    \ result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            result += \"0\"\n        } else {\n            result += \"1\"\n\
    \        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"Inputs must be of equal length\"\n    }\n    result\
    \ := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n    \
    \        result += \"0\"\n        } else {\n            result += \"1\"\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n \
    \ candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\"\
    , \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"Invalid input\"\n    }\n    var result string\n\
    \    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"Inputs must be of equal length\"\n    }\n    var\
    \ result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            result += \"0\"\n        } else {\n            result += \"1\"\n\
    \        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // your\
    \ code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsgeno_i5_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsgeno_i5_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpsgeno_i5_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"Error: strings are not the same length\"\n   \
    \ }\n    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ == b[i] {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // your\
    \ code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsgeno_i5_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsgeno_i5_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpsgeno_i5_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"a and b must be the same length\")\n    }\n   \
    \ var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // your\
    \ code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsgeno_i5_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsgeno_i5_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpsgeno_i5_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"a and b must be the same length\")\n    }\n   \
    \ var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"a and b must be the same length\")\n    }\n   \
    \ result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            result += \"0\"\n        } else {\n            result += \"1\"\n\
    \        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // your\
    \ code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsgeno_i5_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsgeno_i5_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpsgeno_i5_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"Input strings must be of equal length.\")\n   \
    \ }\n    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ == b[i] {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"a and b must be of equal length\")\n    }\n   \
    \ var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // your\
    \ code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsgeno_i5_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsgeno_i5_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpsgeno_i5_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // your\
    \ code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsgeno_i5_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsgeno_i5_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpsgeno_i5_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"strings must be of equal length\")\n    }\n   \
    \ var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // your\
    \ code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsgeno_i5_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsgeno_i5_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpsgeno_i5_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // your\
    \ code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsgeno_i5_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsgeno_i5_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpsgeno_i5_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"Inputs must be of equal length\"\n    }\n    var\
    \ result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            result += \"0\"\n        } else {\n            result += \"1\"\n\
    \        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // Convert\
    \ strings to ints\n    a_int := 0\n    b_int := 0\n    for i := 0; i < len(a);\
    \ i++ {\n        a_int = a_int * 2 + int(a[i] - '0')\n    }\n    for i := 0; i\
    \ < len(b); i++ {\n        b_int = b_int * 2 + int(b[i] - '0')\n    }\n    //\
    \ XOR\n    result := a_int ^ b_int\n    // Convert result to string\n    result_str\
    \ := \"\"\n    for result > 0 {\n        result_str = fmt.Sprintf(\"%d\", result\
    \ % 2) + result_str\n        result /= 2\n    }\n    return result_str\n}\n\n\
    func TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpz5ujciyp_test.go:48: expected '010010', got '10010'\n  \
    \  --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpz5ujciyp_test.go:48:\
    \ expected '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n   \
    \     tmpz5ujciyp_test.go:48: expected '0101', got '101'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"Inputs must be of equal length\")\n    }\n    result\
    \ := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n    \
    \        result += \"0\"\n        } else {\n            result += \"1\"\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n \
    \ candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\"\
    , \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // your\
    \ code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsgeno_i5_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsgeno_i5_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpsgeno_i5_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // your\
    \ code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsgeno_i5_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsgeno_i5_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpsgeno_i5_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"a and b must be of equal length\")\n    }\n   \
    \ var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"Inputs must be of equal length\")\n    }\n    var\
    \ result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            result += \"0\"\n        } else {\n            result += \"1\"\n\
    \        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"Inputs must be of equal length\")\n    }\n    var\
    \ result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            result += \"0\"\n        } else {\n            result += \"1\"\n\
    \        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    var result string\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    // Convert\
    \ strings to arrays of bytes\n    a_bytes := []byte(a)\n    b_bytes := []byte(b)\n\
    \n    // Create a new array of bytes to store the result\n    result := make([]byte,\
    \ len(a_bytes))\n\n    // Iterate over the arrays and perform XOR on each byte\n\
    \    for i := 0; i < len(a_bytes); i++ {\n        result[i] = a_bytes[i] ^ b_bytes[i]\n\
    \    }\n\n    // Convert the result back to a string and return it\n    return\
    \ string(result)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpdw34imks_test.go:44: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpdw34imks_test.go:44:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpdw34imks_test.go:44: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        panic(\"Inputs must be of equal length\")\n    }\n    var\
    \ result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            result += \"0\"\n        } else {\n            result += \"1\"\n\
    \        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    if len(a)\
    \ != len(b) {\n        return \"Inputs must be of equal length.\"\n    }\n   \
    \ var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073179
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
    \ '110')\n// '100'\nfunc string_xor(a string, b string) string {\n    var result\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
