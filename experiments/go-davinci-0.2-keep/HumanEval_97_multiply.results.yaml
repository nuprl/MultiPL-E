language: go_test.go
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    var prod int\n    prod = (a % 10) * (b\
    \ % 10)\n    return prod\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9fszb6y3_test.go:42: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // your code here\n    return a * b\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpj0vnvufp_test.go:41: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpj0vnvufp_test.go:41:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpj0vnvufp_test.go:41: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpj0vnvufp_test.go:41:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpj0vnvufp_test.go:41: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpj0vnvufp_test.go:41:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 0
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    var result int\n    if a < 0 {\n      \
    \  a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    result = (a % 10)\
    \ * (b % 10)\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // your code here\n    return (a % 10)\
    \ * (b % 10)\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp5rvjbb5y_test.go:41: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp57zcl679_test.go:41:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp57zcl679_test.go:41: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // your code here\n    return a * b\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpj0vnvufp_test.go:41: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpj0vnvufp_test.go:41:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpj0vnvufp_test.go:41: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpj0vnvufp_test.go:41:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpj0vnvufp_test.go:41: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpj0vnvufp_test.go:41:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    // your code here\n    return (a%10)*(b%10)\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpemeeylr1_test.go:41: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10) * (b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp66la12b3_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a%10)*(b%10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwu8wg4i4_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074484
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    // multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n\
    // multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\n\
    func multiply(a int, b int) int {\n    return (a % 10) * (b % 10)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpb9e6wzr1_test.go:40: expected '%!s(int=20)', got '%!s(int=-20)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074485
