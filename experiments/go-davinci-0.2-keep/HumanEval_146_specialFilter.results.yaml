language: go_test.go
name: HumanEval_146_specialFilter
results:
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var cnt int\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstDigitOdd(num) && isLastDigitOdd(num)\
    \ {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdpy1qvmm_test.go:17:24: undefined: isFirstDigitOdd

    /tmp/tmpdpy1qvmm_test.go:17:48: undefined: isLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, n := range nums {\n        if n > 10 && isFirstAndLastDigitOdd(n) {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyc_oc8q5_test.go:17:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isOdd(num) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezwicvei_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isOdd(num) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezwicvei_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, n := range nums {\n        if n > 10 && isFirstAndLastDigitOdd(n) {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyc_oc8q5_test.go:17:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && num / 10 % 2\
    \ == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp4_cjrkna_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4_cjrkna_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, n := range nums {\n        if n > 10 && isFirstAndLastDigitOdd(n) {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyc_oc8q5_test.go:17:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isOdd(num) && isOdd(num\
    \ % 10) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7k45up_0_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num%2 != 0 && num/10%2 !=\
    \ 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp1mqwn7xw_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp1mqwn7xw_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, n := range nums {\n        if n > 10 && isFirstAndLastDigitOdd(n) {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyc_oc8q5_test.go:17:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    return 0\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp1whoroql_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp1whoroql_test.go:37:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp1whoroql_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp1whoroql_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && (num / 10)\
    \ % 2 != 0 && num % 10 != 0 {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmplura1xzz_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmplura1xzz_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, n := range nums {\n        if n > 10 && isFirstAndLastDigitOdd(n) {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyc_oc8q5_test.go:17:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isOdd(num) && isOdd(num\
    \ / 10) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5tlni1mp_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, n := range nums {\n        if n > 10 && isFirstAndLastDigitOdd(n) {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyc_oc8q5_test.go:17:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && (num / 10) %\
    \ 2 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpifi2o5xz_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpifi2o5xz_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isOdd(num) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezwicvei_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && (num / 10) %\
    \ 2 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpifi2o5xz_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpifi2o5xz_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && (num / 10) %\
    \ 2 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpifi2o5xz_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpifi2o5xz_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstDigitOdd(num) && isLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hsmu9jy_test.go:17:24: undefined: isFirstDigitOdd

    /tmp/tmp8hsmu9jy_test.go:17:48: undefined: isLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && (num / 10)\
    \ % 2 != 0 && num % 10 != 0 {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmplura1xzz_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmplura1xzz_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && num / 10 % 2\
    \ == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp4_cjrkna_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4_cjrkna_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstDigitOdd(num) && isLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hsmu9jy_test.go:17:24: undefined: isFirstDigitOdd

    /tmp/tmp8hsmu9jy_test.go:17:48: undefined: isLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isOdd(num) && isOdd(num\
    \ / 10) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5tlni1mp_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && (num % 10) % 2 != 0 && (num /\
    \ 10) % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpg4h_63sk_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpg4h_63sk_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isOdd(num) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezwicvei_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, v := range nums {\n        if v > 10 && isOdd(v) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3vfrm03l_test.go:17:22: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastOdd(num) {\n  \
    \          count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5w9vt9sv_test.go:17:24: undefined: isFirstAndLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isOdd(num) && isOdd(num/10)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvslkc21v_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num/10%2 != 0 && num%10%2\
    \ != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpb08iboe7_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpb08iboe7_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && num / 10 % 2\
    \ == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp4_cjrkna_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4_cjrkna_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && num / 10 % 2\
    \ == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp4_cjrkna_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4_cjrkna_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    return 0\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp1whoroql_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp1whoroql_test.go:37:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp1whoroql_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp1whoroql_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstDigitOdd(num) && isLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hsmu9jy_test.go:17:24: undefined: isFirstDigitOdd

    /tmp/tmp8hsmu9jy_test.go:17:48: undefined: isLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstDigitOdd(num) && isLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hsmu9jy_test.go:17:24: undefined: isFirstDigitOdd

    /tmp/tmp8hsmu9jy_test.go:17:48: undefined: isLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && num / 10 % 2\
    \ == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp4_cjrkna_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4_cjrkna_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isOdd(num) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezwicvei_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, n := range nums {\n        if n > 10 && isFirstAndLastDigitOdd(n) {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyc_oc8q5_test.go:17:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && num / 10 % 2\
    \ == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp4_cjrkna_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4_cjrkna_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, v := range nums {\n        if v > 10 && isFirstAndLastDigitOdd(v) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpunsm5az0_test.go:17:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isOdd(num) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezwicvei_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, v := range nums {\n        if v > 10 && v % 2 != 0 && v % 10 % 2 !=\
    \ 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpfj8moebn_test.go:43: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpfj8moebn_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpfj8moebn_test.go:43: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && (num / 10) %\
    \ 2 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpifi2o5xz_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpifi2o5xz_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isOdd(num) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezwicvei_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isOdd(num) && isOdd(num\
    \ / 10) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5tlni1mp_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, n := range nums {\n        if n > 10 && isFirstAndLastDigitOdd(n) {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyc_oc8q5_test.go:17:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && num / 10 % 2\
    \ == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp4_cjrkna_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4_cjrkna_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && num / 10 % 2\
    \ == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp4_cjrkna_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4_cjrkna_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && (num / 10) %\
    \ 2 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpifi2o5xz_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpifi2o5xz_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && num / 10 % 2\
    \ == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp4_cjrkna_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4_cjrkna_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstDigitOdd(num) && isLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hsmu9jy_test.go:17:24: undefined: isFirstDigitOdd

    /tmp/tmp8hsmu9jy_test.go:17:48: undefined: isLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && (num / 10) % 2 == 1 && num %\
    \ 2 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpts88lrw3_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpts88lrw3_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmptkhx5lf8_test.go:43: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmptkhx5lf8_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmptkhx5lf8_test.go:43: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074747
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, v := range nums {\n        if v > 10 && (v / 10) % 2 != 0 && v % 2 !=\
    \ 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmphidi6py7_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphidi6py7_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isOdd(num) && isOdd(num\
    \ / 10) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5tlni1mp_test.go:17:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && (num / 10) %\
    \ 2 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpifi2o5xz_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpifi2o5xz_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7d33i7su_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 && (num / 10) %\
    \ 2 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpifi2o5xz_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpifi2o5xz_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstLastOdd(num) {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tl682r6_test.go:17:24: undefined: isFirstLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    var count int\n  \
    \  for _, num := range nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu_9_jrpc_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu_9_jrpc_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, v := range nums {\n        if v > 10 && isFirstAndLastDigitOdd(v) {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr53g222v_test.go:17:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpcvgwudgl_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpcvgwudgl_test.go:38:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074746
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums []int) int {\n    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfo6grvzs_test.go:17:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074746
