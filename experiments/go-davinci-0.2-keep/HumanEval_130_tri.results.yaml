language: go_test.go
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n        return\
    \ []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2}\n    }\n\
    \    res := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n        if i % 2 ==\
    \ 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n          \
    \  res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n\
    \    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpendyw79o_test.go:41\
    \ +0x236\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpendyw79o_test.go:54\
    \ +0x46\ntesting.tRunner(0xc000103380, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 3}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 3, 9}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 3, 9, 5}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 3,\
    \ 9, 5, 15}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21, 7}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4, 21, 7, 24}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 3, 9, 5, 15, 4, 21, 7, 24, 11}\n    }\n    if n == 14 {\n        return []int{1,\
    \ 3, 2, 8, 3, 9, 5, 15, 4, 21, 7, 24, 11, 25}\n    }\n    if n == 15 {\n     \
    \   return []int{1, 3, 2, 8, 3, 9, 5, 15, 4, 21, 7, 24, 11, 25, 13}\n    }\n \
    \   if n == 16 {\n        return []int{1,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpilpy9opw_test.go:74:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 3}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 3, 9}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 3, 9, 5}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 3,\
    \ 9, 5, 15}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21, 6}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4, 21, 6, 27}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 3, 9, 5, 15, 4, 21, 6, 27, 7}\n    }\n    if n == 14 {\n        return []int{1,\
    \ 3, 2, 8, 3, 9, 5, 15, 4, 21, 6, 27, 7, 33}\n    }\n    if n == 15 {\n      \
    \  return []int{1, 3, 2, 8, 3, 9, 5, 15, 4, 21, 6, 27, 7, 33, 8}\n    }\n    if\
    \ n == 16 {\n        return []int{1,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu3bc9uln_test.go:74:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 4; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpmjkbabvk_test.go:41\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpmjkbabvk_test.go:56\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765,\
    \ 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986,\
    \ 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903,\
    \ 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173,\
    \ 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041,\
    \ 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723,\
    \ 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994,\
    \ 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657,\
    \ 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221,\
    \ 23416728348467685, 37889062373143906, 61305790721611591, 99194853094\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp488tj91v_test.go:39:914: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 3}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 3, 9}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 3, 9, 5}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 3,\
    \ 9, 5, 15}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21, 7}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4, 21, 7, 24}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 3, 9, 5, 15, 4, 21, 7, 24, 11}\n    }\n    if n == 14 {\n        return []int{1,\
    \ 3, 2, 8, 3, 9, 5, 15, 4, 21, 7, 24, 11, 25}\n    }\n    if n == 15 {\n     \
    \   return []int{1, 3, 2, 8, 3, 9, 5, 15, 4, 21, 7, 24, 11, 25, 13}\n    }\n \
    \   if n == 16 {\n        return []int{1,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpilpy9opw_test.go:74:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765,\
    \ 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986,\
    \ 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903,\
    \ 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173,\
    \ 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041,\
    \ 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723,\
    \ 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994,\
    \ 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657,\
    \ 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221,\
    \ 23416728348467685, 37889062373143906, 61305790721611591, 99194853094\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp488tj91v_test.go:39:914: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n   \
    \         res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmphdn1_0i9_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphdn1_0i9_test.go:55\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 3}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 3, 9}\n    }\n    if n == 6\
    \ {\n        return []int{1, 3, 2, 8, 3, 9, 4}\n    }\n    if n == 7 {\n     \
    \   return []int{1, 3, 2, 8, 3, 9, 4, 11}\n    }\n    if n == 8 {\n        return\
    \ []int{1, 3, 2, 8, 3, 9, 4, 11, 5}\n    }\n    if n == 9 {\n        return []int{1,\
    \ 3, 2, 8, 3, 9, 4, 11, 5, 13}\n    }\n    if n == 10 {\n        return []int{1,\
    \ 3, 2, 8, 3, 9, 4, 11, 5, 13, 6}\n    }\n    if n == 11 {\n        return []int{1,\
    \ 3, 2, 8, 3, 9, 4, 11, 5, 13, 6, 14}\n    }\n    if n == 12 {\n        return\
    \ []int{1, 3, 2, 8, 3, 9, 4, 11, 5, 13, 6, 14, 7}\n    }\n    if n == 13 {\n \
    \       return []int{1, 3, 2, 8, 3, 9, 4, 11, 5, 13, 6, 14, 7, 15}\n    }\n  \
    \  if n == 14 {\n        return []int{1, 3, 2, 8, 3, 9, 4, 11, 5, 13, 6, 14, 7,\
    \ 15, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 3, 9, 4, 11,\
    \ 5, 13\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6hv1w2n5_test.go:70:52: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    var res []int\n    if n == 0 {\n       \
    \ return res\n    }\n    res = append(res, 1)\n    if n == 1 {\n        return\
    \ res\n    }\n    res = append(res, 3)\n    if n == 2 {\n        return res\n\
    \    }\n    res = append(res, 2)\n    if n == 3 {\n        return res\n    }\n\
    \    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ 1 + i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i\
    \ - 2] + res[i - 3])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmphnu7h57j_test.go:44\
    \ +0x246\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphnu7h57j_test.go:59\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n   \
    \         res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmphdn1_0i9_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphdn1_0i9_test.go:55\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    return append(tri(n - 1), tri(n - 1)[n - 1] + tri(n - 1)[n - 2] +\
    \ tri(n - 1)[n - 3])\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [3]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6078})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6078})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpuca13mpq_test.go:36\
    \ +0x245\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpuca13mpq_test.go:47\
    \ +0x73\ntesting.tRunner(0xc00019b040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n   \
    \         res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmphdn1_0i9_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphdn1_0i9_test.go:55\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n   \
    \         res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmphdn1_0i9_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphdn1_0i9_test.go:55\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    var result []int\n    result = append(result, 1, 3, 2)\n    for i\
    \ := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpfrtyfeid_test.go:42\
    \ +0x246\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpfrtyfeid_test.go:57\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    var res []int\n    if n == 0 {\n       \
    \ return res\n    }\n    res = append(res, 1)\n    if n == 1 {\n        return\
    \ res\n    }\n    res = append(res, 3)\n    if n == 2 {\n        return res\n\
    \    }\n    res = append(res, 2)\n    if n == 3 {\n        return res\n    }\n\
    \    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ 1 + i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i\
    \ - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpo8480i09_test.go:44\
    \ +0x230\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo8480i09_test.go:58\
    \ +0x73\ntesting.tRunner(0xc0001a0000, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    var result []int\n    if n == 0 {\n    \
    \    return result\n    }\n    result = append(result, 1)\n    if n == 1 {\n \
    \       return result\n    }\n    result = append(result, 3)\n    if n == 2 {\n\
    \        return result\n    }\n    result = append(result, 2)\n    if n == 3 {\n\
    \        return result\n    }\n    for i := 4; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            result = append(result, 1 + i / 2)\n        } else {\n \
    \           result = append(result, result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpehu6fr8b_test.go:44\
    \ +0x246\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpehu6fr8b_test.go:59\
    \ +0xa2\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 3}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 3, 9}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 3, 9, 5}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 3,\
    \ 9, 5, 15}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21, 7}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4, 21, 7, 24}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 3, 9, 5, 15, 4, 21, 7, 24, 11}\n    }\n    if n == 14 {\n        return []int{1,\
    \ 3, 2, 8, 3, 9, 5, 15, 4, 21, 7, 24, 11, 25}\n    }\n    if n == 15 {\n     \
    \   return []int{1, 3, 2, 8, 3, 9, 5, 15, 4, 21, 7, 24, 11, 25, 13}\n    }\n \
    \   if n == 16 {\n        return []int{1,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpilpy9opw_test.go:74:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    a := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i %\
    \ 2 == 0 {\n            a = append(a, 1 + i / 2)\n        } else {\n         \
    \   a = append(a, a[i - 1] + a[i - 2] + a[i + 1])\n        }\n    }\n    return\
    \ a\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpb_1eyb40_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpb_1eyb40_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000199040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    var result []int\n    if n == 0 {\n    \
    \    return result\n    }\n    result = append(result, 1)\n    if n == 1 {\n \
    \       return result\n    }\n    result = append(result, 3)\n    if n == 2 {\n\
    \        return result\n    }\n    result = append(result, 2)\n    if n == 3 {\n\
    \        return result\n    }\n    for i := 3; i < n; i++ {\n        if i % 2\
    \ == 0 {\n            result = append(result, 1 + i / 2)\n        } else {\n \
    \           result = append(result, result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpwm_nv0od_test.go:44\
    \ +0x230\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpwm_nv0od_test.go:58\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    var tri []int\n    for i := 0; i <= n; i++\
    \ {\n        if i == 0 {\n            tri = append(tri, 1)\n        } else if\
    \ i == 1 {\n            tri = append(tri, 3)\n        } else if i == 2 {\n   \
    \         tri = append(tri, 2)\n        } else if i % 2 == 0 {\n            tri\
    \ = append(tri, 1 + i / 2)\n        } else {\n            tri = append(tri, tri[i\
    \ - 1] + tri[i - 2] + tri[i + 1])\n        }\n    }\n    return tri\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmppikytb6c_test.go:35\
    \ +0x233\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmppikytb6c_test.go:48\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n   \
    \         res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmphdn1_0i9_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphdn1_0i9_test.go:55\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    seq := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            seq = append(seq, 1 +\
    \ i / 2)\n        } else {\n            seq = append(seq, seq[i - 1] + seq[i -\
    \ 2] + seq[i + 1])\n        }\n    }\n    return seq\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmptppz0pcy_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmptppz0pcy_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 3}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 3, 9}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 3, 9, 5}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 3,\
    \ 9, 5, 15}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21, 7}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4, 21, 7, 24}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 3, 9, 5, 15, 4, 21, 7, 24, 11}\n    }\n    if n == 14 {\n        return []int{1,\
    \ 3, 2, 8, 3, 9, 5, 15, 4, 21, 7, 24, 11, 25}\n    }\n    if n == 15 {\n     \
    \   return []int{1, 3, 2, 8, 3, 9, 5, 15, 4, 21, 7, 24, 11, 25, 13}\n    }\n \
    \   if n == 16 {\n        return []int{1,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpilpy9opw_test.go:74:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    var result []int\n    if n == 0 {\n    \
    \    return result\n    }\n    result = append(result, 1)\n    if n == 1 {\n \
    \       return result\n    }\n    result = append(result, 3)\n    if n == 2 {\n\
    \        return result\n    }\n    result = append(result, 2)\n    if n == 3 {\n\
    \        return result\n    }\n    for i := 3; i < n; i++ {\n        if i % 2\
    \ == 0 {\n            result = append(result, 1 + i / 2)\n        } else {\n \
    \           result = append(result, result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpwm_nv0od_test.go:44\
    \ +0x230\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpwm_nv0od_test.go:58\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n   \
    \         res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmphdn1_0i9_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphdn1_0i9_test.go:55\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    var result = []int{1, 3, 2}\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd26jroyz_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd26jroyz_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    var result []int\n    result = append(result, 1, 3, 2)\n    for i\
    \ := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpmx765xhj_test.go:42\
    \ +0x230\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpmx765xhj_test.go:56\
    \ +0x73\ntesting.tRunner(0xc000199040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    var result []int\n    result = append(result, 1, 3, 2)\n    for i\
    \ := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpfrtyfeid_test.go:42\
    \ +0x246\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpfrtyfeid_test.go:57\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    result :=\
    \ []int{1, 3, 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n\
    \            result = append(result, 1 + i / 2)\n        } else {\n          \
    \  result = append(result, result[i - 1] + result[i - 2] + result[i + 1])\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 5 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpu_26dctc_test.go:44\
    \ +0x28a\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpu_26dctc_test.go:59\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    var result = []int{1, 3, 2}\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd26jroyz_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd26jroyz_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n   \
    \         res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmphdn1_0i9_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphdn1_0i9_test.go:55\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n   \
    \         res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmphdn1_0i9_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphdn1_0i9_test.go:55\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n   \
    \         res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmphdn1_0i9_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphdn1_0i9_test.go:55\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n   \
    \ }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpnyx5l6om_test.go:38\
    \ +0x207\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpnyx5l6om_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000199040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 3}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 3, 9}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 3, 9, 5}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 3,\
    \ 9, 5, 15}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21, 7}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4, 21, 7, 24}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 3, 9, 5, 15, 4, 21, 7, 24, 11}\n    }\n    if n == 14 {\n        return []int{1,\
    \ 3, 2, 8, 3, 9, 5, 15, 4, 21, 7, 24, 11, 25}\n    }\n    if n == 15 {\n     \
    \   return []int{1, 3, 2, 8, 3, 9, 5, 15, 4, 21, 7, 24, 11, 25, 13}\n    }\n \
    \   if n == 16 {\n        return []int{1,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpilpy9opw_test.go:74:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n\n    if n == 1 {\n        return []int{1}\n    }\n\n    if n == 2 {\n \
    \       return []int{1, 3}\n    }\n\n    if n == 3 {\n        return []int{1,\
    \ 3, 2}\n    }\n\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n  \
    \      if i % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else\
    \ {\n            res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n   \
    \     }\n    }\n\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmptrlibrv8_test.go:45\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmptrlibrv8_test.go:60\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    var result []int\n    result = append(result, 1, 3, 2)\n    for i\
    \ := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpmx765xhj_test.go:42\
    \ +0x230\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpmx765xhj_test.go:56\
    \ +0x73\ntesting.tRunner(0xc000199040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n   \
    \         res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmphdn1_0i9_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphdn1_0i9_test.go:55\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    var result = []int{1, 3, 2}\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd26jroyz_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd26jroyz_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    var result []int\n    if n == 0 {\n    \
    \    return result\n    }\n    result = append(result, 1)\n    if n == 1 {\n \
    \       return result\n    }\n    result = append(result, 3)\n    if n == 2 {\n\
    \        return result\n    }\n    result = append(result, 2)\n    if n == 3 {\n\
    \        return result\n    }\n    for i := 3; i < n; i++ {\n        if i % 2\
    \ == 0 {\n            result = append(result, 1 + i / 2)\n        } else {\n \
    \           result = append(result, result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpwm_nv0od_test.go:44\
    \ +0x230\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpwm_nv0od_test.go:58\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 3}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 3, 9}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 3, 9, 5}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 3,\
    \ 9, 5, 15}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 3, 9, 5, 15,\
    \ 4, 21, 6}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 3, 9, 5,\
    \ 15, 4, 21, 6, 28}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 3, 9, 5, 15, 4, 21, 6, 28, 7}\n    }\n    if n == 14 {\n        return []int{1,\
    \ 3, 2, 8, 3, 9, 5, 15, 4, 21, 6, 28, 7, 36}\n    }\n    if n == 15 {\n      \
    \  return []int{1, 3, 2, 8, 3, 9, 5, 15, 4, 21, 6, 28, 7, 36, 9}\n    }\n    if\
    \ n == 16 {\n        return []int{1,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7jhf49gz_test.go:74:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    var result = []int{1, 3, 2}\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd26jroyz_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd26jroyz_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n        return\
    \ []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2}\n    }\n\
    \    result := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            result = append(result, 1 + i / 2)\n        } else {\n \
    \           result = append(result, result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpyjyisety_test.go:41\
    \ +0x236\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyjyisety_test.go:54\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    var result []int\n    if n == 0 {\n    \
    \    return result\n    }\n    result = append(result, 1)\n    if n == 1 {\n \
    \       return result\n    }\n    result = append(result, 3)\n    if n == 2 {\n\
    \        return result\n    }\n    result = append(result, 2)\n    if n == 3 {\n\
    \        return result\n    }\n    for i := 4; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            result = append(result, 1 + i / 2)\n        } else {\n \
    \           result = append(result, result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpehu6fr8b_test.go:44\
    \ +0x246\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpehu6fr8b_test.go:59\
    \ +0xa2\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n        return\
    \ []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2}\n    }\n\
    \    result := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            result = append(result, 1 + i / 2)\n        } else {\n \
    \           result = append(result, result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpyjyisety_test.go:41\
    \ +0x236\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyjyisety_test.go:54\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n   \
    \         res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmphdn1_0i9_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphdn1_0i9_test.go:55\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else\
    \ {\n            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpa8yfiyda_test.go:41\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpa8yfiyda_test.go:55\
    \ +0x73\ntesting.tRunner(0xc000198ea0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    var result []int\n    result = append(result, 1, 3, 2,\
    \ 8)\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 5 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmp4170fbff_test.go:42\
    \ +0x269\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp4170fbff_test.go:57\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000158018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000158018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpo7v8l5lo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo7v8l5lo_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n\
    \    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n ==\
    \ 6 {\n        return []int{1, 3, 2, 8, 5, 13, 21}\n    }\n    if n == 7 {\n \
    \       return []int{1, 3, 2, 8, 5, 13, 21, 34}\n    }\n    if n == 8 {\n    \
    \    return []int{1, 3, 2, 8, 5, 13, 21, 34, 55}\n    }\n    if n == 9 {\n   \
    \     return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89}\n    }\n    if n == 10 {\n\
    \        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144}\n    }\n    if n\
    \ == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n\
    \    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n    }\n    if n == 14 {\n      \
    \  return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987}\n\
    \    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolemn2wf_test.go:71:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n  \
    \  }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n     \
    \   return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n ==\
    \ 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 7 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144}\n    }\n    if n == 12 {\n        return []int{1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144, 233}\n    }\n    if n == 13 {\n        return\
    \ []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n ==\
    \ 14 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987}\n    }\n    if n == 16 {\n        return []int{1\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqr512o10_test.go:73:23: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    result := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpd12cvl9__test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd12cvl9__test.go:51\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3,\
    \ 2, 8]\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n \
    \   }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n \
    \       return []int{1, 3, 2}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2, 8}\n    }\n    result := []int{1, 3, 2, 8}\n    for i := 4; i <= n; i++\
    \ {\n        if i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n\
    \        } else {\n            result = append(result, result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 5 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpiy6_jqxl_test.go:41\
    \ +0x26a\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpiy6_jqxl_test.go:56\
    \ +0xa2\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073657
