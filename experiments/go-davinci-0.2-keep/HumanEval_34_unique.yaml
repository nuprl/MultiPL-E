name: HumanEval_34_unique
language: go_test.go
prompt: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
  // [0, 2, 3, 5, 9, 123]\nfunc unique(l []int) []int {\n"
tests: "func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
  \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var u []int\n    for _, v := range l {\n        if !contains(u,\
    \ v) {\n            u = append(u, v)\n        }\n    }\n    return u\n}\n", " \
    \   var result []int\n    for _, v := range l {\n        if !contains(result,\
    \ v) {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] =\
    \ true\n    }\n    var r []int\n    for k := range m {\n        r = append(r,\
    \ k)\n    }\n    return r\n}\n", "    var u []int\n    for _, v := range l {\n\
    \        if !contains(u, v) {\n            u = append(u, v)\n        }\n    }\n\
    \    return u\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n\
    \        m[v] = true\n    }\n    var r []int\n    for k := range m {\n       \
    \ r = append(r, k)\n    }\n    return r\n}\n", "    var uniq []int\n    for _,\
    \ v := range l {\n        if !contains(uniq, v) {\n            uniq = append(uniq,\
    \ v)\n        }\n    }\n    return uniq\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    uniq := make([]int,\
    \ len(m))\n    i := 0\n    for k := range m {\n        uniq[i] = k\n        i++\n\
    \    }\n    return uniq\n}\n", "    var u []int\n    for _, v := range l {\n \
    \       if !contains(u, v) {\n            u = append(u, v)\n        }\n    }\n\
    \    return u\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n\
    \        m[v] = true\n    }\n    var r []int\n    for k := range m {\n       \
    \ r = append(r, k)\n    }\n    return r\n}\n", "    var u []int\n    for _, v\
    \ := range l {\n        if len(u) == 0 {\n            u = append(u, v)\n     \
    \   } else {\n            for i, w := range u {\n                if v == w {\n\
    \                    break\n                }\n                if i == len(u)\
    \ - 1 {\n                    u = append(u, v)\n                }\n           \
    \ }\n        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for k :=\
    \ range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n", "    var res []int\n    for _, v := range l {\n        if !contains(res,\
    \ v) {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
  "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n \
    \   }\n    var r []int\n    for k := range m {\n        r = append(r, k)\n   \
    \ }\n    return r\n}\n", "    var u []int\n    for _, i := range l {\n       \
    \ if !contains(u, i) {\n            u = append(u, i)\n        }\n    }\n    return\
    \ u\n}\n", "    if len(l) == 0 {\n        return l\n    }\n    var result []int\n\
    \    result = append(result, l[0])\n    for _, e := range l {\n        if e !=\
    \ result[len(result)-1] {\n            result = append(result, e)\n        }\n\
    \    }\n    return result\n}\n", "    m := make(map[int]bool)\n    for _, v :=\
    \ range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n    i :=\
    \ 0\n    for k := range m {\n        u[i] = k\n        i++\n    }\n    return\
    \ u\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v]\
    \ = true\n    }\n    r := make([]int, len(m))\n    i := 0\n    for k := range\
    \ m {\n        r[i] = k\n        i++\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var\
    \ u []int\n    for _, v := range l {\n        if !contains(u, v) {\n         \
    \   u = append(u, v)\n        }\n    }\n    return u\n}\n", "    var result []int\n\
    \    for _, v := range l {\n        if !contains(result, v) {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\
    \    var r []int\n    for k := range m {\n        r = append(r, k)\n    }\n  \
    \  return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    var r []int\n    for k := range m {\n        r\
    \ = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n  \
    \  for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    var r []int\n    for k := range m {\n        r\
    \ = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n  \
    \  for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\
    \    var r []int\n    for k := range m {\n        r = append(r, k)\n    }\n  \
    \  return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    var r []int\n    for k := range m {\n        r\
    \ = append(r, k)\n    }\n    return r\n}\n", "    var result []int\n    for _,\
    \ v := range l {\n        if !contains(result, v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var\
    \ u []int\n    for _, i := range l {\n        if !contains(u, i) {\n         \
    \   u = append(u, i)\n        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var result []int\n\
    \    for k := range m {\n        result = append(result, k)\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v := range l {\n        if !contains(result,\
    \ v) {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] =\
    \ true\n    }\n    r := make([]int, len(m))\n    i := 0\n    for k := range m\
    \ {\n        r[i] = k\n        i++\n    }\n    return r\n}\n", "    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n \
    \   }\n    var r []int\n    for k := range m {\n        r = append(r, k)\n   \
    \ }\n    return r\n}\n", "    var result []int\n    for _, v := range l {\n  \
    \      if !contains(result, v) {\n            result = append(result, v)\n   \
    \     }\n    }\n    return result\n}\n", "    var res []int\n    for _, v := range\
    \ l {\n        if !contains(res, v) {\n            res = append(res, v)\n    \
    \    }\n    }\n    return res\n}\n", "    m := make(map[int]bool)\n    for _,\
    \ v := range l {\n        m[v] = true\n    }\n    var r []int\n    for k := range\
    \ m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l {\n        m[v] = true\n    }\n    var r []int\n    for k := range m {\n \
    \       r = append(r, k)\n    }\n    return r\n}\n", "    var u []int\n    for\
    \ _, v := range l {\n        if !contains(u, v) {\n            u = append(u, v)\n\
    \        }\n    }\n    return u\n}\n", "    var uniq []int\n    for _, i := range\
    \ l {\n        if !contains(uniq, i) {\n            uniq = append(uniq, i)\n \
    \       }\n    }\n    return uniq\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for k :=\
    \ range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var\
    \ u []int\n    for _, v := range l {\n        if !contains(u, v) {\n         \
    \   u = append(u, v)\n        }\n    }\n    return u\n}\n", "    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n", "    var res []int\n    for _, v :=\
    \ range l {\n        if !contains(res, v) {\n            res = append(res, v)\n\
    \        }\n    }\n    return res\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for k :=\
    \ range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var res\
    \ []int\n    for _, v := range l {\n        if !contains(res, v) {\n         \
    \   res = append(res, v)\n        }\n    }\n    return res\n}\n", "    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n", "    var u []int\n    for _, v :=\
    \ range l {\n        if !contains(u, v) {\n            u = append(u, v)\n    \
    \    }\n    }\n    return u\n}\n", "    var m = make(map[int]bool)\n    var u\
    \ []int\n    for _, v := range l {\n        if !m[v] {\n            m[v] = true\n\
    \            u = append(u, v)\n        }\n    }\n    return u\n}\n", "    var\
    \ u []int\n    for _, v := range l {\n        if !contains(u, v) {\n         \
    \   u = append(u, v)\n        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    var r []int\n    for k := range m {\n        r\
    \ = append(r, k)\n    }\n    return r\n}\n", "    var u []int\n    for _, i :=\
    \ range l {\n        if !contains(u, i) {\n            u = append(u, i)\n    \
    \    }\n    }\n    return u\n}\n", "    var u []int\n    for _, v := range l {\n\
    \        if !contains(u, v) {\n            u = append(u, v)\n        }\n    }\n\
    \    return u\n}\n", "    var u []int\n    for _, v := range l {\n        if !contains(u,\
    \ v) {\n            u = append(u, v)\n        }\n    }\n    return u\n}\n", " \
    \   m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    r := make([]int, len(m))\n    i := 0\n    for k := range m {\n   \
    \     r[i] = k\n        i++\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        u[i] = k\n        i++\n    }\n  \
    \  return u\n}\n", "    var u []int\n    for _, v := range l {\n        if !contains(u,\
    \ v) {\n            u = append(u, v)\n        }\n    }\n    return u\n}\n", " \
    \   m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    r := make([]int, len(m))\n    i := 0\n    for k := range m {\n   \
    \     r[i] = k\n        i++\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    //\
    \ TODO: implement\n    return []int{}\n}\n", "    m := make(map[int]bool)\n  \
    \  for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    r := make([]int, len(m))\n    i := 0\n    for\
    \ k := range m {\n        r[i] = k\n        i++\n    }\n    return r\n}\n", " \
    \   m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    var res []int\n    for k := range m {\n        res = append(res, k)\n\
    \    }\n    return res\n}\n", "    var u []int\n    for _, v := range l {\n  \
    \      if !contains(u, v) {\n            u = append(u, v)\n        }\n    }\n\
    \    return u\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n\
    \        m[v] = true\n    }\n    r := make([]int, len(m))\n    i := 0\n    for\
    \ k := range m {\n        r[i] = k\n        i++\n    }\n    return r\n}\n", " \
    \   var u []int\n    for _, v := range l {\n        if !contains(u, v) {\n   \
    \         u = append(u, v)\n        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        u[i] = k\n        i++\n    }\n  \
    \  return u\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    var result []int\n    for k := range m {\n   \
    \     result = append(result, k)\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\
    \    var r []int\n    for k := range m {\n        r = append(r, k)\n    }\n  \
    \  return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    r := make([]int, len(m))\n    i := 0\n    for\
    \ k := range m {\n        r[i] = k\n        i++\n    }\n    return r\n}\n", " \
    \   m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    var r []int\n    for k := range m {\n        r = append(r, k)\n  \
    \  }\n    return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l {\n        m[v] = true\n    }\n    var r []int\n    for k := range m {\n \
    \       r = append(r, k)\n    }\n    return r\n}\n", "    if len(l) == 0 {\n \
    \       return l\n    }\n    u := []int{l[0]}\n    for _, v := range l[1:] {\n\
    \        if v != u[len(u)-1] {\n            u = append(u, v)\n        }\n    }\n\
    \    return u\n}\n", "    var u []int\n    for _, i := range l {\n        if !contains(u,\
    \ i) {\n            u = append(u, i)\n        }\n    }\n    return u\n}\n", " \
    \   var u []int\n    for _, v := range l {\n        if !contains(u, v) {\n   \
    \         u = append(u, v)\n        }\n    }\n    return u\n}\n", "    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n", "    var u []int\n    for _, v :=\
    \ range l {\n        if !contains(u, v) {\n            u = append(u, v)\n    \
    \    }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n    for _, v\
    \ := range l {\n        m[v] = true\n    }\n    var r []int\n    for k := range\
    \ m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var\
    \ u []int\n    for _, i := range l {\n        if !contains(u, i) {\n         \
    \   u = append(u, i)\n        }\n    }\n    return u\n}\n", "    var u []int\n\
    \    for _, i := range l {\n        if !contains(u, i) {\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n   \
    \ for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\
    \    var result []int\n    for k := range m {\n        result = append(result,\
    \ k)\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n    for _,\
    \ v := range l {\n        m[v] = true\n    }\n    var r []int\n    for k := range\
    \ m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var result []int\n\
    \    for _, v := range l {\n        if !contains(result, v) {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n \
    \   }\n    var r []int\n    for k := range m {\n        r = append(r, k)\n   \
    \ }\n    return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l\
    \ {\n        m[v] = true\n    }\n    var r []int\n    for k := range m {\n   \
    \     r = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var u []int\n    for\
    \ k := range m {\n        u = append(u, k)\n    }\n    return u\n}\n", "    //\
    \ TODO: implement\n    return []int{}\n}\n", "    var u []int\n    for _, v :=\
    \ range l {\n        if !contains(u, v) {\n            u = append(u, v)\n    \
    \    }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n    for _, v\
    \ := range l {\n        m[v] = true\n    }\n    var r []int\n    for k := range\
    \ m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var unique []int\n\
    \    for _, v := range l {\n        if !contains(unique, v) {\n            unique\
    \ = append(unique, v)\n        }\n    }\n    return unique\n}\n", "    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n", "    var u []int\n    for _, i :=\
    \ range l {\n        if !contains(u, i) {\n            u = append(u, i)\n    \
    \    }\n    }\n    return u\n}\n", "    var result []int\n    for _, v := range\
    \ l {\n        if !contains(result, v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var u []int\n    for _,\
    \ i := range l {\n        if !contains(u, i) {\n            u = append(u, i)\n\
    \        }\n    }\n    return u\n}\n", "    var u []int\n    for _, i := range\
    \ l {\n        if !contains(u, i) {\n            u = append(u, i)\n        }\n\
    \    }\n    return u\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l {\n        m[v] = true\n    }\n    var r []int\n    for k := range m {\n \
    \       r = append(r, k)\n    }\n    return r\n}\n", "    var u []int\n    for\
    \ _, v := range l {\n        if !contains(u, v) {\n            u = append(u, v)\n\
    \        }\n    }\n    return u\n}\n", "    var result []int\n    for _, v :=\
    \ range l {\n        if !contains(result, v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var u []int\n    for _,\
    \ v := range l {\n        if !contains(u, v) {\n            u = append(u, v)\n\
    \        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n    for _,\
    \ v := range l {\n        m[v] = true\n    }\n    var r []int\n    for k := range\
    \ m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var\
    \ u []int\n    for _, i := range l {\n        if !contains(u, i) {\n         \
    \   u = append(u, i)\n        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var\
    \ u []int\n    for _, v := range l {\n        if !contains(u, v) {\n         \
    \   u = append(u, v)\n        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var u []int\n    for\
    \ k := range m {\n        u = append(u, k)\n    }\n    return u\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\
    \    var r []int\n    for k := range m {\n        r = append(r, k)\n    }\n  \
    \  return r\n}\n", "    var u []int\n    for _, v := range l {\n        if !contains(u,\
    \ v) {\n            u = append(u, v)\n        }\n    }\n    return u\n}\n", " \
    \   m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    var r []int\n    for k := range m {\n        r = append(r, k)\n  \
    \  }\n    return r\n}\n", "    m := make(map[int]bool)\n    for _, i := range\
    \ l {\n        m[i] = true\n    }\n    var r []int\n    for k := range m {\n \
    \       r = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var\
    \ res []int\n    for _, v := range l {\n        if !contains(res, v) {\n     \
    \       res = append(res, v)\n        }\n    }\n    return res\n}\n", "    var\
    \ u []int\n    for _, v := range l {\n        if !contains(u, v) {\n         \
    \   u = append(u, v)\n        }\n    }\n    return u\n}\n", "    if len(l) ==\
    \ 0 {\n        return []int{}\n    }\n    if len(l) == 1 {\n        return l\n\
    \    }\n    var result []int\n    result = append(result, l[0])\n    for i :=\
    \ 1; i < len(l); i++ {\n        if l[i] != l[i-1] {\n            result = append(result,\
    \ l[i])\n        }\n    }\n    return result\n}\n", "    var u []int\n    m :=\
    \ make(map[int]bool)\n\n    for _, v := range l {\n        if _, ok := m[v]; !ok\
    \ {\n            m[v] = true\n            u = append(u, v)\n        }\n    }\n\
    \n    return u\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n\
    \        m[v] = true\n    }\n    var r []int\n    for k := range m {\n       \
    \ r = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n", "    var unique []int\n    for _, v := range l {\n        if\
    \ !contains(unique, v) {\n            unique = append(unique, v)\n        }\n\
    \    }\n    return unique\n}\n", "    m := make(map[int]bool)\n    for _, v :=\
    \ range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n    i :=\
    \ 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n    return\
    \ r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v]\
    \ = true\n    }\n    var r []int\n    for k := range m {\n        r = append(r,\
    \ k)\n    }\n    return r\n}\n", "    var u []int\n    for _, v := range l {\n\
    \        if !contains(u, v) {\n            u = append(u, v)\n        }\n    }\n\
    \    return u\n}\n", "    var u []int\n    for _, v := range l {\n        if !contains(u,\
    \ v) {\n            u = append(u, v)\n        }\n    }\n    return u\n}\n", " \
    \   var r []int\n    for _, v := range l {\n        if !contains(r, v) {\n   \
    \         r = append(r, v)\n        }\n    }\n    return r\n}\n", "    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    var u []int\n    for _, i := range l {\n        if !contains(u, i) {\n    \
    \        u = append(u, i)\n        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        u[i] = k\n        i++\n    }\n  \
    \  return u\n}\n", "    var u []int\n    for _, v := range l {\n        if !contains(u,\
    \ v) {\n            u = append(u, v)\n        }\n    }\n    return u\n}\n", " \
    \   m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    r := make([]int, len(m))\n    i := 0\n    for k := range m {\n   \
    \     r[i] = k\n        i++\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\
    \    var r []int\n    for k := range m {\n        r = append(r, k)\n    }\n  \
    \  return r\n}\n", "    var u []int\n    for _, i := range l {\n        if !contains(u,\
    \ i) {\n            u = append(u, i)\n        }\n    }\n    return u\n}\n", " \
    \   // TODO: Implement me\n    return []int{}\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    r := make([]int, len(m))\n    i := 0\n    for\
    \ k := range m {\n        r[i] = k\n        i++\n    }\n    return r\n}\n", " \
    \   var u []int\n    for _, v := range l {\n        if !contains(u, v) {\n   \
    \         u = append(u, v)\n        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n", "    var u []int\n    for _, v := range l {\n        if !in(v,\
    \ u) {\n            u = append(u, v)\n        }\n    }\n    return u\n}\n", " \
    \   m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    var r []int\n    for k := range m {\n        r = append(r, k)\n  \
    \  }\n    return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l {\n        m[v] = true\n    }\n    var r []int\n    for k := range m {\n \
    \       r = append(r, k)\n    }\n    return r\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    var u []int\n    for _, i := range l {\n     \
    \   if !contains(u, i) {\n            u = append(u, i)\n        }\n    }\n   \
    \ return u\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n  \
    \      m[v] = true\n    }\n    u := make([]int, len(m))\n    i := 0\n    for k\
    \ := range m {\n        u[i] = k\n        i++\n    }\n    return u\n}\n", "  \
    \  m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n \
    \   }\n    var r []int\n    for k := range m {\n        r = append(r, k)\n   \
    \ }\n    return r\n}\n", "    var u []int\n    m := make(map[int]bool)\n\n   \
    \ for _, v := range l {\n        if _, ok := m[v]; !ok {\n            m[v] = true\n\
    \            u = append(u, v)\n        }\n    }\n\n    return u\n}\n", "    var\
    \ u []int\n    for _, v := range l {\n        if !contains(u, v) {\n         \
    \   u = append(u, v)\n        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\
    \    var u []int\n    for k := range m {\n        u = append(u, k)\n    }\n  \
    \  return u\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    var u []int\n    for k := range m {\n        u\
    \ = append(u, k)\n    }\n    return u\n}\n", "    var u []int\n    for _, v :=\
    \ range l {\n        if !contains(u, v) {\n            u = append(u, v)\n    \
    \    }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n    for _, v\
    \ := range l {\n        m[v] = true\n    }\n    var r []int\n    for k := range\
    \ m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\
    \    var r []int\n    for k := range m {\n        r = append(r, k)\n    }\n  \
    \  return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    var r []int\n    for k := range m {\n        r\
    \ = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n  \
    \  for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    r := make([]int, len(m))\n    i := 0\n    for\
    \ k := range m {\n        r[i] = k\n        i++\n    }\n    return r\n}\n", " \
    \   m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    r := make([]int, len(m))\n    i := 0\n    for k := range m {\n   \
    \     r[i] = k\n        i++\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var\
    \ u []int\n    for _, v := range l {\n        if !contains(u, v) {\n         \
    \   u = append(u, v)\n        }\n    }\n    return u\n}\n", "    var result []int\n\
    \    for _, v := range l {\n        if !contains(result, v) {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n \
    \   }\n    r := make([]int, len(m))\n    i := 0\n    for k := range m {\n    \
    \    r[i] = k\n        i++\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\
    \    var r []int\n    for k := range m {\n        r = append(r, k)\n    }\n  \
    \  return r\n}\n", "    // TODO: implement me\n    return []int{}\n}\n", "   \
    \ m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n  \
    \  }\n    r := make([]int, len(m))\n    i := 0\n    for k := range m {\n     \
    \   r[i] = k\n        i++\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var\
    \ result []int\n    for _, v := range l {\n        if !contains(result, v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] =\
    \ true\n    }\n    r := make([]int, len(m))\n    i := 0\n    for k := range m\
    \ {\n        r[i] = k\n        i++\n    }\n    return r\n}\n", "    var result\
    \ []int\n    for _, v := range l {\n        if !contains(result, v) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n \
    \   }\n    r := make([]int, len(m))\n    i := 0\n    for k := range m {\n    \
    \    r[i] = k\n        i++\n    }\n    return r\n}\n", "    var u []int\n    for\
    \ _, v := range l {\n        if !contains(u, v) {\n            u = append(u, v)\n\
    \        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n    for _,\
    \ v := range l {\n        m[v] = true\n    }\n    var r []int\n    for k := range\
    \ m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var u []int\n\
    \    for _, v := range l {\n        if !contains(u, v) {\n            u = append(u,\
    \ v)\n        }\n    }\n    return u\n}\n", "    var r []int\n    for _, v :=\
    \ range l {\n        if !contains(r, v) {\n            r = append(r, v)\n    \
    \    }\n    }\n    return r\n}\n", "    var res []int\n    for _, v := range l\
    \ {\n        if !contains(res, v) {\n            res = append(res, v)\n      \
    \  }\n    }\n    return res\n}\n", "    m := make(map[int]bool)\n    for _, v\
    \ := range l {\n        m[v] = true\n    }\n    var r []int\n    for k := range\
    \ m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\
    \    var r []int\n    for k := range m {\n        r = append(r, k)\n    }\n  \
    \  return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n \
    \       m[v] = true\n    }\n    var r []int\n    for k := range m {\n        r\
    \ = append(r, k)\n    }\n    return r\n}\n", "    // TODO: implement me\n    return\
    \ nil\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n       \
    \ m[v] = true\n    }\n    r := make([]int, len(m))\n    i := 0\n    for k := range\
    \ m {\n        r[i] = k\n        i++\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        r[i] = k\n        i++\n    }\n  \
    \  return r\n}\n", "    var result []int\n    for _, v := range l {\n        if\
    \ !contains(result, v) {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    m := make(map[int]bool)\n    for _, v :=\
    \ range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n    i :=\
    \ 0\n    for k := range m {\n        u[i] = k\n        i++\n    }\n    return\
    \ u\n}\n", "    var u []int\n    for _, v := range l {\n        if !contains(u,\
    \ v) {\n            u = append(u, v)\n        }\n    }\n    return u\n}\n", " \
    \   var res []int\n    for _, v := range l {\n        if !contains(res, v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n", " \
    \   m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    r := make([]int, len(m))\n    i := 0\n    for k := range m {\n   \
    \     r[i] = k\n        i++\n    }\n    return r\n}\n", "    var u []int\n   \
    \ m := make(map[int]bool)\n\n    for _, v := range l {\n        if _, ok := m[v];\
    \ !ok {\n            m[v] = true\n            u = append(u, v)\n        }\n  \
    \  }\n\n    return u\n}\n", "    var result []int\n    for _, v := range l {\n\
    \        if !contains(result, v) {\n            result = append(result, v)\n \
    \       }\n    }\n    return result\n}\n", "    var u []int\n    for _, v := range\
    \ l {\n        if !contains(u, v) {\n            u = append(u, v)\n        }\n\
    \    }\n    return u\n}\n", "    m := make(map[int]bool)\n    for _, e := range\
    \ l {\n        m[e] = true\n    }\n    r := make([]int, len(m))\n    i := 0\n\
    \    for k := range m {\n        r[i] = k\n        i++\n    }\n    return r\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
