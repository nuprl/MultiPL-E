language: go_test.go
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        s := float64(a + b + c) / 2\n        area = s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfg9c8pii_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfg9c8pii_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var area\
    \ float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    if\
    \ area < 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpmjfe5b2p_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpmjfe5b2p_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpmjfe5b2p_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpmjfe5b2p_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpmjfe5b2p_test.go:46: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpmjfe5b2p_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var area\
    \ float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    if\
    \ area > 0 {\n        return float64(area)\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmppucedc5q_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmppucedc5q_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmppucedc5q_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmppucedc5q_test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmppucedc5q_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    return 0.0\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpv1vv95eg_test.go:41: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpv1vv95eg_test.go:41:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpv1vv95eg_test.go:41: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpv1vv95eg_test.go:41:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpv1vv95eg_test.go:41: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpv1vv95eg_test.go:41:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpv1vv95eg_test.go:41: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpv1vv95eg_test.go:41:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpv1vv95eg_test.go:41: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        area = area / (p * (p - float64(a))\
    \ * (p - float64(b)))\n        area = area / (p * (p - float64(a)) * (p - float64(c)))\n\
    \        area = area / (p * (p - float64(b)) * (p - float64(c)))\n        area\
    \ = area * 2\n    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpaw1l_g34_test.go:52: expected '%!s(float64=6)', got '%!s(float64=0.009259259259259259)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpaw1l_g34_test.go:52:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=0.003515131542813204)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpaw1l_g34_test.go:52:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0.2222222222222222)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpaw1l_g34_test.go:52:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0.0006887052341597796)'\n  \
    \  --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpaw1l_g34_test.go:52:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=7.111111111111111)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        p :=\
    \ float64(a+b+c) / 2\n        return p * (p-float64(a)) * (p-float64(b)) * (p-float64(c))\n\
    \    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp5tawcyxo_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp5tawcyxo_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp5tawcyxo_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp5tawcyxo_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp5tawcyxo_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return fmt.Sprintf(\"%.2f\", math.Sqrt(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c))))\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7u58534g_test.go:19:16: cannot use fmt.Sprintf("%.2f", math.Sqrt(p * (p
    - float64(a)) * (p - float64(b)) * (p - float64(c)))) (value of type string) as
    type float64 in return statement

    /tmp/tmp7u58534g_test.go:19:36: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_qe96a4n_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp_qe96a4n_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp_qe96a4n_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_qe96a4n_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp_qe96a4n_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  s := float64(a + b + c) / 2\n        return (s * (s - float64(a)) * (s - float64(b))\
    \ * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxqg_tej2_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxqg_tej2_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxqg_tej2_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxqg_tej2_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxqg_tej2_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2.0\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area > 0 {\n        return float64(area)\n    } else {\n        return\
    \ -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpz9q119gk_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpz9q119gk_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpz9q119gk_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpz9q119gk_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpz9q119gk_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area > 0 {\n        return float64(area)\n    }\n    return -1\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzccr9kcv_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpzccr9kcv_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpzccr9kcv_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzccr9kcv_test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpzccr9kcv_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        s := float64(a + b + c) / 2\n        area = s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfg9c8pii_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfg9c8pii_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    s := float64(a + b + c) / 2\n    return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpzel675x__test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzel675x__test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2.0\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area < 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpskx2h0cl_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpskx2h0cl_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpskx2h0cl_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpskx2h0cl_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpskx2h0cl_test.go:46: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpskx2h0cl_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        s := float64(a + b + c) / 2\n        area = s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfg9c8pii_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfg9c8pii_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  return float64(a + b + c) / 2\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpjxcgk_tq_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpjxcgk_tq_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpjxcgk_tq_test.go:44: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmpjxcgk_tq_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return (p * (p -\
    \ float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp9ddksq2o_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp9ddksq2o_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp9ddksq2o_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp9ddksq2o_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp9ddksq2o_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s :=\
    \ float64(a+b+c) / 2\n        return (s*(s-float64(a))*(s-float64(b))*(s-float64(c)))\n\
    \    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxtmur0h9_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxtmur0h9_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxtmur0h9_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxtmur0h9_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxtmur0h9_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area < 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpvoxkhee8_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpvoxkhee8_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpvoxkhee8_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpvoxkhee8_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpvoxkhee8_test.go:46: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpvoxkhee8_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n    }\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkvpda3ee_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkvpda3ee_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkvpda3ee_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpkvpda3ee_test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpkvpda3ee_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var area\
    \ float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    if\
    \ area <= 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpw_kkbphc_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpw_kkbphc_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpw_kkbphc_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpw_kkbphc_test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpw_kkbphc_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    s := float64(a + b + c) / 2\n    return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpzel675x__test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzel675x__test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    s := float64(a + b + c) / 2\n    return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpzel675x__test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzel675x__test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2.0\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area <= 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpg8irbz16_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpg8irbz16_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpg8irbz16_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpg8irbz16_test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpg8irbz16_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n    }\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkvpda3ee_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkvpda3ee_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkvpda3ee_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpkvpda3ee_test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpkvpda3ee_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area < 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpvoxkhee8_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpvoxkhee8_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpvoxkhee8_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpvoxkhee8_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpvoxkhee8_test.go:46: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpvoxkhee8_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp8_dgxkw8_test.go:41: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp8_dgxkw8_test.go:41:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp8_dgxkw8_test.go:41: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp8_dgxkw8_test.go:41:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp8_dgxkw8_test.go:41: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area > 0 {\n        return float64(area)\n    }\n    return -1\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzccr9kcv_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpzccr9kcv_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpzccr9kcv_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzccr9kcv_test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpzccr9kcv_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = math.Sqrt(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n    } else {\n  \
    \      area = -1\n    }\n    return math.Round(area * 100) / 100\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbw6jc0x2_test.go:20:16: undefined: math

    /tmp/tmpbw6jc0x2_test.go:24:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        area := p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c))\n        return area\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpsrd25mt__test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpsrd25mt__test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpsrd25mt__test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpsrd25mt__test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpsrd25mt__test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp8_dgxkw8_test.go:41: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp8_dgxkw8_test.go:41:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp8_dgxkw8_test.go:41: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp8_dgxkw8_test.go:41:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp8_dgxkw8_test.go:41: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        s := float64(a + b + c) / 2\n        area = s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfg9c8pii_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfg9c8pii_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        p :=\
    \ float64(a+b+c) / 2\n        return float64(p * (p-float64(a)) * (p-float64(b))\
    \ * (p-float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp4o02547c_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp4o02547c_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp4o02547c_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp4o02547c_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp4o02547c_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        area = area / (p * (p - float64(a))\
    \ * (p - float64(b)))\n        area = area / (p * (p - float64(a)) * (p - float64(c)))\n\
    \        area = area / (p * (p - float64(b)) * (p - float64(c)))\n        area\
    \ = area * p\n    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpqofiu0zr_test.go:52: expected '%!s(float64=6)', got '%!s(float64=0.027777777777777776)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpqofiu0zr_test.go:52:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=0.014939309056956116)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpqofiu0zr_test.go:52:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0.3333333333333333)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpqofiu0zr_test.go:52:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0.003787878787878788)'\n   \
    \ --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpqofiu0zr_test.go:52:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=5.333333333333333)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  // Heron's formula\n        s := float64(a + b + c) / 2\n        return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpe35ups8m_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpe35ups8m_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpe35ups8m_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpe35ups8m_test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpe35ups8m_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  return float64(a + b + c) / 2\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpjxcgk_tq_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpjxcgk_tq_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpjxcgk_tq_test.go:44: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmpjxcgk_tq_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    s := float64(a + b + c) / 2\n    return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpzel675x__test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzel675x__test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return (p * (p -\
    \ float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp9ddksq2o_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp9ddksq2o_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp9ddksq2o_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp9ddksq2o_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp9ddksq2o_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area < 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpvoxkhee8_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpvoxkhee8_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpvoxkhee8_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpvoxkhee8_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpvoxkhee8_test.go:46: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpvoxkhee8_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        area = area / (p * (p - float64(a))\
    \ * (p - float64(b)))\n        area = area / (p * (p - float64(a)) * (p - float64(c)))\n\
    \        area = area / (p * (p - float64(b)) * (p - float64(c)))\n        area\
    \ = area * 2\n    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpaw1l_g34_test.go:52: expected '%!s(float64=6)', got '%!s(float64=0.009259259259259259)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpaw1l_g34_test.go:52:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=0.003515131542813204)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpaw1l_g34_test.go:52:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0.2222222222222222)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpaw1l_g34_test.go:52:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0.0006887052341597796)'\n  \
    \  --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpaw1l_g34_test.go:52:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=7.111111111111111)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpyry1kpfu_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpyry1kpfu_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var area\
    \ float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    if\
    \ area < 0 {\n        return -1\n    }\n    return float64(int(area * 100)) /\
    \ 100\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpmobl1lq3_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpmobl1lq3_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.93)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpmobl1lq3_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpmobl1lq3_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpmobl1lq3_test.go:46: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpmobl1lq3_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpenxlpbdv_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpenxlpbdv_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    s := float64(a + b + c) / 2\n    return (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)) * s\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpvmhwrnwb_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpvmhwrnwb_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpvmhwrnwb_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpvmhwrnwb_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpvmhwrnwb_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var area\
    \ float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    if\
    \ area < 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpmjfe5b2p_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpmjfe5b2p_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpmjfe5b2p_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpmjfe5b2p_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpmjfe5b2p_test.go:46: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpmjfe5b2p_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s :=\
    \ float64(a+b+c) / 2\n        return float64(s * (s-float64(a)) * (s-float64(b))\
    \ * (s-float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdhw0bc06_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdhw0bc06_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdhw0bc06_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdhw0bc06_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdhw0bc06_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    s := float64(a + b + c) / 2\n    return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpzel675x__test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzel675x__test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpzel675x__test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n    }\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkvpda3ee_test.go:46: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkvpda3ee_test.go:46:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkvpda3ee_test.go:46: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpkvpda3ee_test.go:46:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpkvpda3ee_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx3ykfm3_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx3ykfm3_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie0uj1ns_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpie0uj1ns_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpxw0y89ky_test.go:42:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpxw0y89ky_test.go:42: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n      \
    \  p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3b8x0jxr_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3b8x0jxr_test.go:45: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
    \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a int, b\
    \ int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b &&\
    \ b + c > a {\n        s := float64(a + b + c) / 2\n        area = s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c))\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfg9c8pii_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfg9c8pii_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfg9c8pii_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
