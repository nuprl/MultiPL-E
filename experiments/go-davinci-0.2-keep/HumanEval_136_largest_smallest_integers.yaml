name: HumanEval_136_largest_smallest_integers
language: go_test.go
prompt: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n   \
  \ \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a' is\n\
  // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in a list.\n// If there is no negative or positive integers, return them as None.\n\
  // Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n//\
  \ largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
  \ == (None, None)\nfunc largest_smallest_integers(lst []int) []interface{} {\n"
tests: "func TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
  \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}),\
  \ expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1, 3, 2, 4,\
  \ 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
  \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
  \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
  \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}), expected:\
  \ []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3, -5, -6}),\
  \ expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1, -3, -5,\
  \ -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
  \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
  \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var largestNegative, smallestPositive int\n    var largestNegativeExists,\
    \ smallestPositiveExists bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if largestNegativeExists {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            }\n        } else if v > 0 {\n            if smallestPositiveExists\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            }\n        }\n\
    \    }\n\n    if !largestNegativeExists {\n        largestNegative = 0\n    }\n\
    \    if !smallestPositiveExists {\n        smallestPositive = 0\n    }\n\n   \
    \ return []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFlag bool\n    var\
    \ smallestPositiveFlag bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeFlag == false {\n                largestNegative\
    \ = v\n                largestNegativeFlag = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if smallestPositiveFlag == false {\n                smallestPositive\
    \ = v\n                smallestPositiveFlag = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if largestNegativeFlag == false {\n        largestNegative\
    \ = 0\n    }\n    if smallestPositiveFlag == false {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largest, smallest int\n    var largest_exists, smallest_exists bool\n \
    \   for _, v := range lst {\n        if v < 0 {\n            if !largest_exists\
    \ {\n                largest = v\n                largest_exists = true\n    \
    \        } else if v > largest {\n                largest = v\n            }\n\
    \        } else if v > 0 {\n            if !smallest_exists {\n              \
    \  smallest = v\n                smallest_exists = true\n            } else if\
    \ v < smallest {\n                smallest = v\n            }\n        }\n   \
    \ }\n    if !largest_exists {\n        largest = 0\n    }\n    if !smallest_exists\
    \ {\n        smallest = 0\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if largestNegativeFound == false {\n          \
    \      largestNegative = v\n                largestNegativeFound = true\n    \
    \        } else if v > largestNegative {\n                largestNegative = v\n\
    \            }\n        } else if v > 0 {\n            if smallestPositiveFound\
    \ == false {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if largestNegativeFound == false\
    \ {\n        largestNegative = 0\n    }\n    if smallestPositiveFound == false\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largest, smallest int\n    var largest_set,\
    \ smallest_set bool\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if !largest_set || v > largest {\n                largest = v\n        \
    \        largest_set = true\n            }\n        } else if v > 0 {\n      \
    \      if !smallest_set || v < smallest {\n                smallest = v\n    \
    \            smallest_set = true\n            }\n        }\n    }\n    if largest_set\
    \ {\n        if smallest_set {\n            return []interface{}{largest, smallest}\n\
    \        } else {\n            return []interface{}{largest, nil}\n        }\n\
    \    } else {\n        if smallest_set {\n            return []interface{}{nil,\
    \ smallest}\n        } else {\n            return []interface{}{nil, nil}\n  \
    \      }\n    }\n}\n", "    var largestNegative, smallestPositive int\n    var\
    \ largestNegativeSet, smallestPositiveSet bool\n    for _, val := range lst {\n\
    \        if val < 0 {\n            if !largestNegativeSet || val > largestNegative\
    \ {\n                largestNegative = val\n                largestNegativeSet\
    \ = true\n            }\n        } else if val > 0 {\n            if !smallestPositiveSet\
    \ || val < smallestPositive {\n                smallestPositive = val\n      \
    \          smallestPositiveSet = true\n            }\n        }\n    }\n    if\
    \ !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeExists bool\n    var smallestPositiveExists bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, v := range lst {\n \
    \       if v < 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if largestNegativeFound == false {\n          \
    \      largestNegative = v\n                largestNegativeFound = true\n    \
    \        } else if v > largestNegative {\n                largestNegative = v\n\
    \            }\n        } else if v > 0 {\n            if smallestPositiveFound\
    \ == false {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if largestNegativeFound == false\
    \ {\n        largestNegative = 0\n    }\n\n    if smallestPositiveFound == false\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeFound bool\n    var smallestPositiveFound bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, num := range lst {\n\
    \        if num < 0 {\n            if !largestNegativeFound {\n              \
    \  largestNegative = num\n                largestNegativeFound = true\n      \
    \      } else if num > largestNegative {\n                largestNegative = num\n\
    \            }\n        } else if num > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = num\n                smallestPositiveFound\
    \ = true\n            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n \
    \       largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n      \
    \  smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, v := range lst {\n \
    \       if v < 0 {\n            if largestNegativeExists {\n                if\
    \ v > largestNegative {\n                    largestNegative = v\n           \
    \     }\n            } else {\n                largestNegative = v\n         \
    \       largestNegativeExists = true\n            }\n        } else if v > 0 {\n\
    \            if smallestPositiveExists {\n                if v < smallestPositive\
    \ {\n                    smallestPositive = v\n                }\n           \
    \ } else {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            }\n        }\n    }\n\n    if largestNegativeExists {\n\
    \        if smallestPositiveExists {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveExists {\n       \
    \     return []interface{}{nil, smallestPositive}\n        } else {\n        \
    \    return []interface{}{nil, nil}\n        }\n    }\n}\n", "    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largestNegativeFound {\n                largestNegative =\
    \ v\n                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n\n    var largestNegativeInterface interface{}\n    var smallestPositiveInterface\
    \ interface{}\n\n    if largestNegativeFound {\n        largestNegativeInterface\
    \ = largestNegative\n    } else {\n        largestNegativeInterface = nil\n  \
    \  }\n\n    if smallestPositiveFound {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeSet bool\n    var smallestPositiveSet bool\n\n \
    \   for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, value := range lst {\n\
    \        if value < 0 {\n            if !largestNegativeSet {\n              \
    \  largestNegative = value\n                largestNegativeSet = true\n      \
    \      } else if value > largestNegative {\n                largestNegative =\
    \ value\n            }\n        } else if value > 0 {\n            if !smallestPositiveSet\
    \ {\n                smallestPositive = value\n                smallestPositiveSet\
    \ = true\n            } else if value < smallestPositive {\n                smallestPositive\
    \ = value\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n \
    \       largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    var largestNegativeInterface, smallestPositiveInterface interface{}\n\
    \    if largestNegativeFound {\n        largestNegativeInterface = largestNegative\n\
    \    } else {\n        largestNegativeInterface = nil\n    }\n    if smallestPositiveFound\
    \ {\n        smallestPositiveInterface = smallestPositive\n    } else {\n    \
    \    smallestPositiveInterface = nil\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeFound bool\n    var smallestPositiveFound bool\n\
    \n    for _, value := range lst {\n        if value < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = value\n                largestNegativeFound\
    \ = true\n            } else if value > largestNegative {\n                largestNegative\
    \ = value\n            }\n        } else if value > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = value\n                smallestPositiveFound\
    \ = true\n            } else if value < smallestPositive {\n                smallestPositive\
    \ = value\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n\
    \        largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n     \
    \   smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, num := range lst {\n\
    \        if num < 0 {\n            if !largestNegativeFound {\n              \
    \  largestNegative = num\n                largestNegativeFound = true\n      \
    \      } else if num > largestNegative {\n                largestNegative = num\n\
    \            }\n        } else if num > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = num\n                smallestPositiveFound\
    \ = true\n            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n \
    \       largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n      \
    \  smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeExists, smallestPositiveExists bool\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeExists {\n       \
    \         largestNegative = v\n                largestNegativeExists = true\n\
    \            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeExists {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative, smallestPositive int\n    var largestNegativeSet, smallestPositiveSet\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n\n    var\
    \ largestNegativeInterface, smallestPositiveInterface interface{}\n    if largestNegativeSet\
    \ {\n        largestNegativeInterface = largestNegative\n    } else {\n      \
    \  largestNegativeInterface = nil\n    }\n    if smallestPositiveSet {\n     \
    \   smallestPositiveInterface = smallestPositive\n    } else {\n        smallestPositiveInterface\
    \ = nil\n    }\n\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    var largestNegativeInterface,\
    \ smallestPositiveInterface interface{}\n    if largestNegativeSet {\n       \
    \ largestNegativeInterface = largestNegative\n    }\n    if smallestPositiveSet\
    \ {\n        smallestPositiveInterface = smallestPositive\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeSet bool\n    var smallestPositiveSet bool\n\n \
    \   for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    var largestNegativeInterface interface{}\n\
    \    var smallestPositiveInterface interface{}\n\n    if largestNegativeSet {\n\
    \        largestNegativeInterface = largestNegative\n    } else {\n        largestNegativeInterface\
    \ = nil\n    }\n\n    if smallestPositiveSet {\n        smallestPositiveInterface\
    \ = smallestPositive\n    } else {\n        smallestPositiveInterface = nil\n\
    \    }\n\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largestNegativeFound {\n                largestNegative =\
    \ v\n                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n\n    var largestNegativeResult, smallestPositiveResult interface{}\n\
    \    if largestNegativeFound {\n        largestNegativeResult = largestNegative\n\
    \    } else {\n        largestNegativeResult = nil\n    }\n\n    if smallestPositiveFound\
    \ {\n        smallestPositiveResult = smallestPositive\n    } else {\n       \
    \ smallestPositiveResult = nil\n    }\n\n    return []interface{}{largestNegativeResult,\
    \ smallestPositiveResult}\n}\n", "    var largestNegative, smallestPositive int\n\
    \    var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeExists,\
    \ smallestPositiveExists bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeExists {\n                largestNegative = v\n\
    \                largestNegativeExists = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveExists {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            } else if v\
    \ < smallestPositive {\n                smallestPositive = v\n            }\n\
    \        }\n    }\n    if !largestNegativeExists {\n        largestNegative =\
    \ 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive = 0\n \
    \   }\n    return []interface{}{largestNegative, smallestPositive}\n}\n", "  \
    \  var largestNegative, smallestPositive int\n    var largestNegativeSet, smallestPositiveSet\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeFound bool\n    var smallestPositiveFound bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative, smallestPositive int\n    var largestNegativeFound, smallestPositiveFound\
    \ bool\n\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largestNegativeSet {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeSet\
    \ = true\n            }\n        } else if v > 0 {\n            if smallestPositiveSet\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    var largestNegativeInterface interface{}\n    var smallestPositiveInterface\
    \ interface{}\n\n    if largestNegativeSet {\n        largestNegativeInterface\
    \ = largestNegative\n    } else {\n        largestNegativeInterface = nil\n  \
    \  }\n\n    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative, smallestPositive\
    \ int\n    var largestNegativeSet, smallestPositiveSet bool\n\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    var largestNegativeInterface, smallestPositiveInterface\
    \ interface{}\n    if largestNegativeSet {\n        largestNegativeInterface =\
    \ largestNegative\n    } else {\n        largestNegativeInterface = nil\n    }\n\
    \    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative, smallestPositive\
    \ int\n    var largestNegativeSet, smallestPositiveSet bool\n\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, n := range lst {\n  \
    \      if n < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = n\n                largestNegativeFound = true\n            } else if n >\
    \ largestNegative {\n                largestNegative = n\n            }\n    \
    \    } else if n > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = n\n                smallestPositiveFound = true\n    \
    \        } else if n < smallestPositive {\n                smallestPositive =\
    \ n\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    var largestNegativeInterface, smallestPositiveInterface\
    \ interface{}\n    if largestNegativeSet {\n        largestNegativeInterface =\
    \ largestNegative\n    }\n    if smallestPositiveSet {\n        smallestPositiveInterface\
    \ = smallestPositive\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative, smallestPositive\
    \ int\n    var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n\n    for _, val := range lst {\n        if val <\
    \ 0 && !largestNegativeSet {\n            largestNegative = val\n            largestNegativeSet\
    \ = true\n        } else if val < 0 && val > largestNegative {\n            largestNegative\
    \ = val\n        } else if val > 0 && !smallestPositiveSet {\n            smallestPositive\
    \ = val\n            smallestPositiveSet = true\n        } else if val > 0 &&\
    \ val < smallestPositive {\n            smallestPositive = val\n        }\n  \
    \  }\n\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n \
    \   if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, i := range lst {\n        if i < 0 {\n            if !largestNegativeExists\
    \ || i > largestNegative {\n                largestNegative = i\n            \
    \    largestNegativeExists = true\n            }\n        } else if i > 0 {\n\
    \            if !smallestPositiveExists || i < smallestPositive {\n          \
    \      smallestPositive = i\n                smallestPositiveExists = true\n \
    \           }\n        }\n    }\n    if !largestNegativeExists {\n        largestNegative\
    \ = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive = 0\n\
    \    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n", " \
    \   var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeExists bool\n    var smallestPositiveExists bool\n\
    \n    for _, value := range lst {\n        if value < 0 {\n            if largestNegativeExists\
    \ {\n                if value > largestNegative {\n                    largestNegative\
    \ = value\n                }\n            } else {\n                largestNegative\
    \ = value\n                largestNegativeExists = true\n            }\n     \
    \   } else if value > 0 {\n            if smallestPositiveExists {\n         \
    \       if value < smallestPositive {\n                    smallestPositive =\
    \ value\n                }\n            } else {\n                smallestPositive\
    \ = value\n                smallestPositiveExists = true\n            }\n    \
    \    }\n    }\n\n    if largestNegativeExists {\n        if smallestPositiveExists\
    \ {\n            return []interface{}{largestNegative, smallestPositive}\n   \
    \     } else {\n            return []interface{}{largestNegative, nil}\n     \
    \   }\n    } else {\n        if smallestPositiveExists {\n            return []interface{}{nil,\
    \ smallestPositive}\n        } else {\n            return []interface{}{nil, nil}\n\
    \        }\n    }\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeSet bool\n    var smallestPositiveSet bool\n\n \
    \   for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    var largestNegativeInterface interface{}\n\
    \    var smallestPositiveInterface interface{}\n\n    if largestNegativeSet {\n\
    \        largestNegativeInterface = largestNegative\n    } else {\n        largestNegativeInterface\
    \ = nil\n    }\n\n    if smallestPositiveSet {\n        smallestPositiveInterface\
    \ = smallestPositive\n    } else {\n        smallestPositiveInterface = nil\n\
    \    }\n\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    for _, v\
    \ := range lst {\n        if v < 0 {\n            if largestNegative == 0 {\n\
    \                largestNegative = v\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if smallestPositive == 0 {\n                smallestPositive\
    \ = v\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeExists, smallestPositiveExists bool\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeExists {\n       \
    \         largestNegative = v\n                largestNegativeExists = true\n\
    \            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeExists {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, i := range lst {\n    \
    \    if i < 0 {\n            if largestNegativeSet {\n                if i > largestNegative\
    \ {\n                    largestNegative = i\n                }\n            }\
    \ else {\n                largestNegative = i\n                largestNegativeSet\
    \ = true\n            }\n        } else if i > 0 {\n            if smallestPositiveSet\
    \ {\n                if i < smallestPositive {\n                    smallestPositive\
    \ = i\n                }\n            } else {\n                smallestPositive\
    \ = i\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    if largestNegativeSet {\n        if smallestPositiveSet {\n    \
    \        return []interface{}{largestNegative, smallestPositive}\n        } else\
    \ {\n            return []interface{}{largestNegative, nil}\n        }\n    }\
    \ else {\n        if smallestPositiveSet {\n            return []interface{}{nil,\
    \ smallestPositive}\n        } else {\n            return []interface{}{nil, nil}\n\
    \        }\n    }\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeSet bool\n    var smallestPositiveSet bool\n\n \
    \   for _, val := range lst {\n        if val < 0 {\n            if !largestNegativeSet\
    \ {\n                largestNegative = val\n                largestNegativeSet\
    \ = true\n            } else if val > largestNegative {\n                largestNegative\
    \ = val\n            }\n        } else if val > 0 {\n            if !smallestPositiveSet\
    \ {\n                smallestPositive = val\n                smallestPositiveSet\
    \ = true\n            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeSet == false || v > largestNegative {\n       \
    \         largestNegative = v\n                largestNegativeSet = true\n   \
    \         }\n        } else if v > 0 {\n            if smallestPositiveSet ==\
    \ false || v < smallestPositive {\n                smallestPositive = v\n    \
    \            smallestPositiveSet = true\n            }\n        }\n    }\n   \
    \ if largestNegativeSet == false {\n        largestNegative = 0\n    }\n    if\
    \ smallestPositiveSet == false {\n        smallestPositive = 0\n    }\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, i := range lst {\n        if i < 0 {\n            if !largestNegativeSet\
    \ || i > largestNegative {\n                largestNegative = i\n            \
    \    largestNegativeSet = true\n            }\n        } else if i > 0 {\n   \
    \         if !smallestPositiveSet || i < smallestPositive {\n                smallestPositive\
    \ = i\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeExists bool\n    var smallestPositiveExists bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if largestNegativeFound {\n                if v\
    \ > largestNegative {\n                    largestNegative = v\n             \
    \   }\n            } else {\n                largestNegative = v\n           \
    \     largestNegativeFound = true\n            }\n        } else if v > 0 {\n\
    \            if smallestPositiveFound {\n                if v < smallestPositive\
    \ {\n                    smallestPositive = v\n                }\n           \
    \ } else {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            }\n        }\n    }\n\n    if largestNegativeFound {\n \
    \       if smallestPositiveFound {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveFound {\n        \
    \    return []interface{}{nil, smallestPositive}\n        } else {\n         \
    \   return []interface{}{nil, nil}\n        }\n    }\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, num := range lst {\n        if num < 0 {\n            if !largestNegativeExists\
    \ || num > largestNegative {\n                largestNegative = num\n        \
    \        largestNegativeExists = true\n            }\n        } else if num >\
    \ 0 {\n            if !smallestPositiveExists || num < smallestPositive {\n  \
    \              smallestPositive = num\n                smallestPositiveExists\
    \ = true\n            }\n        }\n    }\n    var largestNegativeInterface, smallestPositiveInterface\
    \ interface{}\n    if largestNegativeExists {\n        largestNegativeInterface\
    \ = largestNegative\n    }\n    if smallestPositiveExists {\n        smallestPositiveInterface\
    \ = smallestPositive\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeExists bool\n    var smallestPositiveExists bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if largestNegativeExists\
    \ {\n                if v > largestNegative {\n                    largestNegative\
    \ = v\n                }\n            } else {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            }\n        }\
    \ else if v > 0 {\n            if smallestPositiveExists {\n                if\
    \ v < smallestPositive {\n                    smallestPositive = v\n         \
    \       }\n            } else {\n                smallestPositive = v\n      \
    \          smallestPositiveExists = true\n            }\n        }\n    }\n\n\
    \    if largestNegativeExists {\n        if smallestPositiveExists {\n       \
    \     return []interface{}{largestNegative, smallestPositive}\n        } else\
    \ {\n            return []interface{}{largestNegative, nil}\n        }\n    }\
    \ else {\n        if smallestPositiveExists {\n            return []interface{}{nil,\
    \ smallestPositive}\n        } else {\n            return []interface{}{nil, nil}\n\
    \        }\n    }\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeSet bool\n    var smallestPositiveSet bool\n\n \
    \   for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = -1\n    }\n    if !smallestPositiveSet {\n    \
    \    smallestPositive = -1\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, num := range lst {\n        if num < 0\
    \ && !largestNegativeSet {\n            largestNegative = num\n            largestNegativeSet\
    \ = true\n        } else if num < 0 && largestNegativeSet {\n            if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 && !smallestPositiveSet {\n            smallestPositive\
    \ = num\n            smallestPositiveSet = true\n        } else if num > 0 &&\
    \ smallestPositiveSet {\n            if num < smallestPositive {\n           \
    \     smallestPositive = num\n            }\n        }\n    }\n    var largestNegativeInterface,\
    \ smallestPositiveInterface interface{}\n    if largestNegativeSet {\n       \
    \ largestNegativeInterface = largestNegative\n    } else {\n        largestNegativeInterface\
    \ = nil\n    }\n    if smallestPositiveSet {\n        smallestPositiveInterface\
    \ = smallestPositive\n    } else {\n        smallestPositiveInterface = nil\n\
    \    }\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n\n    var largestNegativeInterface,\
    \ smallestPositiveInterface interface{}\n    if largestNegativeSet {\n       \
    \ largestNegativeInterface = largestNegative\n    } else {\n        largestNegativeInterface\
    \ = nil\n    }\n    if smallestPositiveSet {\n        smallestPositiveInterface\
    \ = smallestPositive\n    } else {\n        smallestPositiveInterface = nil\n\
    \    }\n\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largestNegativeSet {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeSet\
    \ = true\n            }\n        } else if v > 0 {\n            if smallestPositiveSet\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    var largestNegativeInterface interface{}\n    var smallestPositiveInterface\
    \ interface{}\n\n    if largestNegativeSet {\n        largestNegativeInterface\
    \ = largestNegative\n    } else {\n        largestNegativeInterface = nil\n  \
    \  }\n\n    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative, smallestPositive\
    \ int\n    var largestNegativeSet, smallestPositiveSet bool\n\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, v := range lst {\n \
    \       if v < 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if largestNegativeSet {\n                if i > largestNegative {\n\
    \                    largestNegative = i\n                }\n            } else\
    \ {\n                largestNegative = i\n                largestNegativeSet =\
    \ true\n            }\n        } else if i > 0 {\n            if smallestPositiveSet\
    \ {\n                if i < smallestPositive {\n                    smallestPositive\
    \ = i\n                }\n            } else {\n                smallestPositive\
    \ = i\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    var largestNegativeInterface, smallestPositiveInterface interface{}\n\
    \    if largestNegativeSet {\n        largestNegativeInterface = largestNegative\n\
    \    } else {\n        largestNegativeInterface = nil\n    }\n    if smallestPositiveSet\
    \ {\n        smallestPositiveInterface = smallestPositive\n    } else {\n    \
    \    smallestPositiveInterface = nil\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeSet bool\n    var smallestPositiveSet bool\n\n \
    \   for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeFound bool\n    var smallestPositiveFound bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeExists bool\n    var smallestPositiveExists bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if largestNegativeExists\
    \ {\n                if v > largestNegative {\n                    largestNegative\
    \ = v\n                }\n            } else {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            }\n        }\
    \ else if v > 0 {\n            if smallestPositiveExists {\n                if\
    \ v < smallestPositive {\n                    smallestPositive = v\n         \
    \       }\n            } else {\n                smallestPositive = v\n      \
    \          smallestPositiveExists = true\n            }\n        }\n    }\n\n\
    \    var largestNegativeInterface interface{}\n    var smallestPositiveInterface\
    \ interface{}\n\n    if largestNegativeExists {\n        largestNegativeInterface\
    \ = largestNegative\n    } else {\n        largestNegativeInterface = nil\n  \
    \  }\n\n    if smallestPositiveExists {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative, smallestPositive\
    \ int\n    var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largest_negative_set {\n                largest_negative\
    \ = v\n                largest_negative_set = true\n            } else if v >\
    \ largest_negative {\n                largest_negative = v\n            }\n  \
    \      } else if v > 0 {\n            if !smallest_positive_set {\n          \
    \      smallest_positive = v\n                smallest_positive_set = true\n \
    \           } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n\n    if !largest_negative_set {\n   \
    \     largest_negative = 0\n    }\n    if !smallest_positive_set {\n        smallest_positive\
    \ = 0\n    }\n\n    return []interface{}{largest_negative, smallest_positive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeExists, smallestPositiveExists bool\n    for _, num := range\
    \ lst {\n        if num < 0 {\n            if !largestNegativeExists || num >\
    \ largestNegative {\n                largestNegative = num\n                largestNegativeExists\
    \ = true\n            }\n        } else if num > 0 {\n            if !smallestPositiveExists\
    \ || num < smallestPositive {\n                smallestPositive = num\n      \
    \          smallestPositiveExists = true\n            }\n        }\n    }\n  \
    \  var largestNegativeInterface, smallestPositiveInterface interface{}\n    if\
    \ largestNegativeExists {\n        largestNegativeInterface = largestNegative\n\
    \    }\n    if smallestPositiveExists {\n        smallestPositiveInterface = smallestPositive\n\
    \    }\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, v := range lst {\n \
    \       if v < 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if largestNegativeFound == false {\n          \
    \      largestNegative = v\n                largestNegativeFound = true\n    \
    \        } else if v > largestNegative {\n                largestNegative = v\n\
    \            }\n        } else if v > 0 {\n            if smallestPositiveFound\
    \ == false {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if largestNegativeFound == false\
    \ {\n        largestNegative = 0\n    }\n    if smallestPositiveFound == false\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeExists, smallestPositiveExists bool\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeExists {\n       \
    \         largestNegative = v\n                largestNegativeExists = true\n\
    \            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    var largestNegativeInterface, smallestPositiveInterface\
    \ interface{}\n    if largestNegativeExists {\n        largestNegativeInterface\
    \ = largestNegative\n    } else {\n        largestNegativeInterface = nil\n  \
    \  }\n    if smallestPositiveExists {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative, smallestPositive\
    \ int\n    var largestNegativeExists, smallestPositiveExists bool\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeExists {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, val := range lst {\n  \
    \      if val < 0 {\n            if largestNegativeSet {\n                if val\
    \ > largestNegative {\n                    largestNegative = val\n           \
    \     }\n            } else {\n                largestNegative = val\n       \
    \         largestNegativeSet = true\n            }\n        } else if val > 0\
    \ {\n            if smallestPositiveSet {\n                if val < smallestPositive\
    \ {\n                    smallestPositive = val\n                }\n         \
    \   } else {\n                smallestPositive = val\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n\n    if largestNegativeSet {\n   \
    \     if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n", "    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n\n    for _, n := range lst {\n        if n < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = n\n \
    \               largestNegativeSet = true\n            } else if n > largestNegative\
    \ {\n                largestNegative = n\n            }\n        } else if n >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = n\n                smallestPositiveSet = true\n            } else if n < smallestPositive\
    \ {\n                smallestPositive = n\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeFound bool\n    var smallestPositiveFound bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n    for _, n := range lst\
    \ {\n        if n < 0 {\n            if !largestNegativeSet || n > largestNegative\
    \ {\n                largestNegative = n\n                largestNegativeSet =\
    \ true\n            }\n        } else if n > 0 {\n            if !smallestPositiveSet\
    \ || n < smallestPositive {\n                smallestPositive = n\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if largestNegativeFound == false {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if smallestPositiveFound == false {\n    \
    \            smallestPositive = v\n                smallestPositiveFound = true\n\
    \            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if largestNegativeFound == false\
    \ {\n        largestNegative = 0\n    }\n\n    if smallestPositiveFound == false\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int = 0\n    var smallestPositive\
    \ int = 0\n    var largestNegativeExists bool = false\n    var smallestPositiveExists\
    \ bool = false\n    for _, v := range lst {\n        if v < 0 {\n            if\
    \ largestNegativeExists == false {\n                largestNegative = v\n    \
    \            largestNegativeExists = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if smallestPositiveExists == false {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            } else if v\
    \ < smallestPositive {\n                smallestPositive = v\n            }\n\
    \        }\n    }\n    if largestNegativeExists == false {\n        largestNegative\
    \ = nil\n    }\n    if smallestPositiveExists == false {\n        smallestPositive\
    \ = nil\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, num := range lst {\n  \
    \      if num < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = num\n                largestNegativeSet = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveSet {\n        \
    \        smallestPositive = num\n                smallestPositiveSet = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeExists,\
    \ smallestPositiveExists bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, v := range lst {\n \
    \       if v < 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeSet bool\n    var smallestPositiveSet bool\n\n \
    \   for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, num := range lst {\n        if num < 0\
    \ && !largestNegativeSet {\n            largestNegative = num\n            largestNegativeSet\
    \ = true\n        } else if num < 0 && largestNegativeSet {\n            if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 && !smallestPositiveSet {\n            smallestPositive\
    \ = num\n            smallestPositiveSet = true\n        } else if num > 0 &&\
    \ smallestPositiveSet {\n            if num < smallestPositive {\n           \
    \     smallestPositive = num\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeExists,\
    \ smallestPositiveExists bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeExists {\n                largestNegative = v\n\
    \                largestNegativeExists = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveExists {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            } else if v\
    \ < smallestPositive {\n                smallestPositive = v\n            }\n\
    \        }\n    }\n    var largestNegativeInterface, smallestPositiveInterface\
    \ interface{}\n    if largestNegativeExists {\n        largestNegativeInterface\
    \ = largestNegative\n    } else {\n        largestNegativeInterface = nil\n  \
    \  }\n    if smallestPositiveExists {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeExists bool\n    var smallestPositiveExists bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if largestNegativeExists\
    \ {\n                if v > largestNegative {\n                    largestNegative\
    \ = v\n                }\n            } else {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            }\n        }\
    \ else if v > 0 {\n            if smallestPositiveExists {\n                if\
    \ v < smallestPositive {\n                    smallestPositive = v\n         \
    \       }\n            } else {\n                smallestPositive = v\n      \
    \          smallestPositiveExists = true\n            }\n        }\n    }\n\n\
    \    if largestNegativeExists {\n        if smallestPositiveExists {\n       \
    \     return []interface{}{largestNegative, smallestPositive}\n        } else\
    \ {\n            return []interface{}{largestNegative, nil}\n        }\n    }\
    \ else {\n        if smallestPositiveExists {\n            return []interface{}{nil,\
    \ smallestPositive}\n        } else {\n            return []interface{}{nil, nil}\n\
    \        }\n    }\n}\n", "    var largestNegative, smallestPositive int\n    var\
    \ largestNegativeExists, smallestPositiveExists bool\n\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeExists {\n       \
    \         largestNegative = v\n                largestNegativeExists = true\n\
    \            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    var largestNegativeInterface interface{}\n    var smallestPositiveInterface\
    \ interface{}\n\n    if largestNegativeSet {\n        largestNegativeInterface\
    \ = largestNegative\n    } else {\n        largestNegativeInterface = nil\n  \
    \  }\n\n    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative, smallestPositive\
    \ int\n    var largestNegativeSet, smallestPositiveSet bool\n    for _, n := range\
    \ lst {\n        if n < 0 {\n            if !largestNegativeSet || n > largestNegative\
    \ {\n                largestNegative = n\n                largestNegativeSet =\
    \ true\n            }\n        } else if n > 0 {\n            if !smallestPositiveSet\
    \ || n < smallestPositive {\n                smallestPositive = n\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative, smallestPositive int\n    var largestNegativeFound, smallestPositiveFound\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative, smallestPositive int\n    var largestNegativeFound, smallestPositiveFound\
    \ bool\n    for _, n := range lst {\n        if n < 0 {\n            if !largestNegativeFound\
    \ || n > largestNegative {\n                largestNegative = n\n            \
    \    largestNegativeFound = true\n            }\n        } else if n > 0 {\n \
    \           if !smallestPositiveFound || n < smallestPositive {\n            \
    \    smallestPositive = n\n                smallestPositiveFound = true\n    \
    \        }\n        }\n    }\n    if !largestNegativeFound {\n        largestNegative\
    \ = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n\
    \    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n", " \
    \   var largestNegative, smallestPositive int\n    var largestNegativeSet, smallestPositiveSet\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeExists,\
    \ smallestPositiveExists bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeExists,\
    \ smallestPositiveExists bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    var largestNegativeInterface, smallestPositiveInterface\
    \ interface{}\n    if largestNegativeExists {\n        largestNegativeInterface\
    \ = largestNegative\n    }\n    if smallestPositiveExists {\n        smallestPositiveInterface\
    \ = smallestPositive\n    }\n\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative, smallestPositive\
    \ int\n    var largestNegativeSet, smallestPositiveSet bool\n    for _, value\
    \ := range lst {\n        if value < 0 {\n            if !largestNegativeSet ||\
    \ value > largestNegative {\n                largestNegative = value\n       \
    \         largestNegativeSet = true\n            }\n        } else if value >\
    \ 0 {\n            if !smallestPositiveSet || value < smallestPositive {\n   \
    \             smallestPositive = value\n                smallestPositiveSet =\
    \ true\n            }\n        }\n    }\n    if !largestNegativeSet {\n      \
    \  largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative, smallestPositive int\n    var largestNegativeSet, smallestPositiveSet\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n\n    var\
    \ largestNegativeInterface, smallestPositiveInterface interface{}\n    if largestNegativeSet\
    \ {\n        largestNegativeInterface = largestNegative\n    }\n    if smallestPositiveSet\
    \ {\n        smallestPositiveInterface = smallestPositive\n    }\n\n    return\
    \ []interface{}{largestNegativeInterface, smallestPositiveInterface}\n}\n", " \
    \   var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, num := range lst {\n\
    \        if num < 0 {\n            if !largestNegativeExists {\n             \
    \   largestNegative = num\n                largestNegativeExists = true\n    \
    \        } else if num > largestNegative {\n                largestNegative =\
    \ num\n            }\n        } else if num > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = num\n                smallestPositiveExists\
    \ = true\n            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n\n    var largestNegativeInterface interface{}\n\
    \    var smallestPositiveInterface interface{}\n\n    if largestNegativeExists\
    \ {\n        largestNegativeInterface = largestNegative\n    } else {\n      \
    \  largestNegativeInterface = nil\n    }\n\n    if smallestPositiveExists {\n\
    \        smallestPositiveInterface = smallestPositive\n    } else {\n        smallestPositiveInterface\
    \ = nil\n    }\n\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeExists bool\n    var smallestPositiveExists bool\n\
    \n    for _, value := range lst {\n        if value < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = value\n                largestNegativeExists\
    \ = true\n            } else if value > largestNegative {\n                largestNegative\
    \ = value\n            }\n        } else if value > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = value\n                smallestPositiveExists\
    \ = true\n            } else if value < smallestPositive {\n                smallestPositive\
    \ = value\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n\
    \        largestNegative = 0\n    }\n\n    if !smallestPositiveExists {\n    \
    \    smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    var largestNegativeInterface,\
    \ smallestPositiveInterface interface{}\n    if largestNegativeSet {\n       \
    \ largestNegativeInterface = largestNegative\n    }\n    if smallestPositiveSet\
    \ {\n        smallestPositiveInterface = smallestPositive\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative, smallestPositive\
    \ int\n    var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largestNegativeFound {\n                largestNegative =\
    \ v\n                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \n    return []interface{}{largestNegative, smallestPositive}\n}\n", "    var\
    \ largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, num := range lst {\n  \
    \      if num < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = num\n                largestNegativeSet = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveSet {\n        \
    \        smallestPositive = num\n                smallestPositiveSet = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, value := range lst {\n\
    \        if value < 0 {\n            if largestNegativeExists {\n            \
    \    if value > largestNegative {\n                    largestNegative = value\n\
    \                }\n            } else {\n                largestNegative = value\n\
    \                largestNegativeExists = true\n            }\n        } else if\
    \ value > 0 {\n            if smallestPositiveExists {\n                if value\
    \ < smallestPositive {\n                    smallestPositive = value\n       \
    \         }\n            } else {\n                smallestPositive = value\n\
    \                smallestPositiveExists = true\n            }\n        }\n   \
    \ }\n\n    if largestNegativeExists {\n        if smallestPositiveExists {\n \
    \           return []interface{}{largestNegative, smallestPositive}\n        }\
    \ else {\n            return []interface{}{largestNegative, nil}\n        }\n\
    \    } else {\n        if smallestPositiveExists {\n            return []interface{}{nil,\
    \ smallestPositive}\n        } else {\n            return []interface{}{nil, nil}\n\
    \        }\n    }\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeFound bool\n    var smallestPositiveFound bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeFound, smallestPositiveFound bool\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeFound {\n        \
    \        largestNegative = v\n                largestNegativeFound = true\n  \
    \          } else if v > largestNegative {\n                largestNegative =\
    \ v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeFound bool\n    var smallestPositiveFound bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if largestNegativeFound\
    \ == false {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if smallestPositiveFound\
    \ == false {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if largestNegativeFound == false\
    \ {\n        largestNegative = 0\n    }\n\n    if smallestPositiveFound == false\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n\n    var\
    \ largestNegativeInterface, smallestPositiveInterface interface{}\n    if largestNegativeSet\
    \ {\n        largestNegativeInterface = largestNegative\n    }\n    if smallestPositiveSet\
    \ {\n        smallestPositiveInterface = smallestPositive\n    }\n\n    return\
    \ []interface{}{largestNegativeInterface, smallestPositiveInterface}\n}\n", " \
    \   var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, i := range lst {\n  \
    \      if i < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = i\n                largestNegativeFound = true\n            } else if i >\
    \ largestNegative {\n                largestNegative = i\n            }\n    \
    \    } else if i > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = i\n                smallestPositiveFound = true\n    \
    \        } else if i < smallestPositive {\n                smallestPositive =\
    \ i\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeSet {\n                if v > largestNegative {\n\
    \                    largestNegative = v\n                }\n            } else\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if smallestPositiveSet\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeFound, smallestPositiveFound bool\n\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeFound {\n        \
    \        largestNegative = v\n                largestNegativeFound = true\n  \
    \          } else if v > largestNegative {\n                largestNegative =\
    \ v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, num := range lst {\n\
    \        if num < 0 {\n            if largestNegativeFound == false {\n      \
    \          largestNegative = num\n                largestNegativeFound = true\n\
    \            } else if num > largestNegative {\n                largestNegative\
    \ = num\n            }\n        } else if num > 0 {\n            if smallestPositiveFound\
    \ == false {\n                smallestPositive = num\n                smallestPositiveFound\
    \ = true\n            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n\n    if largestNegativeFound == false\
    \ {\n        largestNegative = 0\n    }\n\n    if smallestPositiveFound == false\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeSet bool\n    var smallestPositiveSet bool\n\n \
    \   for _, val := range lst {\n        if val < 0 {\n            if !largestNegativeSet\
    \ {\n                largestNegative = val\n                largestNegativeSet\
    \ = true\n            } else if val > largestNegative {\n                largestNegative\
    \ = val\n            }\n        } else if val > 0 {\n            if !smallestPositiveSet\
    \ {\n                smallestPositive = val\n                smallestPositiveSet\
    \ = true\n            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n\n    var largestNegativeInterface interface{}\n\
    \    var smallestPositiveInterface interface{}\n\n    if largestNegativeSet {\n\
    \        largestNegativeInterface = largestNegative\n    } else {\n        largestNegativeInterface\
    \ = nil\n    }\n\n    if smallestPositiveSet {\n        smallestPositiveInterface\
    \ = smallestPositive\n    } else {\n        smallestPositiveInterface = nil\n\
    \    }\n\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, val := range lst {\n  \
    \      if val < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = val\n                largestNegativeSet = true\n            } else if val\
    \ > largestNegative {\n                largestNegative = val\n            }\n\
    \        } else if val > 0 {\n            if !smallestPositiveSet {\n        \
    \        smallestPositive = val\n                smallestPositiveSet = true\n\
    \            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, num := range lst {\n  \
    \      if num < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = num\n                largestNegativeSet = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveSet {\n        \
    \        smallestPositive = num\n                smallestPositiveSet = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n\n    for _, num := range lst {\n        if num <\
    \ 0 && !largestNegativeSet {\n            largestNegative = num\n            largestNegativeSet\
    \ = true\n        } else if num < 0 && largestNegativeSet {\n            if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 && !smallestPositiveSet {\n            smallestPositive\
    \ = num\n            smallestPositiveSet = true\n        } else if num > 0 &&\
    \ smallestPositiveSet {\n            if num < smallestPositive {\n           \
    \     smallestPositive = num\n            }\n        }\n    }\n\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n\n    if !smallestPositiveSet {\n   \
    \     smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if largestNegativeSet == false || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if smallestPositiveSet\
    \ == false || v < smallestPositive {\n                smallestPositive = v\n \
    \               smallestPositiveSet = true\n            }\n        }\n    }\n\n\
    \    if largestNegativeSet == false {\n        largestNegative = 0\n    }\n  \
    \  if smallestPositiveSet == false {\n        smallestPositive = 0\n    }\n\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeExists bool\n    var\
    \ smallestPositiveExists bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if largestNegativeExists == false {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if smallestPositiveExists == false {\n   \
    \             smallestPositive = v\n                smallestPositiveExists = true\n\
    \            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if largestNegativeExists == false\
    \ {\n        largestNegative = 0\n    }\n\n    if smallestPositiveExists == false\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n\n    for _, num := range\
    \ lst {\n        if num < 0 && !largestNegativeSet {\n            largestNegative\
    \ = num\n            largestNegativeSet = true\n        } else if num < 0 && largestNegativeSet\
    \ {\n            if num > largestNegative {\n                largestNegative =\
    \ num\n            }\n        } else if num > 0 && !smallestPositiveSet {\n  \
    \          smallestPositive = num\n            smallestPositiveSet = true\n  \
    \      } else if num > 0 && smallestPositiveSet {\n            if num < smallestPositive\
    \ {\n                smallestPositive = num\n            }\n        }\n    }\n\
    \n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeSet bool\n    var smallestPositiveSet bool\n\n \
    \   for _, num := range lst {\n        if num < 0 {\n            if !largestNegativeSet\
    \ {\n                largestNegative = num\n                largestNegativeSet\
    \ = true\n            } else if num > largestNegative {\n                largestNegative\
    \ = num\n            }\n        } else if num > 0 {\n            if !smallestPositiveSet\
    \ {\n                smallestPositive = num\n                smallestPositiveSet\
    \ = true\n            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largestNegativeSet == false {\n              \
    \  largestNegative = v\n                largestNegativeSet = true\n          \
    \  } else if v > largestNegative {\n                largestNegative = v\n    \
    \        }\n        } else if v > 0 {\n            if smallestPositiveSet == false\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if largestNegativeSet == false {\n\
    \        largestNegative = 0\n    }\n\n    if smallestPositiveSet == false {\n\
    \        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, val := range lst {\n        if val < 0\
    \ {\n            if !largestNegativeSet || val > largestNegative {\n         \
    \       largestNegative = val\n                largestNegativeSet = true\n   \
    \         }\n        } else if val > 0 {\n            if !smallestPositiveSet\
    \ || val < smallestPositive {\n                smallestPositive = val\n      \
    \          smallestPositiveSet = true\n            }\n        }\n    }\n    if\
    \ !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeFound bool\n    var smallestPositiveFound bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, val := range lst {\n  \
    \      if val < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = val\n                largestNegativeSet = true\n            } else if val\
    \ > largestNegative {\n                largestNegative = val\n            }\n\
    \        } else if val > 0 {\n            if !smallestPositiveSet {\n        \
    \        smallestPositive = val\n                smallestPositiveSet = true\n\
    \            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n\n    if !largestNegativeSet {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n \
    \   if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeFound, smallestPositiveFound bool\n\
    \n    for _, n := range lst {\n        if n < 0 {\n            if !largestNegativeFound\
    \ || n > largestNegative {\n                largestNegative = n\n            \
    \    largestNegativeFound = true\n            }\n        } else if n > 0 {\n \
    \           if !smallestPositiveFound || n < smallestPositive {\n            \
    \    smallestPositive = n\n                smallestPositiveFound = true\n    \
    \        }\n        }\n    }\n\n    if !largestNegativeFound {\n        largestNegative\
    \ = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n\
    \    }\n\n    return []interface{}{largestNegative, smallestPositive}\n}\n", " \
    \   var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeExists, smallestPositiveExists bool\n\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeExists {\n       \
    \         largestNegative = v\n                largestNegativeExists = true\n\
    \            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeExists,\
    \ smallestPositiveExists bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeExists {\n                largestNegative = v\n\
    \                largestNegativeExists = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveExists {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            } else if v\
    \ < smallestPositive {\n                smallestPositive = v\n            }\n\
    \        }\n    }\n    if !largestNegativeExists {\n        largestNegative =\
    \ 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive = 0\n \
    \   }\n    return []interface{}{largestNegative, smallestPositive}\n}\n", "  \
    \  var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeExists,\
    \ smallestPositiveExists bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, n := range lst {\n        if n < 0 {\n\
    \            if !largestNegativeSet || n > largestNegative {\n               \
    \ largestNegative = n\n                largestNegativeSet = true\n           \
    \ }\n        } else if n > 0 {\n            if !smallestPositiveSet || n < smallestPositive\
    \ {\n                smallestPositive = n\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative, smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    var largestNegativeInterface, smallestPositiveInterface\
    \ interface{}\n    if largestNegativeExists {\n        largestNegativeInterface\
    \ = largestNegative\n    }\n    if smallestPositiveExists {\n        smallestPositiveInterface\
    \ = smallestPositive\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative, smallestPositive\
    \ int\n    var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n \
    \   if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n \
    \   if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeInitialized bool\n\
    \    var smallestPositiveInitialized bool\n\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if !largestNegativeInitialized {\n             \
    \   largestNegative = v\n                largestNegativeInitialized = true\n \
    \           } else if v > largestNegative {\n                largestNegative =\
    \ v\n            }\n        } else if v > 0 {\n            if !smallestPositiveInitialized\
    \ {\n                smallestPositive = v\n                smallestPositiveInitialized\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeInitialized {\n\
    \        largestNegative = 0\n    }\n    if !smallestPositiveInitialized {\n \
    \       smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeFound, smallestPositiveFound bool\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if !largestNegativeFound {\n        \
    \        largestNegative = v\n                largestNegativeFound = true\n  \
    \          } else if v > largestNegative {\n                largestNegative =\
    \ v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative, smallestPositive int\n    largestNegative = 0\n    smallestPositive\
    \ = 0\n    for _, v := range lst {\n        if v < 0 {\n            if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else {\n  \
    \          if v < smallestPositive {\n                smallestPositive = v\n \
    \           }\n        }\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, num := range lst {\n        if num < 0\
    \ && !largestNegativeSet {\n            largestNegative = num\n            largestNegativeSet\
    \ = true\n        } else if num < 0 && largestNegativeSet {\n            if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 && !smallestPositiveSet {\n            smallestPositive\
    \ = num\n            smallestPositiveSet = true\n        } else if num > 0 &&\
    \ smallestPositiveSet {\n            if num < smallestPositive {\n           \
    \     smallestPositive = num\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largestNegativeSet {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeSet\
    \ = true\n            }\n        } else if v > 0 {\n            if smallestPositiveSet\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    var largestNegativeInterface interface{}\n    var smallestPositiveInterface\
    \ interface{}\n\n    if largestNegativeSet {\n        largestNegativeInterface\
    \ = largestNegative\n    } else {\n        largestNegativeInterface = nil\n  \
    \  }\n\n    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n", "    var largestNegative, smallestPositive\
    \ int\n    var largestNegativeExists, smallestPositiveExists bool\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeExists {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, v := range lst {\n \
    \       if v < 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, v := range lst {\n \
    \       if v < 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeExists,\
    \ smallestPositiveExists bool\n\n    for _, num := range lst {\n        if num\
    \ < 0 {\n            if largestNegativeExists {\n                if num > largestNegative\
    \ {\n                    largestNegative = num\n                }\n          \
    \  } else {\n                largestNegative = num\n                largestNegativeExists\
    \ = true\n            }\n        } else if num > 0 {\n            if smallestPositiveExists\
    \ {\n                if num < smallestPositive {\n                    smallestPositive\
    \ = num\n                }\n            } else {\n                smallestPositive\
    \ = num\n                smallestPositiveExists = true\n            }\n      \
    \  }\n    }\n\n    if !largestNegativeExists {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveExists {\n        smallestPositive = 0\n    }\n\
    \n    return []interface{}{largestNegative, smallestPositive}\n}\n", "    var\
    \ largestNegative, smallestPositive int\n    var largestNegativeSet, smallestPositiveSet\
    \ bool\n\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n \
    \   if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n\n    for _, value := range lst {\n        if value\
    \ < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = value\n                largestNegativeFound = true\n            } else if\
    \ value > largestNegative {\n                largestNegative = value\n       \
    \     }\n        } else if value > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = value\n                smallestPositiveFound\
    \ = true\n            } else if value < smallestPositive {\n                smallestPositive\
    \ = value\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n\
    \        largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n     \
    \   smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeExists,\
    \ smallestPositiveExists bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeExists {\n                largestNegative = v\n\
    \                largestNegativeExists = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveExists {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            } else if v\
    \ < smallestPositive {\n                smallestPositive = v\n            }\n\
    \        }\n    }\n    if !largestNegativeExists {\n        largestNegative =\
    \ 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive = 0\n \
    \   }\n    return []interface{}{largestNegative, smallestPositive}\n}\n", "  \
    \  var largestNegative, smallestPositive int\n    var largestNegativeSet, smallestPositiveSet\
    \ bool\n    for _, n := range lst {\n        if n < 0 {\n            if !largestNegativeSet\
    \ || n > largestNegative {\n                largestNegative = n\n            \
    \    largestNegativeSet = true\n            }\n        } else if n > 0 {\n   \
    \         if !smallestPositiveSet || n < smallestPositive {\n                smallestPositive\
    \ = n\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeSet bool\n    var smallestPositiveSet bool\n\n \
    \   for _, v := range lst {\n        if v < 0 {\n            if largestNegativeSet\
    \ == false {\n                largestNegative = v\n                largestNegativeSet\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if smallestPositiveSet\
    \ == false {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if largestNegativeSet == false {\n\
    \        largestNegative = 0\n    }\n\n    if smallestPositiveSet == false {\n\
    \        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n\n\
    \    if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    var largestNegativeResult interface{}\n\
    \    var smallestPositiveResult interface{}\n\n    if largestNegativeFound {\n\
    \        largestNegativeResult = largestNegative\n    } else {\n        largestNegativeResult\
    \ = nil\n    }\n\n    if smallestPositiveFound {\n        smallestPositiveResult\
    \ = smallestPositive\n    } else {\n        smallestPositiveResult = nil\n   \
    \ }\n\n    return []interface{}{largestNegativeResult, smallestPositiveResult}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, v := range lst {\n \
    \       if v < 0 {\n            if largestNegativeExists {\n                if\
    \ v > largestNegative {\n                    largestNegative = v\n           \
    \     }\n            } else {\n                largestNegative = v\n         \
    \       largestNegativeExists = true\n            }\n        } else if v > 0 {\n\
    \            if smallestPositiveExists {\n                if v < smallestPositive\
    \ {\n                    smallestPositive = v\n                }\n           \
    \ } else {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            }\n        }\n    }\n\n    var largestNegativeInterface\
    \ interface{}\n    var smallestPositiveInterface interface{}\n\n    if largestNegativeExists\
    \ {\n        largestNegativeInterface = largestNegative\n    } else {\n      \
    \  largestNegativeInterface = nil\n    }\n\n    if smallestPositiveExists {\n\
    \        smallestPositiveInterface = smallestPositive\n    } else {\n        smallestPositiveInterface\
    \ = nil\n    }\n\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, v := range lst {\n \
    \       if v < 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeExists,\
    \ smallestPositiveExists bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeExists {\n                largestNegative = v\n\
    \                largestNegativeExists = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveExists {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            } else if v\
    \ < smallestPositive {\n                smallestPositive = v\n            }\n\
    \        }\n    }\n    if !largestNegativeExists {\n        largestNegative =\
    \ 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive = 0\n \
    \   }\n    return []interface{}{largestNegative, smallestPositive}\n}\n", "  \
    \  var largestNegative, smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeExists {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n\n    for _, v := range lst {\n \
    \       if v < 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
