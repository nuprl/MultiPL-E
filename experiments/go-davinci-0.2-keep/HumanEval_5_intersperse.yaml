name: HumanEval_5_intersperse
language: go_test.go
prompt: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Insert a number 'delimeter' between every two consecutive elements of input list\
  \ `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n\
  // [1, 4, 2, 4, 3]\nfunc intersperse(numbers []int, delimeter int) []int {\n"
tests: "func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual:\
  \ candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n   \
  \  { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n \
  \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(numbers) == 0 {\n        return numbers\n    }\n    result\
    \ := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers); i++ {\n        result[i\
    \ * 2] = numbers[i]\n        if i != len(numbers) - 1 {\n            result[i\
    \ * 2 + 1] = delimeter\n        }\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    result := make([]int, len(numbers)\
    \ * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers); i++\
    \ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i * 2] = numbers[i]\n        if i < len(numbers) - 1 {\n\
    \            result[i * 2 + 1] = delimeter\n        }\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers)*2-1)\n    for i, n := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return\
    \ numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result\
    \ = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++ {\n    \
    \    result = append(result, delimeter)\n        result = append(result, numbers[i])\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for i, n := range numbers {\n       \
    \ result = append(result, n)\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n", "  \
    \  if len(numbers) == 0 {\n        return numbers\n    }\n\n    var result []int\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n", "    if\
    \ len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers)*2-1)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers)*2-1)\n    result = append(result, numbers[0])\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n   \
    \     result = append(result, numbers[i])\n    }\n    return result\n}\n", " \
    \   if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers)*2-1)\n    result = append(result, numbers[0])\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n   \
    \     result = append(result, numbers[i])\n    }\n    return result\n}\n", " \
    \   if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n        if i != 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers) <=\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers)\
    \ == 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n", "    if\
    \ len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n        if i != 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers) ==\
    \ 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, len(numbers) * 2 - 1)\n\
    \    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n\
    \        if i < len(numbers) - 1 {\n            result[i * 2 + 1] = delimeter\n\
    \        }\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n    \
    \    return numbers\n    }\n    result := make([]int, len(numbers) * 2 - 1)\n\
    \    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n\
    \        if i != len(numbers) - 1 {\n            result[i * 2 + 1] = delimeter\n\
    \        }\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n    \
    \    return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n\
    \    for i, number := range numbers {\n        if i != 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers)*2-1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers); i++ {\n\
    \        result[i * 2] = numbers[i]\n        if i < len(numbers) - 1 {\n     \
    \       result[i * 2 + 1] = delimeter\n        }\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, num := range numbers {\n        if i >\
    \ 0 {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, num)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)*2)\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    var result []int\n    for i, n := range\
    \ numbers {\n        result = append(result, n)\n        if i < len(numbers) -\
    \ 1 {\n            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, 0, len(numbers) * 2 - 1)\n    for i, number := range\
    \ numbers {\n        if i > 0 {\n            result = append(result, delimeter)\n\
    \        }\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result\
    \ := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers)\
    \ == 1 {\n        return numbers\n    }\n    result := make([]int, len(numbers)\
    \ * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers); i++\
    \ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n\n    result := []int{numbers[0]}\n    for _, n := range numbers[1:] {\n\
    \        result = append(result, delimeter, n)\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result\
    \ := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n        if i != 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers) ==\
    \ 0 {\n        return numbers\n    }\n\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers)*2-1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    for i, number := range numbers {\n\
    \        if i != 0 {\n            result = append(result, delimeter)\n       \
    \ }\n        result = append(result, number)\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers)*2-1)\n    result = append(result, numbers[0])\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n   \
    \     result = append(result, numbers[i])\n    }\n    return result\n}\n", " \
    \   if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    var result []int\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n", "    if\
    \ len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers)*2-1)\n    for i, n := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return\
    \ numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    for\
    \ i, n := range numbers {\n        if i > 0 {\n            result = append(result,\
    \ delimeter)\n        }\n        result = append(result, n)\n    }\n    return\
    \ result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n \
    \   result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n    \
    \    if i > 0 {\n            result = append(result, delimeter)\n        }\n \
    \       result = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n    \
    \    if i != 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers)*2-1)\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    for i, number := range numbers {\n        if i > 0 {\n           \
    \ result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n     \
    \   return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    for i, number := range numbers {\n        if i > 0 {\n           \
    \ result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n     \
    \   return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2 - 1)\n\
    \    for i, n := range numbers {\n        if i > 0 {\n            result = append(result,\
    \ delimeter)\n        }\n        result = append(result, n)\n    }\n    return\
    \ result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n \
    \   result := []int{numbers[0]}\n    for _, num := range numbers[1:] {\n     \
    \   result = append(result, delimeter, num)\n    }\n    return result\n}\n", " \
    \   if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n        if i > 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers) ==\
    \ 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    for i, n := range\
    \ numbers {\n        if i > 0 {\n            result = append(result, delimeter)\n\
    \        }\n        result = append(result, n)\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers)\
    \ == 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n", "    if\
    \ len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, number := range numbers {\n        if i\
    \ != 0 {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n    \
    \    if i > 0 {\n            result = append(result, delimeter)\n        }\n \
    \       result = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    for i, n := range\
    \ numbers {\n        if i > 0 {\n            result = append(result, delimeter)\n\
    \        }\n        result = append(result, n)\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n        if i > 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers) ==\
    \ 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers)*2-1)\n    for i, number := range numbers {\n   \
    \     if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, number)\n    }\n    return result\n}\n", "  \
    \  if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers)*2-1)\n    result = append(result, numbers[0])\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n   \
    \     result = append(result, numbers[i])\n    }\n    return result\n}\n", " \
    \   if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n        if i != 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers) ==\
    \ 0 {\n        return numbers\n    }\n    result := make([]int, len(numbers) *\
    \ 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n \
    \   }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    for i, n := range\
    \ numbers {\n        if i > 0 {\n            result = append(result, delimeter)\n\
    \        }\n        result = append(result, n)\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers)*2-1)\n    result = append(result, numbers[0])\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n   \
    \     result = append(result, numbers[i])\n    }\n    return result\n}\n", " \
    \   if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, number := range numbers {\n        if i\
    \ > 0 {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers)*2-1)\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers)*2-1)\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, 2 * len(numbers))\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    var result []int\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        result = append(result, numbers[i])\n        result = append(result,\
    \ delimeter)\n    }\n    result = append(result, numbers[len(numbers) - 1])\n\
    \    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result\
    \ := make([]int, 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n \
    \       if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    if len(numbers) == 1 {\n        return\
    \ numbers\n    }\n    result := make([]int, 0)\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        result = append(result, numbers[i])\n        result = append(result,\
    \ delimeter)\n    }\n    result = append(result, numbers[len(numbers) - 1])\n\
    \    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers)*2-1)\n    for i, number := range\
    \ numbers {\n        if i > 0 {\n            result = append(result, delimeter)\n\
    \        }\n        result = append(result, number)\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    for i, v := range numbers {\n    \
    \    if i > 0 {\n            result = append(result, delimeter)\n        }\n \
    \       result = append(result, v)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i, number := range numbers {\n        if i > 0 {\n       \
    \     result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n     \
    \   return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2 - 1)\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers)*2-1)\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    for i, n := range numbers {\n        if i != 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := []int{numbers[0]}\n\
    \    for _, n := range numbers[1:] {\n        result = append(result, delimeter,\
    \ n)\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return\
    \ numbers\n    }\n\n    var result []int\n    for i := 0; i < len(numbers) - 1;\
    \ i++ {\n        result = append(result, numbers[i])\n        result = append(result,\
    \ delimeter)\n    }\n    result = append(result, numbers[len(numbers) - 1])\n\
    \    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result\
    \ := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n        if i != 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers) ==\
    \ 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, len(numbers) * 2 - 1)\n\
    \    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n\
    \        if i != len(numbers) - 1 {\n            result[i * 2 + 1] = delimeter\n\
    \        }\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n    \
    \    return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    for i, n := range numbers {\n        if i != 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := []int{numbers[0]}\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n        if i != 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers) ==\
    \ 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)*2-1)\n\
    \    for i, n := range numbers {\n        if i > 0 {\n            result = append(result,\
    \ delimeter)\n        }\n        result = append(result, n)\n    }\n    return\
    \ result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n \
    \   result := make([]int, 0, len(numbers)*2-1)\n    for i, n := range numbers\
    \ {\n        if i != 0 {\n            result = append(result, delimeter)\n   \
    \     }\n        result = append(result, n)\n    }\n    return result\n}\n", " \
    \   if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, number := range numbers {\n        if i\
    \ != 0 {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    for i, number := range numbers {\n        if i != 0 {\n          \
    \  result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n     \
    \   return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n\
    \    for i, n := range numbers {\n        if i != 0 {\n            result = append(result,\
    \ delimeter)\n        }\n        result = append(result, n)\n    }\n    return\
    \ result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n \
    \   result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    for i, number := range numbers {\n\
    \        if i != 0 {\n            result = append(result, delimeter)\n       \
    \ }\n        result = append(result, number)\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    var result []int\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n", "    if\
    \ len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n        if i > 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers) ==\
    \ 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)*2-1)\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    if len(numbers) == 1 {\n        return numbers\n    }\n    result\
    \ := make([]int, 0, len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        result = append(result, numbers[i])\n        result = append(result,\
    \ delimeter)\n    }\n    result = append(result, numbers[len(numbers) - 1])\n\
    \    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers)*2-1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n\
    \    for i := 1; i < len(numbers); i++ {\n        result[i * 2 - 1] = delimeter\n\
    \        result[i * 2] = numbers[i]\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i, number := range numbers {\n        if i > 0 {\n       \
    \     result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n     \
    \   return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n\
    \    for i, number := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, number)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    for i, n := range\
    \ numbers {\n        if i > 0 {\n            result = append(result, delimeter)\n\
    \        }\n        result = append(result, n)\n    }\n    return result\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    var result []int\n    for i, number := range numbers {\n        if\
    \ i > 0 {\n            result = append(result, delimeter)\n        }\n       \
    \ result = append(result, number)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers)*2-1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n    \
    \    if i != 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result\
    \ := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n",
  "    var result []int\n    for i, n := range numbers {\n        result = append(result,\
    \ n)\n        if i < len(numbers) - 1 {\n            result = append(result, delimeter)\n\
    \        }\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n    \
    \    return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n\n    result := make([]int, 0, len(numbers) * 2\
    \ - 1)\n    for i, n := range numbers {\n        if i > 0 {\n            result\
    \ = append(result, delimeter)\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n    \
    \    if i > 0 {\n            result = append(result, delimeter)\n        }\n \
    \       result = append(result, n)\n    }\n    return result\n}\n", "    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n    var result []int\n    for i := 0;\
    \ i < len(numbers) - 1; i++ {\n        result = append(result, numbers[i])\n \
    \       result = append(result, delimeter)\n    }\n    result = append(result,\
    \ numbers[len(numbers) - 1])\n    return result\n}\n", "    if len(numbers) ==\
    \ 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n \
    \       return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2 -\
    \ 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
