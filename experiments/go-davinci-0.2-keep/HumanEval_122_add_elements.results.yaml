language: go_test.go
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] / 10 + arr[i] % 10\n\
    \        } else {\n            sum += arr[i] / 100 + (arr[i] % 100) / 10 + arr[i]\
    \ % 10\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpokn6q591_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmpokn6q591_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmpokn6q591_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n\
    \        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp0e2pfeky_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ _, v := range arr[:k] {\n        if v < 100 {\n            sum += v\n      \
    \  }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] / 10 + arr[i] % 10\n\
    \        } else {\n            sum += arr[i] / 100 + (arr[i] % 100) / 10 + arr[i]\
    \ % 10\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpokn6q591_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmpokn6q591_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmpokn6q591_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n\
    \        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp0e2pfeky_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] / 10 + arr[i] % 10\n\
    \        } else {\n            sum += arr[i] / 100 + (arr[i] % 100) / 10 + arr[i]\
    \ % 10\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpokn6q591_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmpokn6q591_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmpokn6q591_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] >= 10 && arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpos62tkjq_test.go:43: expected '%!s(int=-4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmpos62tkjq_test.go:43:\
    \ expected '%!s(int=125)', got '%!s(int=122)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmpos62tkjq_test.go:43: expected '%!s(int=24)', got '%!s(int=21)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__4 (0.00s)\n        tmpos62tkjq_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] > 99 {\n            sum += arr[i]\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=-4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmplydhtclz_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=232)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=125)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmplydhtclz_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4111)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] > 9 && arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp6glt2i0h_test.go:43: expected '%!s(int=-4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp6glt2i0h_test.go:43:\
    \ expected '%!s(int=125)', got '%!s(int=122)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp6glt2i0h_test.go:43: expected '%!s(int=24)', got '%!s(int=21)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__4 (0.00s)\n        tmp6glt2i0h_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n\
    \        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp0e2pfeky_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] >= 10 && arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpos62tkjq_test.go:43: expected '%!s(int=-4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmpos62tkjq_test.go:43:\
    \ expected '%!s(int=125)', got '%!s(int=122)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmpos62tkjq_test.go:43: expected '%!s(int=24)', got '%!s(int=21)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__4 (0.00s)\n        tmpos62tkjq_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] > 99 {\n            sum += arr[i]\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=-4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmplydhtclz_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=232)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=125)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmplydhtclz_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4111)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] > 99 {\n            sum += arr[i]\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=-4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmplydhtclz_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=232)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=125)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmplydhtclz_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4111)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n\
    \        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp0e2pfeky_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n\
    \        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp0e2pfeky_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n\
    \        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp0e2pfeky_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] > 99 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5htge6um_test.go:43: expected '%!s(int=-4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5htge6um_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=232)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5htge6um_test.go:43: expected '%!s(int=125)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5htge6um_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4111)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmp5htge6um_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n\
    \        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp0e2pfeky_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] > 9 && arr[i] < 100 {\n            sum\
    \ += arr[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp6glt2i0h_test.go:43: expected '%!s(int=-4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp6glt2i0h_test.go:43:\
    \ expected '%!s(int=125)', got '%!s(int=122)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp6glt2i0h_test.go:43: expected '%!s(int=24)', got '%!s(int=21)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__4 (0.00s)\n        tmp6glt2i0h_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n\
    \        } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] > 99 {\n            sum += arr[i]\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=-4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmplydhtclz_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=232)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=125)', got '%!s(int=0)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmplydhtclz_test.go:43:\
    \ expected '%!s(int=24)', got '%!s(int=4111)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmplydhtclz_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp7x9iq8xm_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp7x9iq8xm_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    var sum int\n    for\
    \ i := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n\
    \        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i] / 10\n\
    \        } else {\n            sum += arr[i] % 10 + arr[i] / 10 % 10 + arr[i]\
    \ / 100\n        }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__2 (0.00s)\n        tmp0e2pfeky_test.go:47:\
    \ expected '%!s(int=125)', got '%!s(int=17)'\n    --- FAIL: TestAdd_Elements/test_num__3\
    \ (0.00s)\n        tmp0e2pfeky_test.go:47: expected '%!s(int=24)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073563
- exit_code: 0
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 #\
    \ sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for i\
    \ := 0; i < k; i++ {\n        if arr[i] < 100 {\n            sum += arr[i]\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073563
