name: HumanEval_105_by_length
language: go_test.go
prompt: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
  // reverse the resulting array, and then replace each digit by its corresponding\
  \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
  , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
  // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2,\
  \ 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
  , \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// arr =\
  \ []\n// return []\n// If the array has any strange number ignore it:\n// arr =\
  \ [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n\
  // return = ['One']\nfunc by_length(arr []int) []string {\n"
tests: "func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
  \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
  \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1,\
  \ 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
  \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i,\
  \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // your code here\n    return nil\n}\n", "    // your code here\n\
    \    return []string{}\n}\n", "    // your code here\n    return []string{}\n\
    }\n", "    return []string{}\n}\n", "    // your code here\n    return nil\n}\n",
  "    // Write your code here\n    return []string{}\n}\n", "    // your code here\n\
    \    return []string{}\n}\n", "    return []string{}\n}\n", "    return []string{}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    // Write your code here\n\
    \    return []string{}\n}\n", "    // your code here\n    return []string{}\n\
    }\n", "    // your code here\n    return []string{}\n}\n", "    // Write your\
    \ code here\n    return []string{}\n}\n", "    return []string{}\n}\n", "    return\
    \ nil\n}\n", "    // your code here\n    return nil\n}\n", "    return []string{}\n\
    }\n", "    return []string{}\n}\n", "    return []string{}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
